{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1eccd79",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:36.851007Z",
     "iopub.status.busy": "2025-06-29T09:00:36.850719Z",
     "iopub.status.idle": "2025-06-29T09:00:41.563165Z",
     "shell.execute_reply": "2025-06-29T09:00:41.562398Z"
    },
    "papermill": {
     "duration": 4.719854,
     "end_time": "2025-06-29T09:00:41.564789",
     "exception": false,
     "start_time": "2025-06-29T09:00:36.844935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from itertools import combinations\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from scipy.stats import zscore\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "\n",
    "from sklearn.model_selection import train_test_split, learning_curve\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from sklearn.linear_model import LinearRegression, Ridge\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.neural_network import MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "07578735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.574683Z",
     "iopub.status.busy": "2025-06-29T09:00:41.573475Z",
     "iopub.status.idle": "2025-06-29T09:00:41.586063Z",
     "shell.execute_reply": "2025-06-29T09:00:41.585188Z"
    },
    "papermill": {
     "duration": 0.018598,
     "end_time": "2025-06-29T09:00:41.587580",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.568982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "FILENAME = ''\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        FILENAME = os.path.join(dirname, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70f01e64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.596047Z",
     "iopub.status.busy": "2025-06-29T09:00:41.595795Z",
     "iopub.status.idle": "2025-06-29T09:00:41.830192Z",
     "shell.execute_reply": "2025-06-29T09:00:41.829288Z"
    },
    "papermill": {
     "duration": 0.240167,
     "end_time": "2025-06-29T09:00:41.831703",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.591536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rice seasons: ['Autumn' 'Summer' 'Winter' 'Kharif' 'Rabi' 'Whole Year']\n",
      "Maize seasons: ['Kharif' 'Rabi' 'Summer' 'Whole Year' 'Autumn' 'Winter']\n",
      "Potato seasons: ['Whole Year' 'Kharif' 'Rabi' 'Summer' 'Winter' 'Autumn']\n",
      "Urad seasons: ['Kharif' 'Rabi' 'Whole Year' 'Summer' 'Autumn' 'Winter']\n"
     ]
    }
   ],
   "source": [
    "dataset = pd.read_csv(FILENAME)\n",
    "dataset['Crop'] = dataset['Crop'].str.strip()\n",
    "dataset['Season'] = dataset['Season'].str.strip()\n",
    "dataset['State'] = dataset['State'].str.strip()\n",
    "\n",
    "crops_to_analyze = [\"Rice\", \"Maize\", \"Potato\", \"Urad\"]\n",
    "\n",
    "datasets = {}\n",
    "\n",
    "for crop in dataset['Crop'].unique():\n",
    "    datasets[crop] = dataset[dataset['Crop'] == crop]\n",
    "\n",
    "DATASET = {}\n",
    "\n",
    "for crop in crops_to_analyze:\n",
    "    print(f\"{crop} seasons: {datasets[crop]['Season'].unique()}\")\n",
    "    DATASET[crop] = datasets[crop]\n",
    "\n",
    "threshold = 3\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    z_scores = dataset.select_dtypes(include=[float, int]).apply(zscore)\n",
    "    DATASET[crop] = dataset[(z_scores.abs() < threshold).all(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0c77b538",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.840869Z",
     "iopub.status.busy": "2025-06-29T09:00:41.840129Z",
     "iopub.status.idle": "2025-06-29T09:00:41.863560Z",
     "shell.execute_reply": "2025-06-29T09:00:41.862888Z"
    },
    "papermill": {
     "duration": 0.029525,
     "end_time": "2025-06-29T09:00:41.865044",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.835519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_scale = [\"Crop_Year\", \"Area\", \"Production\", \"Annual_Rainfall\", \"Fertilizer\", \"Pesticide\"]\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    scaler = StandardScaler()\n",
    "    \n",
    "    scaled_values = scaler.fit_transform(dataset[columns_to_scale])\n",
    "    \n",
    "    dataset_scaled = dataset.copy()\n",
    "    dataset_scaled[columns_to_scale] = scaled_values\n",
    "    \n",
    "    DATASET[crop] = dataset_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dd422c83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.874110Z",
     "iopub.status.busy": "2025-06-29T09:00:41.873834Z",
     "iopub.status.idle": "2025-06-29T09:00:41.888259Z",
     "shell.execute_reply": "2025-06-29T09:00:41.887637Z"
    },
    "papermill": {
     "duration": 0.020368,
     "end_time": "2025-06-29T09:00:41.889559",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.869191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for crop, dataset in DATASET.items():\n",
    "    dataset = dataset.copy()\n",
    "\n",
    "    season_encoder = LabelEncoder()\n",
    "    state_encoder = LabelEncoder()\n",
    "\n",
    "    dataset['Season_Encoded'] = season_encoder.fit_transform(dataset['Season'])\n",
    "    dataset['State_Encoded'] = state_encoder.fit_transform(dataset['State'])\n",
    "\n",
    "    dataset = dataset.drop(labels=['Season', 'State'], axis=1)\n",
    "    \n",
    "    DATASET[crop] = dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "26560eda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.898558Z",
     "iopub.status.busy": "2025-06-29T09:00:41.897881Z",
     "iopub.status.idle": "2025-06-29T09:00:41.947325Z",
     "shell.execute_reply": "2025-06-29T09:00:41.946612Z"
    },
    "papermill": {
     "duration": 0.055516,
     "end_time": "2025-06-29T09:00:41.948902",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.893386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features_to_pca = [\"Area\", \"Production\", \"Fertilizer\", \"Pesticide\"]\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    dataset = dataset.copy()\n",
    "    \n",
    "    features = dataset[features_to_pca]\n",
    "    \n",
    "    pca = PCA(n_components=2)\n",
    "    pca_features = pca.fit_transform(features)\n",
    "    \n",
    "    dataset = dataset.drop(columns=features_to_pca)\n",
    "    \n",
    "    dataset[\"PC1\"] = pca_features[:, 0]\n",
    "    dataset[\"PC2\"] = pca_features[:, 1]\n",
    "    \n",
    "    DATASET[crop] = dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "91d3a54a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.957735Z",
     "iopub.status.busy": "2025-06-29T09:00:41.957153Z",
     "iopub.status.idle": "2025-06-29T09:00:41.964002Z",
     "shell.execute_reply": "2025-06-29T09:00:41.963192Z"
    },
    "papermill": {
     "duration": 0.012547,
     "end_time": "2025-06-29T09:00:41.965271",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.952724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined_dataset = pd.concat(DATASET.values(), ignore_index=True)\n",
    "\n",
    "crop_encoder = LabelEncoder()\n",
    "combined_dataset[\"Crop_Encoded\"] = crop_encoder.fit_transform(combined_dataset[\"Crop\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "380a3d14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.973631Z",
     "iopub.status.busy": "2025-06-29T09:00:41.973368Z",
     "iopub.status.idle": "2025-06-29T09:00:41.977594Z",
     "shell.execute_reply": "2025-06-29T09:00:41.976921Z"
    },
    "papermill": {
     "duration": 0.009834,
     "end_time": "2025-06-29T09:00:41.978759",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.968925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "models = {\n",
    "    \"LinearRegression\": LinearRegression(),\n",
    "    \"Ridge\": Ridge(),\n",
    "    \"DecisionTree\": DecisionTreeRegressor(),\n",
    "    \"RandomForest\": RandomForestRegressor(),\n",
    "    \"GradientBoosting\": GradientBoostingRegressor(),\n",
    "    \"MLPRegressor\": MLPRegressor(max_iter=500)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "31b1807a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:41.986970Z",
     "iopub.status.busy": "2025-06-29T09:00:41.986717Z",
     "iopub.status.idle": "2025-06-29T09:00:41.990952Z",
     "shell.execute_reply": "2025-06-29T09:00:41.990036Z"
    },
    "papermill": {
     "duration": 0.009947,
     "end_time": "2025-06-29T09:00:41.992438",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.982491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = ['Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded']\n",
    "target = 'Yield'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "14a525a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:42.001085Z",
     "iopub.status.busy": "2025-06-29T09:00:42.000547Z",
     "iopub.status.idle": "2025-06-29T09:00:42.005060Z",
     "shell.execute_reply": "2025-06-29T09:00:42.004243Z"
    },
    "papermill": {
     "duration": 0.010362,
     "end_time": "2025-06-29T09:00:42.006437",
     "exception": false,
     "start_time": "2025-06-29T09:00:41.996075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results = []\n",
    "total_combinations = sum(1 for r in range(1, len(features) + 1) for _ in combinations(features, r))\n",
    "combo_index = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3fc433d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:00:42.014431Z",
     "iopub.status.busy": "2025-06-29T09:00:42.014211Z",
     "iopub.status.idle": "2025-06-29T09:11:18.146282Z",
     "shell.execute_reply": "2025-06-29T09:11:18.144971Z"
    },
    "papermill": {
     "duration": 636.137728,
     "end_time": "2025-06-29T09:11:18.147836",
     "exception": false,
     "start_time": "2025-06-29T09:00:42.010108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[1/127] Testing feature combination: ('Crop_Year',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1622 | R²: 0.0026\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1623 | R²: 0.0026\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5809 | R²: 0.6165\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5846 | R²: 0.6154\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0496 | R²: 0.4646\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1675 | R²: 0.0000\n",
      "\n",
      "[2/127] Testing feature combination: ('Annual_Rainfall',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1498 | R²: 0.0085\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1498 | R²: 0.0085\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.7511 | R²: -0.2996\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.2952 | R²: -0.0622\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 4.1577 | R²: 0.0047\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1459 | R²: 0.0104\n",
      "\n",
      "[3/127] Testing feature combination: ('PC1',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1900 | R²: -0.0108\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1900 | R²: -0.0108\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.2241 | R²: -0.5713\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.5122 | R²: -0.1722\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.8556 | R²: 0.1441\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9576 | R²: 0.0982\n",
      "\n",
      "[4/127] Testing feature combination: ('PC2',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1612 | R²: 0.0031\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1612 | R²: 0.0031\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.8410 | R²: -0.9643\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.8664 | R²: -0.3634\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.9180 | R²: 0.1162\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0753 | R²: 0.0438\n",
      "\n",
      "[5/127] Testing feature combination: ('Season_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9936 | R²: 0.0817\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9936 | R²: 0.0818\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6389 | R²: 0.2376\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6389 | R²: 0.2376\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.6389 | R²: 0.2376\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7768 | R²: 0.1788\n",
      "\n",
      "[6/127] Testing feature combination: ('State_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1656 | R²: 0.0010\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1656 | R²: 0.0010\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0442 | R²: 0.0583\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.0397 | R²: 0.0604\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 4.0387 | R²: 0.0609\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1657 | R²: 0.0009\n",
      "\n",
      "[7/127] Testing feature combination: ('Crop_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0161 | R²: 0.0714\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0161 | R²: 0.0714\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3973 | R²: 0.6691\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3970 | R²: 0.6692\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3973 | R²: 0.6691\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8634 | R²: 0.5279\n",
      "\n",
      "[8/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1379 | R²: 0.0142\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1379 | R²: 0.0142\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.3055 | R²: -0.0673\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9835 | R²: 0.4875\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3488 | R²: 0.3544\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1430 | R²: 0.0118\n",
      "\n",
      "[9/127] Testing feature combination: ('Crop_Year', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1800 | R²: -0.0059\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1800 | R²: -0.0059\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.6597 | R²: -0.2501\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6842 | R²: 0.2186\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3617 | R²: 0.3494\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0004 | R²: 0.0786\n",
      "\n",
      "[10/127] Testing feature combination: ('Crop_Year', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1520 | R²: 0.0075\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1521 | R²: 0.0075\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.0890 | R²: -0.4910\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9785 | R²: 0.0887\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4023 | R²: 0.3335\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.1111 | R²: 0.0270\n",
      "\n",
      "[11/127] Testing feature combination: ('Crop_Year', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9772 | R²: 0.0893\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9772 | R²: 0.0893\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0572 | R²: 0.4619\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0187 | R²: 0.4754\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0585 | R²: 0.4614\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9320 | R²: 0.1099\n",
      "\n",
      "[12/127] Testing feature combination: ('Crop_Year', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1533 | R²: 0.0069\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1533 | R²: 0.0069\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.4591 | R²: 0.3111\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9542 | R²: 0.4975\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1465 | R²: 0.4300\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1482 | R²: 0.0093\n",
      "\n",
      "[13/127] Testing feature combination: ('Crop_Year', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0041 | R²: 0.0769\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0041 | R²: 0.0769\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5809 | R²: 0.6165\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5824 | R²: 0.6160\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5276 | R²: 0.6322\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.4664 | R²: 0.6498\n",
      "\n",
      "[14/127] Testing feature combination: ('Annual_Rainfall', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1670 | R²: 0.0003\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1670 | R²: 0.0003\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.9307 | R²: -0.3997\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9686 | R²: 0.0932\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.7681 | R²: 0.1825\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9359 | R²: 0.1081\n",
      "\n",
      "[15/127] Testing feature combination: ('Annual_Rainfall', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1400 | R²: 0.0132\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1400 | R²: 0.0132\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.6346 | R²: -0.2367\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.8585 | R²: 0.1428\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.7381 | R²: 0.1955\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9768 | R²: 0.0895\n",
      "\n",
      "[16/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9541 | R²: 0.0998\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9540 | R²: 0.0999\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.6561 | R²: -0.2481\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9267 | R²: 0.1123\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3546 | R²: 0.3521\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6727 | R²: 0.2234\n",
      "\n",
      "[17/127] Testing feature combination: ('Annual_Rainfall', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1455 | R²: 0.0106\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1455 | R²: 0.0106\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0501 | R²: 0.0556\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6062 | R²: 0.2513\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.9589 | R²: 0.0977\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1388 | R²: 0.0138\n",
      "\n",
      "[18/127] Testing feature combination: ('Annual_Rainfall', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9986 | R²: 0.0795\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9985 | R²: 0.0795\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0831 | R²: 0.4527\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6251 | R²: 0.6033\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1405 | R²: 0.7362\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0967 | R²: 0.7469\n",
      "\n",
      "[19/127] Testing feature combination: ('PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1793 | R²: -0.0056\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1793 | R²: -0.0056\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.1567 | R²: 0.0052\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3037 | R²: 0.3716\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4141 | R²: 0.3289\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7295 | R²: 0.1992\n",
      "\n",
      "[20/127] Testing feature combination: ('PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0138 | R²: 0.0724\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0138 | R²: 0.0725\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.8322 | R²: 0.1545\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3000 | R²: 0.3730\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0682 | R²: 0.4580\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5702 | R²: 0.2662\n",
      "\n",
      "[21/127] Testing feature combination: ('PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1847 | R²: -0.0082\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1847 | R²: -0.0082\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1788 | R²: 0.4182\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.7390 | R²: 0.5681\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1775 | R²: 0.4187\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.8659 | R²: 0.1396\n",
      "\n",
      "[22/127] Testing feature combination: ('PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0282 | R²: 0.0658\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0282 | R²: 0.0658\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0118 | R²: 0.4778\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5769 | R²: 0.6177\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2522 | R²: 0.7080\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3178 | R²: 0.6907\n",
      "\n",
      "[23/127] Testing feature combination: ('PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9841 | R²: 0.0861\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9840 | R²: 0.0862\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2117 | R²: -0.0213\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.5740 | R²: 0.2646\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2133 | R²: 0.4055\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7090 | R²: 0.2080\n",
      "\n",
      "[24/127] Testing feature combination: ('PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1540 | R²: 0.0065\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1541 | R²: 0.0065\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.9040 | R²: 0.1225\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.2185 | R²: 0.4036\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.5779 | R²: 0.2630\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0908 | R²: 0.0365\n",
      "\n",
      "[25/127] Testing feature combination: ('PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0051 | R²: 0.0765\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0051 | R²: 0.0765\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5075 | R²: 0.6380\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1089 | R²: 0.7439\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8996 | R²: 0.7922\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8492 | R²: 0.5326\n",
      "\n",
      "[26/127] Testing feature combination: ('Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9847 | R²: 0.0858\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9847 | R²: 0.0859\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7263 | R²: 0.5721\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.7304 | R²: 0.5708\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0460 | R²: 0.4658\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.7888 | R²: 0.1735\n",
      "\n",
      "[27/127] Testing feature combination: ('Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8404 | R²: 0.1508\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8404 | R²: 0.1509\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3454 | R²: 0.6833\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3466 | R²: 0.6830\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3450 | R²: 0.6834\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3588 | R²: 0.6797\n",
      "\n",
      "[28/127] Testing feature combination: ('State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0120 | R²: 0.0733\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0120 | R²: 0.0733\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3087 | R²: 0.9014\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.3074 | R²: 0.9016\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7361 | R²: 0.8265\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8193 | R²: 0.5424\n",
      "\n",
      "[29/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1559 | R²: 0.0056\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1559 | R²: 0.0056\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.7974 | R²: -0.3251\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6223 | R²: 0.2446\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4327 | R²: 0.3216\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9428 | R²: 0.1050\n",
      "\n",
      "[30/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1295 | R²: 0.0182\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1295 | R²: 0.0182\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.9901 | R²: -0.4336\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.7000 | R²: 0.2118\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3191 | R²: 0.3657\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0213 | R²: 0.0690\n",
      "\n",
      "[31/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9353 | R²: 0.1084\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9353 | R²: 0.1084\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0657 | R²: 0.0483\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.1416 | R²: 0.4318\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8895 | R²: 0.5193\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7987 | R²: 0.1692\n",
      "\n",
      "[32/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1322 | R²: 0.0169\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1322 | R²: 0.0169\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2563 | R²: -0.0430\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.4140 | R²: 0.3289\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3431 | R²: 0.3565\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1474 | R²: 0.0097\n",
      "\n",
      "[33/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9850 | R²: 0.0857\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9850 | R²: 0.0857\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8183 | R²: 0.5427\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2899 | R²: 0.6981\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1189 | R²: 0.7415\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1148 | R²: 0.7425\n",
      "\n",
      "[34/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1706 | R²: -0.0014\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1706 | R²: -0.0014\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.5455 | R²: -0.1896\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.2697 | R²: 0.3845\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2396 | R²: 0.3958\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.8641 | R²: 0.1403\n",
      "\n",
      "[35/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9981 | R²: 0.0797\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9981 | R²: 0.0797\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.4913 | R²: 0.2982\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9026 | R²: 0.5149\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8240 | R²: 0.5408\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5805 | R²: 0.2619\n",
      "\n",
      "[36/127] Testing feature combination: ('Crop_Year', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1732 | R²: -0.0027\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1732 | R²: -0.0027\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1372 | R²: 0.4334\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5975 | R²: 0.6115\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0244 | R²: 0.4734\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7890 | R²: 0.1734\n",
      "\n",
      "[37/127] Testing feature combination: ('Crop_Year', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.2677 | R²: 0.3852\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.4046 | R²: 0.6671\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2929 | R²: 0.6973\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.3502 | R²: 0.6820\n",
      "\n",
      "[38/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0245 | R²: 0.0675\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9476 | R²: 0.4998\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7585 | R²: 0.5619\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6372 | R²: 0.2383\n",
      "\n",
      "[39/127] Testing feature combination: ('Crop_Year', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1432 | R²: 0.0117\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1432 | R²: 0.0117\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.7155 | R²: 0.2052\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9745 | R²: 0.4906\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1902 | R²: 0.4141\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1326 | R²: 0.0167\n",
      "\n",
      "[40/127] Testing feature combination: ('Crop_Year', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9944 | R²: 0.0814\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9944 | R²: 0.0814\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4739 | R²: 0.6476\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8891 | R²: 0.7945\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8464 | R²: 0.8037\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.3531 | R²: 0.6812\n",
      "\n",
      "[41/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9661 | R²: 0.0944\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9661 | R²: 0.0944\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.1547 | R²: 0.0062\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0263 | R²: 0.4727\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7074 | R²: 0.5780\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5203 | R²: 0.2865\n",
      "\n",
      "[42/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8225 | R²: 0.1588\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8225 | R²: 0.1588\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5747 | R²: 0.6183\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5279 | R²: 0.6321\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3638 | R²: 0.6783\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3451 | R²: 0.6834\n",
      "\n",
      "[43/127] Testing feature combination: ('Crop_Year', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9983 | R²: 0.0796\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9983 | R²: 0.0796\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4295 | R²: 0.8824\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2750 | R²: 0.9064\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7368 | R²: 0.8263\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3454 | R²: 0.6833\n",
      "\n",
      "[44/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1574 | R²: 0.0049\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1574 | R²: 0.0049\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.1492 | R²: 0.0088\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0519 | R²: 0.4638\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3449 | R²: 0.3559\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6473 | R²: 0.2341\n",
      "\n",
      "[45/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.5857 | R²: 0.2597\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6544 | R²: 0.5943\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9202 | R²: 0.5091\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4823 | R²: 0.3018\n",
      "\n",
      "[46/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1635 | R²: 0.0020\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1635 | R²: 0.0020\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.6274 | R²: 0.6026\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.4812 | R²: 0.6456\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2019 | R²: 0.4097\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.8700 | R²: 0.1377\n",
      "\n",
      "[47/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0109 | R²: 0.0738\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0109 | R²: 0.0738\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4331 | R²: 0.6592\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8840 | R²: 0.7956\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9659 | R²: 0.7775\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0006 | R²: 0.7696\n",
      "\n",
      "[48/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9462 | R²: 0.1034\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9462 | R²: 0.1034\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6231 | R²: 0.2442\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.8712 | R²: 0.5254\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9659 | R²: 0.4936\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5890 | R²: 0.2584\n",
      "\n",
      "[49/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1355 | R²: 0.0153\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1356 | R²: 0.0153\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0151 | R²: 0.0718\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0352 | R²: 0.4696\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.5122 | R²: 0.2898\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0557 | R²: 0.0530\n",
      "\n",
      "[50/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0840\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0840\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4849 | R²: 0.6445\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7591 | R²: 0.8218\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7712 | R²: 0.8194\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9720 | R²: 0.7761\n",
      "\n",
      "[51/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9492 | R²: 0.1021\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9492 | R²: 0.1021\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.4974 | R²: 0.2958\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.7601 | R²: 0.5614\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0788 | R²: 0.4543\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.6760 | R²: 0.2220\n",
      "\n",
      "[52/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8066 | R²: 0.1657\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8065 | R²: 0.1658\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0463 | R²: 0.4657\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5730 | R²: 0.6188\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1326 | R²: 0.7382\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0885 | R²: 0.7489\n",
      "\n",
      "[53/127] Testing feature combination: ('Annual_Rainfall', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9963 | R²: 0.0805\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9963 | R²: 0.0805\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1822 | R²: 0.7258\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7504 | R²: 0.8236\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8495 | R²: 0.8031\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1009 | R²: 0.7459\n",
      "\n",
      "[54/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0050 | R²: 0.0765\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0050 | R²: 0.0765\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0720 | R²: 0.4567\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3470 | R²: 0.6829\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6583 | R²: 0.5932\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4102 | R²: 0.3305\n",
      "\n",
      "[55/127] Testing feature combination: ('PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1741 | R²: -0.0031\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1741 | R²: -0.0031\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4217 | R²: 0.6623\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0378 | R²: 0.7609\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8738 | R²: 0.5245\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.6805 | R²: 0.2201\n",
      "\n",
      "[56/127] Testing feature combination: ('PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0183 | R²: 0.0704\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0183 | R²: 0.0704\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4272 | R²: 0.8827\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1121 | R²: 0.9288\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6072 | R²: 0.8513\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1668 | R²: 0.7297\n",
      "\n",
      "[57/127] Testing feature combination: ('PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0060 | R²: 0.0760\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0060 | R²: 0.0760\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8662 | R²: 0.7995\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5863 | R²: 0.8551\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5967 | R²: 0.6118\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.1137 | R²: 0.4418\n",
      "\n",
      "[58/127] Testing feature combination: ('PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8568 | R²: 0.1436\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8567 | R²: 0.1436\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4890 | R²: 0.6433\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1897 | R²: 0.7239\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1924 | R²: 0.7233\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3001 | R²: 0.6954\n",
      "\n",
      "[59/127] Testing feature combination: ('PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0259 | R²: 0.0669\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0259 | R²: 0.0669\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1845 | R²: 0.9192\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0711 | R²: 0.9339\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7099 | R²: 0.8317\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.4451 | R²: 0.6558\n",
      "\n",
      "[60/127] Testing feature combination: ('PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9752 | R²: 0.0902\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9752 | R²: 0.0902\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8642 | R²: 0.5277\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2322 | R²: 0.7131\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9630 | R²: 0.4945\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4281 | R²: 0.3234\n",
      "\n",
      "[61/127] Testing feature combination: ('PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8315 | R²: 0.1548\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8314 | R²: 0.1548\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0995 | R²: 0.7462\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8899 | R²: 0.7944\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9476 | R²: 0.7816\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1449 | R²: 0.7351\n",
      "\n",
      "[62/127] Testing feature combination: ('PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0011 | R²: 0.0783\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0011 | R²: 0.0783\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3315 | R²: 0.8979\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1684 | R²: 0.9214\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6453 | R²: 0.8441\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.2678 | R²: 0.7039\n",
      "\n",
      "[63/127] Testing feature combination: ('Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8347 | R²: 0.1534\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8346 | R²: 0.1534\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1351 | R²: 0.9258\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1310 | R²: 0.9264\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5630 | R²: 0.8593\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1432 | R²: 0.7356\n",
      "\n",
      "[64/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1478 | R²: 0.0095\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1478 | R²: 0.0095\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6468 | R²: 0.2343\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0007 | R²: 0.4816\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2455 | R²: 0.3936\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7508 | R²: 0.1900\n",
      "\n",
      "[65/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9515 | R²: 0.1010\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9515 | R²: 0.1010\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0959 | R²: 0.4482\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5265 | R²: 0.6325\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6993 | R²: 0.5805\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.3689 | R²: 0.3466\n",
      "\n",
      "[66/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1512 | R²: 0.0079\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1512 | R²: 0.0079\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0715 | R²: 0.4568\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5986 | R²: 0.6112\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1630 | R²: 0.4240\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.8543 | R²: 0.1447\n",
      "\n",
      "[67/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9979 | R²: 0.0798\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9978 | R²: 0.0798\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1313 | R²: 0.7385\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7087 | R²: 0.8319\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9564 | R²: 0.7796\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9620 | R²: 0.7784\n",
      "\n",
      "[68/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9290 | R²: 0.1113\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9289 | R²: 0.1113\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.7676 | R²: 0.1827\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.7050 | R²: 0.5787\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7076 | R²: 0.5779\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6587 | R²: 0.2293\n",
      "\n",
      "[69/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1237 | R²: 0.0210\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1237 | R²: 0.0209\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2053 | R²: -0.0182\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.1123 | R²: 0.4423\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2737 | R²: 0.3830\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0607 | R²: 0.0506\n",
      "\n",
      "[70/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9766 | R²: 0.0895\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9766 | R²: 0.0895\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0153 | R²: 0.7662\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5627 | R²: 0.8594\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7138 | R²: 0.8309\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9666 | R²: 0.7773\n",
      "\n",
      "[71/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9288 | R²: 0.1113\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9288 | R²: 0.1113\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.5636 | R²: 0.2688\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6160 | R²: 0.6060\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7472 | R²: 0.5655\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.6584 | R²: 0.2294\n",
      "\n",
      "[72/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7861 | R²: 0.1747\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7860 | R²: 0.1747\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7859 | R²: 0.5531\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2001 | R²: 0.7213\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.0693 | R²: 0.7535\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0214 | R²: 0.7647\n",
      "\n",
      "[73/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9815 | R²: 0.0873\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9815 | R²: 0.0873\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8795 | R²: 0.7966\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5977 | R²: 0.8530\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8427 | R²: 0.8045\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9982 | R²: 0.7701\n",
      "\n",
      "[74/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9907 | R²: 0.0831\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9907 | R²: 0.0831\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8984 | R²: 0.5163\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0544 | R²: 0.7570\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5382 | R²: 0.6291\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.2823 | R²: 0.3797\n",
      "\n",
      "[75/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1640 | R²: 0.0017\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1640 | R²: 0.0017\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7876 | R²: 0.5526\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0443 | R²: 0.7594\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8141 | R²: 0.5441\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.6480 | R²: 0.2338\n",
      "\n",
      "[76/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0077 | R²: 0.0753\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0077 | R²: 0.0753\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2137 | R²: 0.9152\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9786 | R²: 0.9449\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6034 | R²: 0.8520\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1504 | R²: 0.7338\n",
      "\n",
      "[77/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9884 | R²: 0.0842\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9884 | R²: 0.0842\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0008 | R²: 0.7695\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5840 | R²: 0.8555\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4091 | R²: 0.6658\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.1276 | R²: 0.4368\n",
      "\n",
      "[78/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8391 | R²: 0.1514\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8391 | R²: 0.1515\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5986 | R²: 0.6112\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1059 | R²: 0.7447\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2153 | R²: 0.7175\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.2588 | R²: 0.7063\n",
      "\n",
      "[79/127] Testing feature combination: ('Crop_Year', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0125 | R²: 0.0730\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0125 | R²: 0.0731\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1120 | R²: 0.9288\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9561 | R²: 0.9474\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7030 | R²: 0.8330\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.4620 | R²: 0.6510\n",
      "\n",
      "[80/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9581 | R²: 0.0980\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9581 | R²: 0.0980\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1227 | R²: 0.4386\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0785 | R²: 0.7513\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6098 | R²: 0.6079\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5614 | R²: 0.2698\n",
      "\n",
      "[81/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8150 | R²: 0.1621\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8149 | R²: 0.1621\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2931 | R²: 0.6973\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5615 | R²: 0.8596\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8063 | R²: 0.8122\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1291 | R²: 0.7390\n",
      "\n",
      "[82/127] Testing feature combination: ('Crop_Year', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0839\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9889 | R²: 0.0839\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9856 | R²: 0.9441\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8838 | R²: 0.9550\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5161 | R²: 0.8677\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.2100 | R²: 0.7188\n",
      "\n",
      "[83/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8146 | R²: 0.1622\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8146 | R²: 0.1622\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.8828 | R²: 0.9551\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8395 | R²: 0.9594\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6051 | R²: 0.8517\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9957 | R²: 0.7707\n",
      "\n",
      "[84/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9616 | R²: 0.0964\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9616 | R²: 0.0964\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.9195 | R²: 0.5093\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2451 | R²: 0.7098\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6033 | R²: 0.6098\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.3057 | R²: 0.3709\n",
      "\n",
      "[85/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1539 | R²: 0.0066\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1539 | R²: 0.0066\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.6292 | R²: 0.6020\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0715 | R²: 0.7529\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0712 | R²: 0.4570\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5907 | R²: 0.2577\n",
      "\n",
      "[86/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0017 | R²: 0.0780\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0017 | R²: 0.0780\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3427 | R²: 0.8962\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0849 | R²: 0.9322\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5918 | R²: 0.8541\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8550 | R²: 0.8019\n",
      "\n",
      "[87/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9645 | R²: 0.0951\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9644 | R²: 0.0951\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2590 | R²: 0.7062\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8767 | R²: 0.7972\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6217 | R²: 0.6043\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.1454 | R²: 0.4304\n",
      "\n",
      "[88/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8187 | R²: 0.1604\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8187 | R²: 0.1604\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3278 | R²: 0.6880\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7264 | R²: 0.8284\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9501 | R²: 0.7810\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0032 | R²: 0.7690\n",
      "\n",
      "[89/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0095 | R²: 0.0745\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0094 | R²: 0.0745\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.6717 | R²: 0.8391\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.3435 | R²: 0.8961\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7177 | R²: 0.8301\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.8476 | R²: 0.8035\n",
      "\n",
      "[90/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9413 | R²: 0.1057\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9413 | R²: 0.1057\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.6410 | R²: 0.5984\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3237 | R²: 0.6891\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7997 | R²: 0.5487\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4643 | R²: 0.3090\n",
      "\n",
      "[91/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7989 | R²: 0.1691\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7989 | R²: 0.1691\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3382 | R²: 0.6852\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.6652 | R²: 0.8403\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7688 | R²: 0.8199\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9227 | R²: 0.7872\n",
      "\n",
      "[92/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9866 | R²: 0.0850\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9866 | R²: 0.0850\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9225 | R²: 0.7872\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2163 | R²: 0.9148\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6116 | R²: 0.8505\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9152 | R²: 0.7888\n",
      "\n",
      "[93/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8038 | R²: 0.1670\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8037 | R²: 0.1670\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9826 | R²: 0.7737\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5476 | R²: 0.8621\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8037 | R²: 0.8127\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9144 | R²: 0.7890\n",
      "\n",
      "[94/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9973 | R²: 0.0801\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9973 | R²: 0.0801\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0652 | R²: 0.7544\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5160 | R²: 0.8677\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3944 | R²: 0.6699\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.9203 | R²: 0.5090\n",
      "\n",
      "[95/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8488 | R²: 0.1471\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8488 | R²: 0.1471\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3233 | R²: 0.8992\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0129 | R²: 0.9409\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6142 | R²: 0.8500\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.0155 | R²: 0.7661\n",
      "\n",
      "[96/127] Testing feature combination: ('PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0714\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9562 | R²: 0.9474\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9099 | R²: 0.9523\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4965 | R²: 0.8711\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.6560 | R²: 0.5939\n",
      "\n",
      "[97/127] Testing feature combination: ('PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8521 | R²: 0.1457\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8520 | R²: 0.1457\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1645 | R²: 0.9219\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9690 | R²: 0.9459\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5059 | R²: 0.8694\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9976 | R²: 0.7703\n",
      "\n",
      "[98/127] Testing feature combination: ('PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8258 | R²: 0.1573\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8258 | R²: 0.1573\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2897 | R²: 0.9042\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1138 | R²: 0.9286\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5883 | R²: 0.8548\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9871 | R²: 0.7727\n",
      "\n",
      "[99/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9455 | R²: 0.1038\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9455 | R²: 0.1038\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.9447 | R²: 0.5007\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1053 | R²: 0.7448\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4976 | R²: 0.6409\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.2833 | R²: 0.3793\n",
      "\n",
      "[100/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1430 | R²: 0.0118\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1431 | R²: 0.0117\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5476 | R²: 0.6263\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1791 | R²: 0.7266\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0484 | R²: 0.4650\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5684 | R²: 0.2669\n",
      "\n",
      "[101/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9900 | R²: 0.0834\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9900 | R²: 0.0834\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2202 | R²: 0.9143\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9768 | R²: 0.9451\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5639 | R²: 0.8592\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8622 | R²: 0.8003\n",
      "\n",
      "[102/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9454 | R²: 0.1038\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9453 | R²: 0.1038\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5492 | R²: 0.6259\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8606 | R²: 0.8007\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5929 | R²: 0.6129\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.0384 | R²: 0.4685\n",
      "\n",
      "[103/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7991 | R²: 0.1690\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7990 | R²: 0.1691\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2374 | R²: 0.7118\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5717 | R²: 0.8578\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9137 | R²: 0.7892\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9507 | R²: 0.7809\n",
      "\n",
      "[104/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9953 | R²: 0.0810\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9953 | R²: 0.0810\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5658 | R²: 0.8588\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2279 | R²: 0.9132\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7047 | R²: 0.8327\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.7862 | R²: 0.8163\n",
      "\n",
      "[105/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9224 | R²: 0.1142\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9224 | R²: 0.1142\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8273 | R²: 0.5398\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1273 | R²: 0.7395\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5721 | R²: 0.6191\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5179 | R²: 0.2875\n",
      "\n",
      "[106/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7798 | R²: 0.1774\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7798 | R²: 0.1774\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9462 | R²: 0.7819\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.4437 | R²: 0.8800\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6802 | R²: 0.8375\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.8347 | R²: 0.8062\n",
      "\n",
      "[107/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9732 | R²: 0.0911\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9732 | R²: 0.0911\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8936 | R²: 0.7935\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0471 | R²: 0.9369\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5785 | R²: 0.8565\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9244 | R²: 0.7868\n",
      "\n",
      "[108/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7818 | R²: 0.1766\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7817 | R²: 0.1766\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.6220 | R²: 0.8485\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.3106 | R²: 0.9011\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7489 | R²: 0.8239\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.7777 | R²: 0.8181\n",
      "\n",
      "[109/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9812 | R²: 0.0875\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9812 | R²: 0.0875\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1317 | R²: 0.7384\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.4707 | R²: 0.8755\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3206 | R²: 0.6899\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.8936 | R²: 0.5179\n",
      "\n",
      "[110/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2079 | R²: 0.9160\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9027 | R²: 0.9531\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5640 | R²: 0.8592\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9000 | R²: 0.7921\n",
      "\n",
      "[111/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0042 | R²: 0.0769\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0043 | R²: 0.0769\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9428 | R²: 0.9488\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8091 | R²: 0.9623\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4264 | R²: 0.8829\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0908 | R²: 0.7483\n",
      "\n",
      "[112/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9463 | R²: 0.9484\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8151 | R²: 0.9617\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4967 | R²: 0.8710\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9008 | R²: 0.7920\n",
      "\n",
      "[113/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8073 | R²: 0.1654\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8073 | R²: 0.1654\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1634 | R²: 0.9221\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8267 | R²: 0.9607\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5375 | R²: 0.8639\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9728 | R²: 0.7759\n",
      "\n",
      "[114/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9569 | R²: 0.0986\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9569 | R²: 0.0986\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1210 | R²: 0.7410\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7830 | R²: 0.8170\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4664 | R²: 0.6498\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.9211 | R²: 0.5087\n",
      "\n",
      "[115/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8115 | R²: 0.1636\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8115 | R²: 0.1636\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2848 | R²: 0.9050\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0413 | R²: 0.9376\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5487 | R²: 0.8619\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8089 | R²: 0.8116\n",
      "\n",
      "[116/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0003 | R²: 0.0787\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0003 | R²: 0.0787\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2717 | R²: 0.9069\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0160 | R²: 0.9406\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4691 | R²: 0.8757\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7601 | R²: 0.8216\n",
      "\n",
      "[117/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8161 | R²: 0.1616\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8160 | R²: 0.1616\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4616 | R²: 0.8770\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2166 | R²: 0.9148\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6343 | R²: 0.8462\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.6824 | R²: 0.8370\n",
      "\n",
      "[118/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7961 | R²: 0.1703\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7961 | R²: 0.1704\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5623 | R²: 0.8595\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2086 | R²: 0.9159\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6116 | R²: 0.8505\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7598 | R²: 0.8217\n",
      "\n",
      "[119/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8443 | R²: 0.1491\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8443 | R²: 0.1491\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.0587 | R²: 0.9355\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8598 | R²: 0.9574\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4186 | R²: 0.8841\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8950 | R²: 0.7932\n",
      "\n",
      "[120/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9393 | R²: 0.1066\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9393 | R²: 0.1066\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2536 | R²: 0.7076\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7191 | R²: 0.8298\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3141 | R²: 0.6917\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.8059 | R²: 0.5467\n",
      "\n",
      "[121/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7933 | R²: 0.1716\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7933 | R²: 0.1716\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1360 | R²: 0.9257\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9463 | R²: 0.9484\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4772 | R²: 0.8744\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8210 | R²: 0.8091\n",
      "\n",
      "[122/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9876 | R²: 0.0845\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9876 | R²: 0.0845\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2461 | R²: 0.9106\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9515 | R²: 0.9479\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4833 | R²: 0.8733\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7275 | R²: 0.8282\n",
      "\n",
      "[123/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7951 | R²: 0.1708\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7950 | R²: 0.1708\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4581 | R²: 0.8776\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1263 | R²: 0.9270\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6180 | R²: 0.8493\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.6942 | R²: 0.8347\n",
      "\n",
      "[124/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7756 | R²: 0.1793\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7756 | R²: 0.1793\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5193 | R²: 0.8671\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0295 | R²: 0.9390\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5688 | R²: 0.8583\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7123 | R²: 0.8312\n",
      "\n",
      "[125/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8264 | R²: 0.1571\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8263 | R²: 0.1571\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.8527 | R²: 0.9581\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.7787 | R²: 0.9651\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.3887 | R²: 0.8890\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8691 | R²: 0.7989\n",
      "\n",
      "[126/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8089 | R²: 0.1647\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8089 | R²: 0.1647\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1834 | R²: 0.9194\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0009 | R²: 0.9423\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4536 | R²: 0.8783\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.6946 | R²: 0.8347\n",
      "\n",
      "[127/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7894 | R²: 0.1733\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7894 | R²: 0.1733\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1539 | R²: 0.9233\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9207 | R²: 0.9512\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4061 | R²: 0.8862\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.6291 | R²: 0.8472\n"
     ]
    }
   ],
   "source": [
    "for r in range(1, len(features) + 1):\n",
    "    for combo in combinations(features, r):\n",
    "        print(f\"\\n[{combo_index}/{total_combinations}] Testing feature combination: {combo}\")\n",
    "        combo_index += 1\n",
    "\n",
    "        X_subset = combined_dataset[list(combo)]\n",
    "        y = combined_dataset[target]\n",
    "\n",
    "        # Split\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X_subset, y, test_size=0.2, random_state=42)\n",
    "\n",
    "        for name, model in models.items():\n",
    "            print(f\"  → Training model: {name}\")\n",
    "            try:\n",
    "                model.fit(X_train, y_train)\n",
    "                y_pred = model.predict(X_test)\n",
    "\n",
    "                rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "                r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "                print(f\"    ✔ Done | RMSE: {rmse:.4f} | R²: {r2:.4f}\")\n",
    "\n",
    "                results.append({\n",
    "                    \"Model\": name,\n",
    "                    \"Features\": combo,\n",
    "                    \"RMSE\": rmse,\n",
    "                    \"R2\": r2\n",
    "                })\n",
    "            except Exception as e:\n",
    "                print(f\"    ✘ Failed: {e}\")\n",
    "                results.append({\n",
    "                    \"Model\": name,\n",
    "                    \"Features\": combo,\n",
    "                    \"Error\": str(e)\n",
    "                })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3af03939",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.271062Z",
     "iopub.status.busy": "2025-06-29T09:11:18.270238Z",
     "iopub.status.idle": "2025-06-29T09:11:18.277311Z",
     "shell.execute_reply": "2025-06-29T09:11:18.276566Z"
    },
    "papermill": {
     "duration": 0.034287,
     "end_time": "2025-06-29T09:11:18.278695",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.244408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results_df = pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "559be988",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.331175Z",
     "iopub.status.busy": "2025-06-29T09:11:18.330248Z",
     "iopub.status.idle": "2025-06-29T09:11:18.385900Z",
     "shell.execute_reply": "2025-06-29T09:11:18.385051Z"
    },
    "papermill": {
     "duration": 0.083111,
     "end_time": "2025-06-29T09:11:18.387717",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.304606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "grouped_results = defaultdict(pd.DataFrame)\n",
    "\n",
    "valid_results = results_df[~results_df[\"R2\"].isnull()]\n",
    "\n",
    "valid_results[\"Feature_Count\"] = valid_results[\"Features\"].apply(len)\n",
    "\n",
    "valid_results[\"R2_RMSE\"] = valid_results.apply(\n",
    "    lambda row: f\"{row['R2']:.3f} | {row['RMSE']:.3f}\", axis=1\n",
    ")\n",
    "\n",
    "valid_results[\"Feature_Set\"] = valid_results[\"Features\"].apply(lambda x: \", \".join(x))\n",
    "\n",
    "for feature_count in sorted(valid_results[\"Feature_Count\"].unique()):\n",
    "    subset = valid_results[valid_results[\"Feature_Count\"] == feature_count]\n",
    "\n",
    "    pivot_df = subset.pivot(index=\"Feature_Set\", columns=\"Model\", values=\"R2_RMSE\")\n",
    "\n",
    "    grouped_results[feature_count] = pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "40b332ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.452049Z",
     "iopub.status.busy": "2025-06-29T09:11:18.451266Z",
     "iopub.status.idle": "2025-06-29T09:11:18.544906Z",
     "shell.execute_reply": "2025-06-29T09:11:18.544018Z"
    },
    "papermill": {
     "duration": 0.130055,
     "end_time": "2025-06-29T09:11:18.546410",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.416355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 1 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall</th>\n",
       "      <td>-0.300 | 4.751</td>\n",
       "      <td>0.005 | 4.158</td>\n",
       "      <td>0.009 | 4.150</td>\n",
       "      <td>0.010 | 4.146</td>\n",
       "      <td>-0.062 | 4.295</td>\n",
       "      <td>0.009 | 4.150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Encoded</th>\n",
       "      <td>0.669 | 2.397</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.528 | 2.863</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year</th>\n",
       "      <td>0.617 | 2.581</td>\n",
       "      <td>0.465 | 3.050</td>\n",
       "      <td>0.003 | 4.162</td>\n",
       "      <td>0.000 | 4.168</td>\n",
       "      <td>0.615 | 2.585</td>\n",
       "      <td>0.003 | 4.162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1</th>\n",
       "      <td>-0.571 | 5.224</td>\n",
       "      <td>0.144 | 3.856</td>\n",
       "      <td>-0.011 | 4.190</td>\n",
       "      <td>0.098 | 3.958</td>\n",
       "      <td>-0.172 | 4.512</td>\n",
       "      <td>-0.011 | 4.190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2</th>\n",
       "      <td>-0.964 | 5.841</td>\n",
       "      <td>0.116 | 3.918</td>\n",
       "      <td>0.003 | 4.161</td>\n",
       "      <td>0.044 | 4.075</td>\n",
       "      <td>-0.363 | 4.866</td>\n",
       "      <td>0.003 | 4.161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded</th>\n",
       "      <td>0.238 | 3.639</td>\n",
       "      <td>0.238 | 3.639</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "      <td>0.179 | 3.777</td>\n",
       "      <td>0.238 | 3.639</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State_Encoded</th>\n",
       "      <td>0.058 | 4.044</td>\n",
       "      <td>0.061 | 4.039</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "      <td>0.060 | 4.040</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model              DecisionTree GradientBoosting LinearRegression  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall  -0.300 | 4.751    0.005 | 4.158    0.009 | 4.150   \n",
       "Crop_Encoded      0.669 | 2.397    0.669 | 2.397    0.071 | 4.016   \n",
       "Crop_Year         0.617 | 2.581    0.465 | 3.050    0.003 | 4.162   \n",
       "PC1              -0.571 | 5.224    0.144 | 3.856   -0.011 | 4.190   \n",
       "PC2              -0.964 | 5.841    0.116 | 3.918    0.003 | 4.161   \n",
       "Season_Encoded    0.238 | 3.639    0.238 | 3.639    0.082 | 3.994   \n",
       "State_Encoded     0.058 | 4.044    0.061 | 4.039    0.001 | 4.166   \n",
       "\n",
       "Model             MLPRegressor    RandomForest           Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall  0.010 | 4.146  -0.062 | 4.295   0.009 | 4.150  \n",
       "Crop_Encoded     0.528 | 2.863   0.669 | 2.397   0.071 | 4.016  \n",
       "Crop_Year        0.000 | 4.168   0.615 | 2.585   0.003 | 4.162  \n",
       "PC1              0.098 | 3.958  -0.172 | 4.512  -0.011 | 4.190  \n",
       "PC2              0.044 | 4.075  -0.363 | 4.866   0.003 | 4.161  \n",
       "Season_Encoded   0.179 | 3.777   0.238 | 3.639   0.082 | 3.994  \n",
       "State_Encoded    0.001 | 4.166   0.060 | 4.040   0.001 | 4.166  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 2 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Crop_Encoded</th>\n",
       "      <td>0.453 | 3.083</td>\n",
       "      <td>0.736 | 2.140</td>\n",
       "      <td>0.079 | 3.999</td>\n",
       "      <td>0.747 | 2.097</td>\n",
       "      <td>0.603 | 2.625</td>\n",
       "      <td>0.079 | 3.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1</th>\n",
       "      <td>-0.400 | 4.931</td>\n",
       "      <td>0.183 | 3.768</td>\n",
       "      <td>0.000 | 4.167</td>\n",
       "      <td>0.108 | 3.936</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "      <td>0.000 | 4.167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2</th>\n",
       "      <td>-0.237 | 4.635</td>\n",
       "      <td>0.196 | 3.738</td>\n",
       "      <td>0.013 | 4.140</td>\n",
       "      <td>0.089 | 3.977</td>\n",
       "      <td>0.143 | 3.859</td>\n",
       "      <td>0.013 | 4.140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded</th>\n",
       "      <td>-0.248 | 4.656</td>\n",
       "      <td>0.352 | 3.355</td>\n",
       "      <td>0.100 | 3.954</td>\n",
       "      <td>0.223 | 3.673</td>\n",
       "      <td>0.112 | 3.927</td>\n",
       "      <td>0.100 | 3.954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, State_Encoded</th>\n",
       "      <td>0.056 | 4.050</td>\n",
       "      <td>0.098 | 3.959</td>\n",
       "      <td>0.011 | 4.145</td>\n",
       "      <td>0.014 | 4.139</td>\n",
       "      <td>0.251 | 3.606</td>\n",
       "      <td>0.011 | 4.145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall</th>\n",
       "      <td>-0.067 | 4.306</td>\n",
       "      <td>0.354 | 3.349</td>\n",
       "      <td>0.014 | 4.138</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "      <td>0.488 | 2.984</td>\n",
       "      <td>0.014 | 4.138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Crop_Encoded</th>\n",
       "      <td>0.617 | 2.581</td>\n",
       "      <td>0.632 | 2.528</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "      <td>0.650 | 2.466</td>\n",
       "      <td>0.616 | 2.582</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1</th>\n",
       "      <td>-0.250 | 4.660</td>\n",
       "      <td>0.349 | 3.362</td>\n",
       "      <td>-0.006 | 4.180</td>\n",
       "      <td>0.079 | 4.000</td>\n",
       "      <td>0.219 | 3.684</td>\n",
       "      <td>-0.006 | 4.180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2</th>\n",
       "      <td>-0.491 | 5.089</td>\n",
       "      <td>0.334 | 3.402</td>\n",
       "      <td>0.007 | 4.152</td>\n",
       "      <td>0.027 | 4.111</td>\n",
       "      <td>0.089 | 3.979</td>\n",
       "      <td>0.007 | 4.152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded</th>\n",
       "      <td>0.462 | 3.057</td>\n",
       "      <td>0.461 | 3.058</td>\n",
       "      <td>0.089 | 3.977</td>\n",
       "      <td>0.110 | 3.932</td>\n",
       "      <td>0.475 | 3.019</td>\n",
       "      <td>0.089 | 3.977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, State_Encoded</th>\n",
       "      <td>0.311 | 3.459</td>\n",
       "      <td>0.430 | 3.146</td>\n",
       "      <td>0.007 | 4.153</td>\n",
       "      <td>0.009 | 4.148</td>\n",
       "      <td>0.498 | 2.954</td>\n",
       "      <td>0.007 | 4.153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Crop_Encoded</th>\n",
       "      <td>0.478 | 3.012</td>\n",
       "      <td>0.708 | 2.252</td>\n",
       "      <td>0.066 | 4.028</td>\n",
       "      <td>0.691 | 2.318</td>\n",
       "      <td>0.618 | 2.577</td>\n",
       "      <td>0.066 | 4.028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2</th>\n",
       "      <td>0.005 | 4.157</td>\n",
       "      <td>0.329 | 3.414</td>\n",
       "      <td>-0.006 | 4.179</td>\n",
       "      <td>0.199 | 3.729</td>\n",
       "      <td>0.372 | 3.304</td>\n",
       "      <td>-0.006 | 4.179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded</th>\n",
       "      <td>0.154 | 3.832</td>\n",
       "      <td>0.458 | 3.068</td>\n",
       "      <td>0.072 | 4.014</td>\n",
       "      <td>0.266 | 3.570</td>\n",
       "      <td>0.373 | 3.300</td>\n",
       "      <td>0.072 | 4.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, State_Encoded</th>\n",
       "      <td>0.418 | 3.179</td>\n",
       "      <td>0.419 | 3.177</td>\n",
       "      <td>-0.008 | 4.185</td>\n",
       "      <td>0.140 | 3.866</td>\n",
       "      <td>0.568 | 2.739</td>\n",
       "      <td>-0.008 | 4.185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Crop_Encoded</th>\n",
       "      <td>0.638 | 2.507</td>\n",
       "      <td>0.792 | 1.900</td>\n",
       "      <td>0.076 | 4.005</td>\n",
       "      <td>0.533 | 2.849</td>\n",
       "      <td>0.744 | 2.109</td>\n",
       "      <td>0.076 | 4.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded</th>\n",
       "      <td>-0.021 | 4.212</td>\n",
       "      <td>0.406 | 3.213</td>\n",
       "      <td>0.086 | 3.984</td>\n",
       "      <td>0.208 | 3.709</td>\n",
       "      <td>0.265 | 3.574</td>\n",
       "      <td>0.086 | 3.984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, State_Encoded</th>\n",
       "      <td>0.122 | 3.904</td>\n",
       "      <td>0.263 | 3.578</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "      <td>0.037 | 4.091</td>\n",
       "      <td>0.404 | 3.219</td>\n",
       "      <td>0.006 | 4.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "      <td>0.680 | 2.359</td>\n",
       "      <td>0.683 | 2.347</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, State_Encoded</th>\n",
       "      <td>0.572 | 2.726</td>\n",
       "      <td>0.466 | 3.046</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "      <td>0.174 | 3.789</td>\n",
       "      <td>0.571 | 2.730</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.901 | 1.309</td>\n",
       "      <td>0.826 | 1.736</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "      <td>0.542 | 2.819</td>\n",
       "      <td>0.902 | 1.307</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                              DecisionTree GradientBoosting  \\\n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, Crop_Encoded     0.453 | 3.083    0.736 | 2.140   \n",
       "Annual_Rainfall, PC1             -0.400 | 4.931    0.183 | 3.768   \n",
       "Annual_Rainfall, PC2             -0.237 | 4.635    0.196 | 3.738   \n",
       "Annual_Rainfall, Season_Encoded  -0.248 | 4.656    0.352 | 3.355   \n",
       "Annual_Rainfall, State_Encoded    0.056 | 4.050    0.098 | 3.959   \n",
       "Crop_Year, Annual_Rainfall       -0.067 | 4.306    0.354 | 3.349   \n",
       "Crop_Year, Crop_Encoded           0.617 | 2.581    0.632 | 2.528   \n",
       "Crop_Year, PC1                   -0.250 | 4.660    0.349 | 3.362   \n",
       "Crop_Year, PC2                   -0.491 | 5.089    0.334 | 3.402   \n",
       "Crop_Year, Season_Encoded         0.462 | 3.057    0.461 | 3.058   \n",
       "Crop_Year, State_Encoded          0.311 | 3.459    0.430 | 3.146   \n",
       "PC1, Crop_Encoded                 0.478 | 3.012    0.708 | 2.252   \n",
       "PC1, PC2                          0.005 | 4.157    0.329 | 3.414   \n",
       "PC1, Season_Encoded               0.154 | 3.832    0.458 | 3.068   \n",
       "PC1, State_Encoded                0.418 | 3.179    0.419 | 3.177   \n",
       "PC2, Crop_Encoded                 0.638 | 2.507    0.792 | 1.900   \n",
       "PC2, Season_Encoded              -0.021 | 4.212    0.406 | 3.213   \n",
       "PC2, State_Encoded                0.122 | 3.904    0.263 | 3.578   \n",
       "Season_Encoded, Crop_Encoded      0.683 | 2.345    0.683 | 2.345   \n",
       "Season_Encoded, State_Encoded     0.572 | 2.726    0.466 | 3.046   \n",
       "State_Encoded, Crop_Encoded       0.901 | 1.309    0.826 | 1.736   \n",
       "\n",
       "Model                           LinearRegression   MLPRegressor  \\\n",
       "Feature_Set                                                       \n",
       "Annual_Rainfall, Crop_Encoded      0.079 | 3.999  0.747 | 2.097   \n",
       "Annual_Rainfall, PC1               0.000 | 4.167  0.108 | 3.936   \n",
       "Annual_Rainfall, PC2               0.013 | 4.140  0.089 | 3.977   \n",
       "Annual_Rainfall, Season_Encoded    0.100 | 3.954  0.223 | 3.673   \n",
       "Annual_Rainfall, State_Encoded     0.011 | 4.145  0.014 | 4.139   \n",
       "Crop_Year, Annual_Rainfall         0.014 | 4.138  0.012 | 4.143   \n",
       "Crop_Year, Crop_Encoded            0.077 | 4.004  0.650 | 2.466   \n",
       "Crop_Year, PC1                    -0.006 | 4.180  0.079 | 4.000   \n",
       "Crop_Year, PC2                     0.007 | 4.152  0.027 | 4.111   \n",
       "Crop_Year, Season_Encoded          0.089 | 3.977  0.110 | 3.932   \n",
       "Crop_Year, State_Encoded           0.007 | 4.153  0.009 | 4.148   \n",
       "PC1, Crop_Encoded                  0.066 | 4.028  0.691 | 2.318   \n",
       "PC1, PC2                          -0.006 | 4.179  0.199 | 3.729   \n",
       "PC1, Season_Encoded                0.072 | 4.014  0.266 | 3.570   \n",
       "PC1, State_Encoded                -0.008 | 4.185  0.140 | 3.866   \n",
       "PC2, Crop_Encoded                  0.076 | 4.005  0.533 | 2.849   \n",
       "PC2, Season_Encoded                0.086 | 3.984  0.208 | 3.709   \n",
       "PC2, State_Encoded                 0.007 | 4.154  0.037 | 4.091   \n",
       "Season_Encoded, Crop_Encoded       0.151 | 3.840  0.680 | 2.359   \n",
       "Season_Encoded, State_Encoded      0.086 | 3.985  0.174 | 3.789   \n",
       "State_Encoded, Crop_Encoded        0.073 | 4.012  0.542 | 2.819   \n",
       "\n",
       "Model                             RandomForest           Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall, Crop_Encoded    0.603 | 2.625   0.079 | 3.999  \n",
       "Annual_Rainfall, PC1             0.093 | 3.969   0.000 | 4.167  \n",
       "Annual_Rainfall, PC2             0.143 | 3.859   0.013 | 4.140  \n",
       "Annual_Rainfall, Season_Encoded  0.112 | 3.927   0.100 | 3.954  \n",
       "Annual_Rainfall, State_Encoded   0.251 | 3.606   0.011 | 4.145  \n",
       "Crop_Year, Annual_Rainfall       0.488 | 2.984   0.014 | 4.138  \n",
       "Crop_Year, Crop_Encoded          0.616 | 2.582   0.077 | 4.004  \n",
       "Crop_Year, PC1                   0.219 | 3.684  -0.006 | 4.180  \n",
       "Crop_Year, PC2                   0.089 | 3.979   0.007 | 4.152  \n",
       "Crop_Year, Season_Encoded        0.475 | 3.019   0.089 | 3.977  \n",
       "Crop_Year, State_Encoded         0.498 | 2.954   0.007 | 4.153  \n",
       "PC1, Crop_Encoded                0.618 | 2.577   0.066 | 4.028  \n",
       "PC1, PC2                         0.372 | 3.304  -0.006 | 4.179  \n",
       "PC1, Season_Encoded              0.373 | 3.300   0.072 | 4.014  \n",
       "PC1, State_Encoded               0.568 | 2.739  -0.008 | 4.185  \n",
       "PC2, Crop_Encoded                0.744 | 2.109   0.076 | 4.005  \n",
       "PC2, Season_Encoded              0.265 | 3.574   0.086 | 3.984  \n",
       "PC2, State_Encoded               0.404 | 3.219   0.006 | 4.154  \n",
       "Season_Encoded, Crop_Encoded     0.683 | 2.347   0.151 | 3.840  \n",
       "Season_Encoded, State_Encoded    0.571 | 2.730   0.086 | 3.985  \n",
       "State_Encoded, Crop_Encoded      0.902 | 1.307   0.073 | 4.012  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 3 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Crop_Encoded</th>\n",
       "      <td>0.659 | 2.433</td>\n",
       "      <td>0.777 | 1.966</td>\n",
       "      <td>0.074 | 4.011</td>\n",
       "      <td>0.770 | 2.001</td>\n",
       "      <td>0.796 | 1.884</td>\n",
       "      <td>0.074 | 4.011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2</th>\n",
       "      <td>0.009 | 4.149</td>\n",
       "      <td>0.356 | 3.345</td>\n",
       "      <td>0.005 | 4.157</td>\n",
       "      <td>0.234 | 3.647</td>\n",
       "      <td>0.464 | 3.052</td>\n",
       "      <td>0.005 | 4.157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded</th>\n",
       "      <td>0.260 | 3.586</td>\n",
       "      <td>0.509 | 2.920</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "      <td>0.302 | 3.482</td>\n",
       "      <td>0.594 | 2.654</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, State_Encoded</th>\n",
       "      <td>0.603 | 2.627</td>\n",
       "      <td>0.410 | 3.202</td>\n",
       "      <td>0.002 | 4.163</td>\n",
       "      <td>0.138 | 3.870</td>\n",
       "      <td>0.646 | 2.481</td>\n",
       "      <td>0.002 | 4.163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Crop_Encoded</th>\n",
       "      <td>0.644 | 2.485</td>\n",
       "      <td>0.819 | 1.771</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "      <td>0.776 | 1.972</td>\n",
       "      <td>0.822 | 1.759</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded</th>\n",
       "      <td>0.244 | 3.623</td>\n",
       "      <td>0.494 | 2.966</td>\n",
       "      <td>0.103 | 3.946</td>\n",
       "      <td>0.258 | 3.589</td>\n",
       "      <td>0.525 | 2.871</td>\n",
       "      <td>0.103 | 3.946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, State_Encoded</th>\n",
       "      <td>0.072 | 4.015</td>\n",
       "      <td>0.290 | 3.512</td>\n",
       "      <td>0.015 | 4.136</td>\n",
       "      <td>0.053 | 4.056</td>\n",
       "      <td>0.470 | 3.035</td>\n",
       "      <td>0.015 | 4.136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.466 | 3.046</td>\n",
       "      <td>0.738 | 2.133</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "      <td>0.749 | 2.088</td>\n",
       "      <td>0.619 | 2.573</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.296 | 3.497</td>\n",
       "      <td>0.454 | 3.079</td>\n",
       "      <td>0.102 | 3.949</td>\n",
       "      <td>0.222 | 3.676</td>\n",
       "      <td>0.561 | 2.760</td>\n",
       "      <td>0.102 | 3.949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.726 | 2.182</td>\n",
       "      <td>0.803 | 1.850</td>\n",
       "      <td>0.081 | 3.996</td>\n",
       "      <td>0.746 | 2.101</td>\n",
       "      <td>0.824 | 1.750</td>\n",
       "      <td>0.081 | 3.996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Crop_Encoded</th>\n",
       "      <td>0.543 | 2.818</td>\n",
       "      <td>0.742 | 2.119</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "      <td>0.743 | 2.115</td>\n",
       "      <td>0.698 | 2.290</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1</th>\n",
       "      <td>-0.325 | 4.797</td>\n",
       "      <td>0.322 | 3.433</td>\n",
       "      <td>0.006 | 4.156</td>\n",
       "      <td>0.105 | 3.943</td>\n",
       "      <td>0.245 | 3.622</td>\n",
       "      <td>0.006 | 4.156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2</th>\n",
       "      <td>-0.434 | 4.990</td>\n",
       "      <td>0.366 | 3.319</td>\n",
       "      <td>0.018 | 4.130</td>\n",
       "      <td>0.069 | 4.021</td>\n",
       "      <td>0.212 | 3.700</td>\n",
       "      <td>0.018 | 4.130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded</th>\n",
       "      <td>0.048 | 4.066</td>\n",
       "      <td>0.519 | 2.889</td>\n",
       "      <td>0.108 | 3.935</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "      <td>0.432 | 3.142</td>\n",
       "      <td>0.108 | 3.935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, State_Encoded</th>\n",
       "      <td>-0.043 | 4.256</td>\n",
       "      <td>0.357 | 3.343</td>\n",
       "      <td>0.017 | 4.132</td>\n",
       "      <td>0.010 | 4.147</td>\n",
       "      <td>0.329 | 3.414</td>\n",
       "      <td>0.017 | 4.132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Crop_Encoded</th>\n",
       "      <td>0.385 | 3.268</td>\n",
       "      <td>0.697 | 2.293</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.682 | 2.350</td>\n",
       "      <td>0.667 | 2.405</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2</th>\n",
       "      <td>-0.190 | 4.546</td>\n",
       "      <td>0.396 | 3.240</td>\n",
       "      <td>-0.001 | 4.171</td>\n",
       "      <td>0.140 | 3.864</td>\n",
       "      <td>0.384 | 3.270</td>\n",
       "      <td>-0.001 | 4.171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded</th>\n",
       "      <td>0.298 | 3.491</td>\n",
       "      <td>0.541 | 2.824</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.262 | 3.580</td>\n",
       "      <td>0.515 | 2.903</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, State_Encoded</th>\n",
       "      <td>0.433 | 3.137</td>\n",
       "      <td>0.473 | 3.024</td>\n",
       "      <td>-0.003 | 4.173</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "      <td>0.612 | 2.598</td>\n",
       "      <td>-0.003 | 4.173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Crop_Encoded</th>\n",
       "      <td>0.648 | 2.474</td>\n",
       "      <td>0.804 | 1.846</td>\n",
       "      <td>0.081 | 3.994</td>\n",
       "      <td>0.681 | 2.353</td>\n",
       "      <td>0.795 | 1.889</td>\n",
       "      <td>0.081 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded</th>\n",
       "      <td>0.067 | 4.025</td>\n",
       "      <td>0.562 | 2.758</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "      <td>0.238 | 3.637</td>\n",
       "      <td>0.500 | 2.948</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, State_Encoded</th>\n",
       "      <td>0.205 | 3.716</td>\n",
       "      <td>0.414 | 3.190</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "      <td>0.017 | 4.133</td>\n",
       "      <td>0.491 | 2.974</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.618 | 2.575</td>\n",
       "      <td>0.678 | 2.364</td>\n",
       "      <td>0.159 | 3.822</td>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.632 | 2.528</td>\n",
       "      <td>0.159 | 3.822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.006 | 4.155</td>\n",
       "      <td>0.578 | 2.707</td>\n",
       "      <td>0.094 | 3.966</td>\n",
       "      <td>0.286 | 3.520</td>\n",
       "      <td>0.473 | 3.026</td>\n",
       "      <td>0.094 | 3.966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.882 | 1.429</td>\n",
       "      <td>0.826 | 1.737</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.906 | 1.275</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.883 | 1.427</td>\n",
       "      <td>0.851 | 1.607</td>\n",
       "      <td>0.070 | 4.018</td>\n",
       "      <td>0.730 | 2.167</td>\n",
       "      <td>0.929 | 1.112</td>\n",
       "      <td>0.070 | 4.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.457 | 3.072</td>\n",
       "      <td>0.593 | 2.658</td>\n",
       "      <td>0.077 | 4.005</td>\n",
       "      <td>0.330 | 3.410</td>\n",
       "      <td>0.683 | 2.347</td>\n",
       "      <td>0.077 | 4.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, State_Encoded</th>\n",
       "      <td>0.662 | 2.422</td>\n",
       "      <td>0.525 | 2.874</td>\n",
       "      <td>-0.003 | 4.174</td>\n",
       "      <td>0.220 | 3.680</td>\n",
       "      <td>0.761 | 2.038</td>\n",
       "      <td>-0.003 | 4.174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.643 | 2.489</td>\n",
       "      <td>0.723 | 2.192</td>\n",
       "      <td>0.144 | 3.857</td>\n",
       "      <td>0.695 | 2.300</td>\n",
       "      <td>0.724 | 2.190</td>\n",
       "      <td>0.144 | 3.857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.799 | 1.866</td>\n",
       "      <td>0.612 | 2.597</td>\n",
       "      <td>0.076 | 4.006</td>\n",
       "      <td>0.442 | 3.114</td>\n",
       "      <td>0.855 | 1.586</td>\n",
       "      <td>0.076 | 4.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.919 | 1.184</td>\n",
       "      <td>0.832 | 1.710</td>\n",
       "      <td>0.067 | 4.026</td>\n",
       "      <td>0.656 | 2.445</td>\n",
       "      <td>0.934 | 1.071</td>\n",
       "      <td>0.067 | 4.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.746 | 2.100</td>\n",
       "      <td>0.782 | 1.948</td>\n",
       "      <td>0.155 | 3.831</td>\n",
       "      <td>0.735 | 2.145</td>\n",
       "      <td>0.794 | 1.890</td>\n",
       "      <td>0.155 | 3.831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.528 | 2.864</td>\n",
       "      <td>0.495 | 2.963</td>\n",
       "      <td>0.090 | 3.975</td>\n",
       "      <td>0.323 | 3.428</td>\n",
       "      <td>0.713 | 2.232</td>\n",
       "      <td>0.090 | 3.975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.898 | 1.331</td>\n",
       "      <td>0.844 | 1.645</td>\n",
       "      <td>0.078 | 4.001</td>\n",
       "      <td>0.704 | 2.268</td>\n",
       "      <td>0.921 | 1.168</td>\n",
       "      <td>0.078 | 4.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.926 | 1.135</td>\n",
       "      <td>0.859 | 1.563</td>\n",
       "      <td>0.153 | 3.835</td>\n",
       "      <td>0.736 | 2.143</td>\n",
       "      <td>0.926 | 1.131</td>\n",
       "      <td>0.153 | 3.835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                             DecisionTree  \\\n",
       "Feature_Set                                                      \n",
       "Annual_Rainfall, PC1, Crop_Encoded               0.659 | 2.433   \n",
       "Annual_Rainfall, PC1, PC2                        0.009 | 4.149   \n",
       "Annual_Rainfall, PC1, Season_Encoded             0.260 | 3.586   \n",
       "Annual_Rainfall, PC1, State_Encoded              0.603 | 2.627   \n",
       "Annual_Rainfall, PC2, Crop_Encoded               0.644 | 2.485   \n",
       "Annual_Rainfall, PC2, Season_Encoded             0.244 | 3.623   \n",
       "Annual_Rainfall, PC2, State_Encoded              0.072 | 4.015   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded    0.466 | 3.046   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded   0.296 | 3.497   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded     0.726 | 2.182   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded         0.543 | 2.818   \n",
       "Crop_Year, Annual_Rainfall, PC1                 -0.325 | 4.797   \n",
       "Crop_Year, Annual_Rainfall, PC2                 -0.434 | 4.990   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded       0.048 | 4.066   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded       -0.043 | 4.256   \n",
       "Crop_Year, PC1, Crop_Encoded                     0.385 | 3.268   \n",
       "Crop_Year, PC1, PC2                             -0.190 | 4.546   \n",
       "Crop_Year, PC1, Season_Encoded                   0.298 | 3.491   \n",
       "Crop_Year, PC1, State_Encoded                    0.433 | 3.137   \n",
       "Crop_Year, PC2, Crop_Encoded                     0.648 | 2.474   \n",
       "Crop_Year, PC2, Season_Encoded                   0.067 | 4.025   \n",
       "Crop_Year, PC2, State_Encoded                    0.205 | 3.716   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded          0.618 | 2.575   \n",
       "Crop_Year, Season_Encoded, State_Encoded         0.006 | 4.155   \n",
       "Crop_Year, State_Encoded, Crop_Encoded           0.882 | 1.429   \n",
       "PC1, PC2, Crop_Encoded                           0.883 | 1.427   \n",
       "PC1, PC2, Season_Encoded                         0.457 | 3.072   \n",
       "PC1, PC2, State_Encoded                          0.662 | 2.422   \n",
       "PC1, Season_Encoded, Crop_Encoded                0.643 | 2.489   \n",
       "PC1, Season_Encoded, State_Encoded               0.799 | 1.866   \n",
       "PC1, State_Encoded, Crop_Encoded                 0.919 | 1.184   \n",
       "PC2, Season_Encoded, Crop_Encoded                0.746 | 2.100   \n",
       "PC2, Season_Encoded, State_Encoded               0.528 | 2.864   \n",
       "PC2, State_Encoded, Crop_Encoded                 0.898 | 1.331   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded      0.926 | 1.135   \n",
       "\n",
       "Model                                          GradientBoosting  \\\n",
       "Feature_Set                                                       \n",
       "Annual_Rainfall, PC1, Crop_Encoded                0.777 | 1.966   \n",
       "Annual_Rainfall, PC1, PC2                         0.356 | 3.345   \n",
       "Annual_Rainfall, PC1, Season_Encoded              0.509 | 2.920   \n",
       "Annual_Rainfall, PC1, State_Encoded               0.410 | 3.202   \n",
       "Annual_Rainfall, PC2, Crop_Encoded                0.819 | 1.771   \n",
       "Annual_Rainfall, PC2, Season_Encoded              0.494 | 2.966   \n",
       "Annual_Rainfall, PC2, State_Encoded               0.290 | 3.512   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded     0.738 | 2.133   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded    0.454 | 3.079   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded      0.803 | 1.850   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded          0.742 | 2.119   \n",
       "Crop_Year, Annual_Rainfall, PC1                   0.322 | 3.433   \n",
       "Crop_Year, Annual_Rainfall, PC2                   0.366 | 3.319   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded        0.519 | 2.889   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded         0.357 | 3.343   \n",
       "Crop_Year, PC1, Crop_Encoded                      0.697 | 2.293   \n",
       "Crop_Year, PC1, PC2                               0.396 | 3.240   \n",
       "Crop_Year, PC1, Season_Encoded                    0.541 | 2.824   \n",
       "Crop_Year, PC1, State_Encoded                     0.473 | 3.024   \n",
       "Crop_Year, PC2, Crop_Encoded                      0.804 | 1.846   \n",
       "Crop_Year, PC2, Season_Encoded                    0.562 | 2.758   \n",
       "Crop_Year, PC2, State_Encoded                     0.414 | 3.190   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded           0.678 | 2.364   \n",
       "Crop_Year, Season_Encoded, State_Encoded          0.578 | 2.707   \n",
       "Crop_Year, State_Encoded, Crop_Encoded            0.826 | 1.737   \n",
       "PC1, PC2, Crop_Encoded                            0.851 | 1.607   \n",
       "PC1, PC2, Season_Encoded                          0.593 | 2.658   \n",
       "PC1, PC2, State_Encoded                           0.525 | 2.874   \n",
       "PC1, Season_Encoded, Crop_Encoded                 0.723 | 2.192   \n",
       "PC1, Season_Encoded, State_Encoded                0.612 | 2.597   \n",
       "PC1, State_Encoded, Crop_Encoded                  0.832 | 1.710   \n",
       "PC2, Season_Encoded, Crop_Encoded                 0.782 | 1.948   \n",
       "PC2, Season_Encoded, State_Encoded                0.495 | 2.963   \n",
       "PC2, State_Encoded, Crop_Encoded                  0.844 | 1.645   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded       0.859 | 1.563   \n",
       "\n",
       "Model                                          LinearRegression  \\\n",
       "Feature_Set                                                       \n",
       "Annual_Rainfall, PC1, Crop_Encoded                0.074 | 4.011   \n",
       "Annual_Rainfall, PC1, PC2                         0.005 | 4.157   \n",
       "Annual_Rainfall, PC1, Season_Encoded              0.093 | 3.969   \n",
       "Annual_Rainfall, PC1, State_Encoded               0.002 | 4.163   \n",
       "Annual_Rainfall, PC2, Crop_Encoded                0.084 | 3.989   \n",
       "Annual_Rainfall, PC2, Season_Encoded              0.103 | 3.946   \n",
       "Annual_Rainfall, PC2, State_Encoded               0.015 | 4.136   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded     0.166 | 3.807   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded    0.102 | 3.949   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded      0.081 | 3.996   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded          0.086 | 3.985   \n",
       "Crop_Year, Annual_Rainfall, PC1                   0.006 | 4.156   \n",
       "Crop_Year, Annual_Rainfall, PC2                   0.018 | 4.130   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded        0.108 | 3.935   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded         0.017 | 4.132   \n",
       "Crop_Year, PC1, Crop_Encoded                      0.071 | 4.016   \n",
       "Crop_Year, PC1, PC2                              -0.001 | 4.171   \n",
       "Crop_Year, PC1, Season_Encoded                    0.080 | 3.998   \n",
       "Crop_Year, PC1, State_Encoded                    -0.003 | 4.173   \n",
       "Crop_Year, PC2, Crop_Encoded                      0.081 | 3.994   \n",
       "Crop_Year, PC2, Season_Encoded                    0.093 | 3.969   \n",
       "Crop_Year, PC2, State_Encoded                     0.012 | 4.143   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded           0.159 | 3.822   \n",
       "Crop_Year, Season_Encoded, State_Encoded          0.094 | 3.966   \n",
       "Crop_Year, State_Encoded, Crop_Encoded            0.080 | 3.998   \n",
       "PC1, PC2, Crop_Encoded                            0.070 | 4.018   \n",
       "PC1, PC2, Season_Encoded                          0.077 | 4.005   \n",
       "PC1, PC2, State_Encoded                          -0.003 | 4.174   \n",
       "PC1, Season_Encoded, Crop_Encoded                 0.144 | 3.857   \n",
       "PC1, Season_Encoded, State_Encoded                0.076 | 4.006   \n",
       "PC1, State_Encoded, Crop_Encoded                  0.067 | 4.026   \n",
       "PC2, Season_Encoded, Crop_Encoded                 0.155 | 3.831   \n",
       "PC2, Season_Encoded, State_Encoded                0.090 | 3.975   \n",
       "PC2, State_Encoded, Crop_Encoded                  0.078 | 4.001   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded       0.153 | 3.835   \n",
       "\n",
       "Model                                            MLPRegressor   RandomForest  \\\n",
       "Feature_Set                                                                    \n",
       "Annual_Rainfall, PC1, Crop_Encoded              0.770 | 2.001  0.796 | 1.884   \n",
       "Annual_Rainfall, PC1, PC2                       0.234 | 3.647  0.464 | 3.052   \n",
       "Annual_Rainfall, PC1, Season_Encoded            0.302 | 3.482  0.594 | 2.654   \n",
       "Annual_Rainfall, PC1, State_Encoded             0.138 | 3.870  0.646 | 2.481   \n",
       "Annual_Rainfall, PC2, Crop_Encoded              0.776 | 1.972  0.822 | 1.759   \n",
       "Annual_Rainfall, PC2, Season_Encoded            0.258 | 3.589  0.525 | 2.871   \n",
       "Annual_Rainfall, PC2, State_Encoded             0.053 | 4.056  0.470 | 3.035   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded   0.749 | 2.088  0.619 | 2.573   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded  0.222 | 3.676  0.561 | 2.760   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded    0.746 | 2.101  0.824 | 1.750   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded        0.743 | 2.115  0.698 | 2.290   \n",
       "Crop_Year, Annual_Rainfall, PC1                 0.105 | 3.943  0.245 | 3.622   \n",
       "Crop_Year, Annual_Rainfall, PC2                 0.069 | 4.021  0.212 | 3.700   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded      0.169 | 3.799  0.432 | 3.142   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded       0.010 | 4.147  0.329 | 3.414   \n",
       "Crop_Year, PC1, Crop_Encoded                    0.682 | 2.350  0.667 | 2.405   \n",
       "Crop_Year, PC1, PC2                             0.140 | 3.864  0.384 | 3.270   \n",
       "Crop_Year, PC1, Season_Encoded                  0.262 | 3.580  0.515 | 2.903   \n",
       "Crop_Year, PC1, State_Encoded                   0.173 | 3.789  0.612 | 2.598   \n",
       "Crop_Year, PC2, Crop_Encoded                    0.681 | 2.353  0.795 | 1.889   \n",
       "Crop_Year, PC2, Season_Encoded                  0.238 | 3.637  0.500 | 2.948   \n",
       "Crop_Year, PC2, State_Encoded                   0.017 | 4.133  0.491 | 2.974   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded         0.683 | 2.345  0.632 | 2.528   \n",
       "Crop_Year, Season_Encoded, State_Encoded        0.286 | 3.520  0.473 | 3.026   \n",
       "Crop_Year, State_Encoded, Crop_Encoded          0.683 | 2.345  0.906 | 1.275   \n",
       "PC1, PC2, Crop_Encoded                          0.730 | 2.167  0.929 | 1.112   \n",
       "PC1, PC2, Season_Encoded                        0.330 | 3.410  0.683 | 2.347   \n",
       "PC1, PC2, State_Encoded                         0.220 | 3.680  0.761 | 2.038   \n",
       "PC1, Season_Encoded, Crop_Encoded               0.695 | 2.300  0.724 | 2.190   \n",
       "PC1, Season_Encoded, State_Encoded              0.442 | 3.114  0.855 | 1.586   \n",
       "PC1, State_Encoded, Crop_Encoded                0.656 | 2.445  0.934 | 1.071   \n",
       "PC2, Season_Encoded, Crop_Encoded               0.735 | 2.145  0.794 | 1.890   \n",
       "PC2, Season_Encoded, State_Encoded              0.323 | 3.428  0.713 | 2.232   \n",
       "PC2, State_Encoded, Crop_Encoded                0.704 | 2.268  0.921 | 1.168   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded     0.736 | 2.143  0.926 | 1.131   \n",
       "\n",
       "Model                                                    Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall, PC1, Crop_Encoded               0.074 | 4.011  \n",
       "Annual_Rainfall, PC1, PC2                        0.005 | 4.157  \n",
       "Annual_Rainfall, PC1, Season_Encoded             0.093 | 3.969  \n",
       "Annual_Rainfall, PC1, State_Encoded              0.002 | 4.163  \n",
       "Annual_Rainfall, PC2, Crop_Encoded               0.084 | 3.989  \n",
       "Annual_Rainfall, PC2, Season_Encoded             0.103 | 3.946  \n",
       "Annual_Rainfall, PC2, State_Encoded              0.015 | 4.136  \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded    0.166 | 3.807  \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded   0.102 | 3.949  \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded     0.081 | 3.996  \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded         0.086 | 3.985  \n",
       "Crop_Year, Annual_Rainfall, PC1                  0.006 | 4.156  \n",
       "Crop_Year, Annual_Rainfall, PC2                  0.018 | 4.130  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded       0.108 | 3.935  \n",
       "Crop_Year, Annual_Rainfall, State_Encoded        0.017 | 4.132  \n",
       "Crop_Year, PC1, Crop_Encoded                     0.071 | 4.016  \n",
       "Crop_Year, PC1, PC2                             -0.001 | 4.171  \n",
       "Crop_Year, PC1, Season_Encoded                   0.080 | 3.998  \n",
       "Crop_Year, PC1, State_Encoded                   -0.003 | 4.173  \n",
       "Crop_Year, PC2, Crop_Encoded                     0.081 | 3.994  \n",
       "Crop_Year, PC2, Season_Encoded                   0.093 | 3.969  \n",
       "Crop_Year, PC2, State_Encoded                    0.012 | 4.143  \n",
       "Crop_Year, Season_Encoded, Crop_Encoded          0.159 | 3.822  \n",
       "Crop_Year, Season_Encoded, State_Encoded         0.094 | 3.966  \n",
       "Crop_Year, State_Encoded, Crop_Encoded           0.080 | 3.998  \n",
       "PC1, PC2, Crop_Encoded                           0.070 | 4.018  \n",
       "PC1, PC2, Season_Encoded                         0.077 | 4.005  \n",
       "PC1, PC2, State_Encoded                         -0.003 | 4.174  \n",
       "PC1, Season_Encoded, Crop_Encoded                0.144 | 3.857  \n",
       "PC1, Season_Encoded, State_Encoded               0.076 | 4.006  \n",
       "PC1, State_Encoded, Crop_Encoded                 0.067 | 4.026  \n",
       "PC2, Season_Encoded, Crop_Encoded                0.155 | 3.831  \n",
       "PC2, Season_Encoded, State_Encoded               0.090 | 3.975  \n",
       "PC2, State_Encoded, Crop_Encoded                 0.078 | 4.001  \n",
       "Season_Encoded, State_Encoded, Crop_Encoded      0.153 | 3.835  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 4 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.896 | 1.343</td>\n",
       "      <td>0.854 | 1.592</td>\n",
       "      <td>0.078 | 4.002</td>\n",
       "      <td>0.802 | 1.855</td>\n",
       "      <td>0.932 | 1.085</td>\n",
       "      <td>0.078 | 4.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.509 | 2.919</td>\n",
       "      <td>0.610 | 2.603</td>\n",
       "      <td>0.096 | 3.962</td>\n",
       "      <td>0.371 | 3.306</td>\n",
       "      <td>0.710 | 2.245</td>\n",
       "      <td>0.096 | 3.962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.602 | 2.629</td>\n",
       "      <td>0.457 | 3.071</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "      <td>0.258 | 3.591</td>\n",
       "      <td>0.753 | 2.072</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.688 | 2.328</td>\n",
       "      <td>0.781 | 1.950</td>\n",
       "      <td>0.160 | 3.819</td>\n",
       "      <td>0.769 | 2.003</td>\n",
       "      <td>0.828 | 1.726</td>\n",
       "      <td>0.160 | 3.819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.706 | 2.259</td>\n",
       "      <td>0.604 | 2.622</td>\n",
       "      <td>0.095 | 3.964</td>\n",
       "      <td>0.430 | 3.145</td>\n",
       "      <td>0.797 | 1.877</td>\n",
       "      <td>0.095 | 3.964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.839 | 1.672</td>\n",
       "      <td>0.830 | 1.718</td>\n",
       "      <td>0.074 | 4.009</td>\n",
       "      <td>0.803 | 1.848</td>\n",
       "      <td>0.896 | 1.344</td>\n",
       "      <td>0.074 | 4.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.685 | 2.338</td>\n",
       "      <td>0.820 | 1.769</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "      <td>0.787 | 1.923</td>\n",
       "      <td>0.840 | 1.665</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.598 | 2.641</td>\n",
       "      <td>0.549 | 2.800</td>\n",
       "      <td>0.106 | 3.941</td>\n",
       "      <td>0.309 | 3.464</td>\n",
       "      <td>0.689 | 2.324</td>\n",
       "      <td>0.106 | 3.941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.787 | 1.923</td>\n",
       "      <td>0.850 | 1.612</td>\n",
       "      <td>0.085 | 3.987</td>\n",
       "      <td>0.789 | 1.915</td>\n",
       "      <td>0.915 | 1.216</td>\n",
       "      <td>0.085 | 3.987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.774 | 1.983</td>\n",
       "      <td>0.813 | 1.804</td>\n",
       "      <td>0.167 | 3.804</td>\n",
       "      <td>0.789 | 1.914</td>\n",
       "      <td>0.862 | 1.548</td>\n",
       "      <td>0.167 | 3.804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Crop_Encoded</th>\n",
       "      <td>0.738 | 2.131</td>\n",
       "      <td>0.780 | 1.956</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.778 | 1.962</td>\n",
       "      <td>0.832 | 1.709</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2</th>\n",
       "      <td>0.234 | 3.647</td>\n",
       "      <td>0.394 | 3.245</td>\n",
       "      <td>0.010 | 4.148</td>\n",
       "      <td>0.190 | 3.751</td>\n",
       "      <td>0.482 | 3.001</td>\n",
       "      <td>0.009 | 4.148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded</th>\n",
       "      <td>0.448 | 3.096</td>\n",
       "      <td>0.580 | 2.699</td>\n",
       "      <td>0.101 | 3.952</td>\n",
       "      <td>0.347 | 3.369</td>\n",
       "      <td>0.632 | 2.527</td>\n",
       "      <td>0.101 | 3.952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, State_Encoded</th>\n",
       "      <td>0.457 | 3.072</td>\n",
       "      <td>0.424 | 3.163</td>\n",
       "      <td>0.008 | 4.151</td>\n",
       "      <td>0.145 | 3.854</td>\n",
       "      <td>0.611 | 2.599</td>\n",
       "      <td>0.008 | 4.151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Crop_Encoded</th>\n",
       "      <td>0.766 | 2.015</td>\n",
       "      <td>0.831 | 1.714</td>\n",
       "      <td>0.090 | 3.977</td>\n",
       "      <td>0.777 | 1.967</td>\n",
       "      <td>0.859 | 1.563</td>\n",
       "      <td>0.090 | 3.977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded</th>\n",
       "      <td>0.183 | 3.768</td>\n",
       "      <td>0.578 | 2.708</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "      <td>0.229 | 3.659</td>\n",
       "      <td>0.579 | 2.705</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, State_Encoded</th>\n",
       "      <td>-0.018 | 4.205</td>\n",
       "      <td>0.383 | 3.274</td>\n",
       "      <td>0.021 | 4.124</td>\n",
       "      <td>0.051 | 4.061</td>\n",
       "      <td>0.442 | 3.112</td>\n",
       "      <td>0.021 | 4.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.553 | 2.786</td>\n",
       "      <td>0.753 | 2.069</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "      <td>0.765 | 2.021</td>\n",
       "      <td>0.721 | 2.200</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.269 | 3.564</td>\n",
       "      <td>0.565 | 2.747</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "      <td>0.229 | 3.658</td>\n",
       "      <td>0.606 | 2.616</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.797 | 1.880</td>\n",
       "      <td>0.805 | 1.843</td>\n",
       "      <td>0.087 | 3.982</td>\n",
       "      <td>0.770 | 1.998</td>\n",
       "      <td>0.853 | 1.598</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.915 | 1.214</td>\n",
       "      <td>0.852 | 1.603</td>\n",
       "      <td>0.075 | 4.008</td>\n",
       "      <td>0.734 | 2.150</td>\n",
       "      <td>0.945 | 0.979</td>\n",
       "      <td>0.075 | 4.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.516 | 2.898</td>\n",
       "      <td>0.629 | 2.538</td>\n",
       "      <td>0.083 | 3.991</td>\n",
       "      <td>0.380 | 3.282</td>\n",
       "      <td>0.757 | 2.054</td>\n",
       "      <td>0.083 | 3.991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.553 | 2.788</td>\n",
       "      <td>0.544 | 2.814</td>\n",
       "      <td>0.002 | 4.164</td>\n",
       "      <td>0.234 | 3.648</td>\n",
       "      <td>0.759 | 2.044</td>\n",
       "      <td>0.002 | 4.164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.611 | 2.599</td>\n",
       "      <td>0.717 | 2.215</td>\n",
       "      <td>0.151 | 3.839</td>\n",
       "      <td>0.706 | 2.259</td>\n",
       "      <td>0.745 | 2.106</td>\n",
       "      <td>0.151 | 3.839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.770 | 2.001</td>\n",
       "      <td>0.666 | 2.409</td>\n",
       "      <td>0.084 | 3.988</td>\n",
       "      <td>0.437 | 3.128</td>\n",
       "      <td>0.856 | 1.584</td>\n",
       "      <td>0.084 | 3.988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.929 | 1.112</td>\n",
       "      <td>0.833 | 1.703</td>\n",
       "      <td>0.073 | 4.013</td>\n",
       "      <td>0.651 | 2.462</td>\n",
       "      <td>0.947 | 0.956</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.697 | 2.293</td>\n",
       "      <td>0.812 | 1.806</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "      <td>0.739 | 2.129</td>\n",
       "      <td>0.860 | 1.561</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.439 | 3.123</td>\n",
       "      <td>0.608 | 2.610</td>\n",
       "      <td>0.098 | 3.958</td>\n",
       "      <td>0.270 | 3.561</td>\n",
       "      <td>0.751 | 2.079</td>\n",
       "      <td>0.098 | 3.958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.944 | 0.986</td>\n",
       "      <td>0.868 | 1.516</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "      <td>0.719 | 2.210</td>\n",
       "      <td>0.955 | 0.884</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.955 | 0.883</td>\n",
       "      <td>0.852 | 1.605</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "      <td>0.771 | 1.996</td>\n",
       "      <td>0.959 | 0.839</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.899 | 1.323</td>\n",
       "      <td>0.850 | 1.614</td>\n",
       "      <td>0.147 | 3.849</td>\n",
       "      <td>0.766 | 2.016</td>\n",
       "      <td>0.941 | 1.013</td>\n",
       "      <td>0.147 | 3.849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.754 | 2.065</td>\n",
       "      <td>0.670 | 2.394</td>\n",
       "      <td>0.080 | 3.997</td>\n",
       "      <td>0.509 | 2.920</td>\n",
       "      <td>0.868 | 1.516</td>\n",
       "      <td>0.080 | 3.997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.947 | 0.956</td>\n",
       "      <td>0.871 | 1.497</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.594 | 2.656</td>\n",
       "      <td>0.952 | 0.910</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.922 | 1.165</td>\n",
       "      <td>0.869 | 1.506</td>\n",
       "      <td>0.146 | 3.852</td>\n",
       "      <td>0.770 | 1.998</td>\n",
       "      <td>0.946 | 0.969</td>\n",
       "      <td>0.146 | 3.852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.904 | 1.290</td>\n",
       "      <td>0.855 | 1.588</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "      <td>0.773 | 1.987</td>\n",
       "      <td>0.929 | 1.114</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                 DecisionTree  \\\n",
       "Feature_Set                                                          \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded              0.896 | 1.343   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded            0.509 | 2.919   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded             0.602 | 2.629   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded   0.688 | 2.328   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...   0.706 | 2.259   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded    0.839 | 1.672   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded   0.685 | 2.338   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...   0.598 | 2.641   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded    0.787 | 1.923   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...   0.774 | 1.983   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded        0.738 | 2.131   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                 0.234 | 3.647   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded      0.448 | 3.096   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded       0.457 | 3.072   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded        0.766 | 2.015   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded      0.183 | 3.768   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      -0.018 | 4.205   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...   0.553 | 2.786   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...   0.269 | 3.564   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...   0.797 | 1.880   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                    0.915 | 1.214   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                  0.516 | 2.898   \n",
       "Crop_Year, PC1, PC2, State_Encoded                   0.553 | 2.788   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded         0.611 | 2.599   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded        0.770 | 2.001   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded          0.929 | 1.112   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded         0.697 | 2.293   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded        0.439 | 3.123   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded          0.944 | 0.986   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...   0.955 | 0.883   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded               0.899 | 1.323   \n",
       "PC1, PC2, Season_Encoded, State_Encoded              0.754 | 2.065   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                0.947 | 0.956   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded     0.922 | 1.165   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded     0.904 | 1.290   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded               0.854 | 1.592   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded             0.610 | 2.603   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded              0.457 | 3.071   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded    0.781 | 1.950   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.604 | 2.622   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded     0.830 | 1.718   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded    0.820 | 1.769   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.549 | 2.800   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded     0.850 | 1.612   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...    0.813 | 1.804   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded         0.780 | 1.956   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                  0.394 | 3.245   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded       0.580 | 2.699   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded        0.424 | 3.163   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded         0.831 | 1.714   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded       0.578 | 2.708   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded        0.383 | 3.274   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...    0.753 | 2.069   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.565 | 2.747   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...    0.805 | 1.843   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                     0.852 | 1.603   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                   0.629 | 2.538   \n",
       "Crop_Year, PC1, PC2, State_Encoded                    0.544 | 2.814   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded          0.717 | 2.215   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded         0.666 | 2.409   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded           0.833 | 1.703   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded          0.812 | 1.806   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded         0.608 | 2.610   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded           0.868 | 1.516   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...    0.852 | 1.605   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded                0.850 | 1.614   \n",
       "PC1, PC2, Season_Encoded, State_Encoded               0.670 | 2.394   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                 0.871 | 1.497   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded      0.869 | 1.506   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded      0.855 | 1.588   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded               0.078 | 4.002   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded             0.096 | 3.962   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded              0.007 | 4.154   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded    0.160 | 3.819   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.095 | 3.964   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded     0.074 | 4.009   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded    0.169 | 3.799   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.106 | 3.941   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded     0.085 | 3.987   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...    0.167 | 3.804   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded         0.080 | 3.998   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                  0.010 | 4.148   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded       0.101 | 3.952   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded        0.008 | 4.151   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded         0.090 | 3.977   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded       0.111 | 3.929   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded        0.021 | 4.124   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...    0.175 | 3.786   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.111 | 3.929   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...    0.087 | 3.982   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                     0.075 | 4.008   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                   0.083 | 3.991   \n",
       "Crop_Year, PC1, PC2, State_Encoded                    0.002 | 4.164   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded          0.151 | 3.839   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded         0.084 | 3.988   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded           0.073 | 4.013   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded          0.162 | 3.815   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded         0.098 | 3.958   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded           0.084 | 3.989   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...    0.162 | 3.815   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded                0.147 | 3.849   \n",
       "PC1, PC2, Season_Encoded, State_Encoded               0.080 | 3.997   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                 0.071 | 4.016   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded      0.146 | 3.852   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded      0.157 | 3.826   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.802 | 1.855   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.371 | 3.306   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.258 | 3.591   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.769 | 2.003   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.430 | 3.145   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.803 | 1.848   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.787 | 1.923   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.309 | 3.464   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.789 | 1.915   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.789 | 1.914   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.778 | 1.962   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.190 | 3.751   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.347 | 3.369   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.145 | 3.854   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.777 | 1.967   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.229 | 3.659   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.051 | 4.061   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.765 | 2.021   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.229 | 3.658   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.770 | 1.998   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.734 | 2.150   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.380 | 3.282   \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.234 | 3.648   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.706 | 2.259   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.437 | 3.128   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.651 | 2.462   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.739 | 2.129   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.270 | 3.561   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.719 | 2.210   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.771 | 1.996   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.766 | 2.016   \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.509 | 2.920   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.594 | 2.656   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.770 | 1.998   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.773 | 1.987   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.932 | 1.085   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.710 | 2.245   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.753 | 2.072   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.828 | 1.726   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.797 | 1.877   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.896 | 1.344   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.840 | 1.665   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.689 | 2.324   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.915 | 1.216   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.862 | 1.548   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.832 | 1.709   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.482 | 3.001   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.632 | 2.527   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.611 | 2.599   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.859 | 1.563   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.579 | 2.705   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.442 | 3.112   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.721 | 2.200   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.606 | 2.616   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.853 | 1.598   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.945 | 0.979   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.757 | 2.054   \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.759 | 2.044   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.745 | 2.106   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.856 | 1.584   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.947 | 0.956   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.860 | 1.561   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.751 | 2.079   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.955 | 0.884   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.959 | 0.839   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.941 | 1.013   \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.868 | 1.516   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.952 | 0.910   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.946 | 0.969   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.929 | 1.114   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.078 | 4.002  \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.096 | 3.962  \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.007 | 4.154  \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.160 | 3.819  \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.095 | 3.964  \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.074 | 4.009  \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.169 | 3.799  \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.106 | 3.941  \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.085 | 3.987  \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.167 | 3.804  \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.080 | 3.998  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.009 | 4.148  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.101 | 3.952  \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.008 | 4.151  \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.090 | 3.977  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.111 | 3.929  \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.021 | 4.124  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.175 | 3.786  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.111 | 3.929  \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.087 | 3.981  \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.075 | 4.008  \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.083 | 3.991  \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.002 | 4.164  \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.151 | 3.839  \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.084 | 3.988  \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.073 | 4.012  \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.162 | 3.815  \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.098 | 3.958  \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.084 | 3.989  \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.162 | 3.815  \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.147 | 3.849  \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.080 | 3.997  \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.071 | 4.016  \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.146 | 3.852  \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.157 | 3.826  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 5 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.905 | 1.285</td>\n",
       "      <td>0.862 | 1.549</td>\n",
       "      <td>0.164 | 3.812</td>\n",
       "      <td>0.812 | 1.809</td>\n",
       "      <td>0.938 | 1.041</td>\n",
       "      <td>0.164 | 3.811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.741 | 2.121</td>\n",
       "      <td>0.650 | 2.466</td>\n",
       "      <td>0.099 | 3.957</td>\n",
       "      <td>0.509 | 2.921</td>\n",
       "      <td>0.817 | 1.783</td>\n",
       "      <td>0.099 | 3.957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.907 | 1.272</td>\n",
       "      <td>0.876 | 1.469</td>\n",
       "      <td>0.079 | 4.000</td>\n",
       "      <td>0.822 | 1.760</td>\n",
       "      <td>0.941 | 1.016</td>\n",
       "      <td>0.079 | 4.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.877 | 1.462</td>\n",
       "      <td>0.846 | 1.634</td>\n",
       "      <td>0.162 | 3.816</td>\n",
       "      <td>0.837 | 1.682</td>\n",
       "      <td>0.915 | 1.217</td>\n",
       "      <td>0.162 | 3.816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.859 | 1.562</td>\n",
       "      <td>0.850 | 1.612</td>\n",
       "      <td>0.170 | 3.796</td>\n",
       "      <td>0.822 | 1.760</td>\n",
       "      <td>0.916 | 1.209</td>\n",
       "      <td>0.170 | 3.796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.914 | 1.220</td>\n",
       "      <td>0.859 | 1.564</td>\n",
       "      <td>0.083 | 3.990</td>\n",
       "      <td>0.800 | 1.862</td>\n",
       "      <td>0.945 | 0.977</td>\n",
       "      <td>0.083 | 3.990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.501 | 2.945</td>\n",
       "      <td>0.641 | 2.498</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "      <td>0.379 | 3.283</td>\n",
       "      <td>0.745 | 2.105</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.626 | 2.548</td>\n",
       "      <td>0.465 | 3.048</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "      <td>0.267 | 3.568</td>\n",
       "      <td>0.727 | 2.179</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.712 | 2.237</td>\n",
       "      <td>0.789 | 1.914</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "      <td>0.781 | 1.951</td>\n",
       "      <td>0.858 | 1.572</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.626 | 2.549</td>\n",
       "      <td>0.613 | 2.593</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "      <td>0.468 | 3.038</td>\n",
       "      <td>0.801 | 1.861</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.859 | 1.566</td>\n",
       "      <td>0.833 | 1.705</td>\n",
       "      <td>0.081 | 3.995</td>\n",
       "      <td>0.816 | 1.786</td>\n",
       "      <td>0.913 | 1.228</td>\n",
       "      <td>0.081 | 3.995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.782 | 1.946</td>\n",
       "      <td>0.837 | 1.680</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "      <td>0.806 | 1.835</td>\n",
       "      <td>0.880 | 1.444</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.540 | 2.827</td>\n",
       "      <td>0.619 | 2.572</td>\n",
       "      <td>0.114 | 3.922</td>\n",
       "      <td>0.287 | 3.518</td>\n",
       "      <td>0.739 | 2.127</td>\n",
       "      <td>0.114 | 3.922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.794 | 1.894</td>\n",
       "      <td>0.857 | 1.579</td>\n",
       "      <td>0.091 | 3.973</td>\n",
       "      <td>0.787 | 1.924</td>\n",
       "      <td>0.937 | 1.047</td>\n",
       "      <td>0.091 | 3.973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.849 | 1.622</td>\n",
       "      <td>0.824 | 1.749</td>\n",
       "      <td>0.177 | 3.782</td>\n",
       "      <td>0.818 | 1.778</td>\n",
       "      <td>0.901 | 1.311</td>\n",
       "      <td>0.177 | 3.782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.916 | 1.208</td>\n",
       "      <td>0.859 | 1.564</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "      <td>0.792 | 1.900</td>\n",
       "      <td>0.953 | 0.903</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.738 | 2.132</td>\n",
       "      <td>0.690 | 2.321</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "      <td>0.518 | 2.894</td>\n",
       "      <td>0.875 | 1.471</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.949 | 0.943</td>\n",
       "      <td>0.883 | 1.426</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "      <td>0.748 | 2.091</td>\n",
       "      <td>0.962 | 0.809</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.948 | 0.946</td>\n",
       "      <td>0.871 | 1.497</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "      <td>0.792 | 1.901</td>\n",
       "      <td>0.962 | 0.815</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.922 | 1.163</td>\n",
       "      <td>0.864 | 1.537</td>\n",
       "      <td>0.165 | 3.807</td>\n",
       "      <td>0.776 | 1.973</td>\n",
       "      <td>0.961 | 0.827</td>\n",
       "      <td>0.165 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.935 | 1.059</td>\n",
       "      <td>0.884 | 1.419</td>\n",
       "      <td>0.149 | 3.844</td>\n",
       "      <td>0.793 | 1.895</td>\n",
       "      <td>0.957 | 0.860</td>\n",
       "      <td>0.149 | 3.844</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.905 | 1.285   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.741 | 2.121   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.907 | 1.272   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.877 | 1.462   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.859 | 1.562   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.914 | 1.220   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.501 | 2.945   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.626 | 2.548   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.712 | 2.237   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.626 | 2.549   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.859 | 1.566   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.782 | 1.946   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.540 | 2.827   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.794 | 1.894   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.849 | 1.622   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.916 | 1.208   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.738 | 2.132   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.949 | 0.943   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.948 | 0.946   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.922 | 1.163   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.935 | 1.059   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...    0.862 | 1.549   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.650 | 2.466   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...    0.876 | 1.469   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.846 | 1.634   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.850 | 1.612   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded    0.859 | 1.564   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.641 | 2.498   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.465 | 3.048   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.789 | 1.914   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.613 | 2.593   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...    0.833 | 1.705   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.837 | 1.680   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.619 | 2.572   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...    0.857 | 1.579   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.824 | 1.749   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded     0.859 | 1.564   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded    0.690 | 2.321   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded      0.883 | 1.426   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...    0.871 | 1.497   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...    0.864 | 1.537   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...    0.884 | 1.419   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...    0.164 | 3.812   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.099 | 3.957   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...    0.079 | 4.000   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.162 | 3.816   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.170 | 3.796   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded    0.083 | 3.990   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.104 | 3.945   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.012 | 4.143   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.169 | 3.799   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.104 | 3.945   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...    0.081 | 3.995   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.177 | 3.780   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.114 | 3.922   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...    0.091 | 3.973   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.177 | 3.782   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded     0.154 | 3.833   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded    0.087 | 3.981   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded      0.077 | 4.004   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...    0.154 | 3.833   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...    0.165 | 3.807   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...    0.149 | 3.844   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.812 | 1.809   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.509 | 2.921   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.822 | 1.760   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.837 | 1.682   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.822 | 1.760   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.800 | 1.862   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.379 | 3.283   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.267 | 3.568   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.781 | 1.951   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.468 | 3.038   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.816 | 1.786   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.806 | 1.835   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.287 | 3.518   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.787 | 1.924   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.818 | 1.778   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.792 | 1.900   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.518 | 2.894   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.748 | 2.091   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.792 | 1.901   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.776 | 1.973   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.793 | 1.895   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.938 | 1.041   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.817 | 1.783   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.941 | 1.016   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.915 | 1.217   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.916 | 1.209   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.945 | 0.977   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.745 | 2.105   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.727 | 2.179   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.858 | 1.572   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.801 | 1.861   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.913 | 1.228   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.880 | 1.444   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.739 | 2.127   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.937 | 1.047   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.901 | 1.311   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.953 | 0.903   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.875 | 1.471   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.962 | 0.809   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.962 | 0.815   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.961 | 0.827   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.957 | 0.860   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.164 | 3.811  \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.099 | 3.957  \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.079 | 4.000  \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.162 | 3.816  \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.170 | 3.796  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.083 | 3.990  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.104 | 3.945  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.012 | 4.143  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.169 | 3.799  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.104 | 3.945  \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.081 | 3.995  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.177 | 3.780  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.114 | 3.922  \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.091 | 3.973  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.177 | 3.782  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.154 | 3.833  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.087 | 3.981  \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.077 | 4.004  \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.154 | 3.833  \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.165 | 3.807  \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.149 | 3.844  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 6 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.919 | 1.183</td>\n",
       "      <td>0.878 | 1.454</td>\n",
       "      <td>0.165 | 3.809</td>\n",
       "      <td>0.835 | 1.695</td>\n",
       "      <td>0.942 | 1.001</td>\n",
       "      <td>0.165 | 3.809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.926 | 1.136</td>\n",
       "      <td>0.874 | 1.477</td>\n",
       "      <td>0.172 | 3.793</td>\n",
       "      <td>0.809 | 1.821</td>\n",
       "      <td>0.948 | 0.946</td>\n",
       "      <td>0.172 | 3.793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.708 | 2.254</td>\n",
       "      <td>0.692 | 2.314</td>\n",
       "      <td>0.107 | 3.939</td>\n",
       "      <td>0.547 | 2.806</td>\n",
       "      <td>0.830 | 1.719</td>\n",
       "      <td>0.107 | 3.939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.911 | 1.246</td>\n",
       "      <td>0.873 | 1.483</td>\n",
       "      <td>0.085 | 3.988</td>\n",
       "      <td>0.828 | 1.727</td>\n",
       "      <td>0.948 | 0.951</td>\n",
       "      <td>0.085 | 3.988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.878 | 1.458</td>\n",
       "      <td>0.849 | 1.618</td>\n",
       "      <td>0.171 | 3.795</td>\n",
       "      <td>0.835 | 1.694</td>\n",
       "      <td>0.927 | 1.126</td>\n",
       "      <td>0.171 | 3.795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.867 | 1.519</td>\n",
       "      <td>0.858 | 1.569</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "      <td>0.831 | 1.712</td>\n",
       "      <td>0.939 | 1.029</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.958 | 0.853</td>\n",
       "      <td>0.889 | 1.389</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "      <td>0.799 | 1.869</td>\n",
       "      <td>0.965 | 0.779</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.919 | 1.183   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.926 | 1.136   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.708 | 2.254   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.911 | 1.246   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.878 | 1.458   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.867 | 1.519   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.958 | 0.853   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.878 | 1.454   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.874 | 1.477   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.692 | 2.314   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.873 | 1.483   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.849 | 1.618   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.858 | 1.569   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...    0.889 | 1.389   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.165 | 3.809   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.172 | 3.793   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.107 | 3.939   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.085 | 3.988   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.171 | 3.795   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.179 | 3.776   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...    0.157 | 3.826   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.835 | 1.695   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.809 | 1.821   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.547 | 2.806   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.828 | 1.727   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.835 | 1.694   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.831 | 1.712   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.799 | 1.869   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.942 | 1.001   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.948 | 0.946   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.830 | 1.719   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.948 | 0.951   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.927 | 1.126   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.939 | 1.029   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.965 | 0.779   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.165 | 3.809  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.172 | 3.793  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.107 | 3.939  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.085 | 3.988  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.171 | 3.795  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.179 | 3.776  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.157 | 3.826  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 7 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.923 | 1.154</td>\n",
       "      <td>0.886 | 1.406</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "      <td>0.847 | 1.629</td>\n",
       "      <td>0.951 | 0.921</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.923 | 1.154   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.886 | 1.406   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.173 | 3.789   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.847 | 1.629   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.951 | 0.921   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.173 | 3.789  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for count, df in grouped_results.items():\n",
    "    print(f\"\\n{'='*100}\")\n",
    "    print(f\"🧮 Feature Count: {count} Output format: (R2 | RMSE)\")\n",
    "    print(f\"{'='*100}\")\n",
    "    display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "59e2f46a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.605899Z",
     "iopub.status.busy": "2025-06-29T09:11:18.605052Z",
     "iopub.status.idle": "2025-06-29T09:11:18.624849Z",
     "shell.execute_reply": "2025-06-29T09:11:18.624014Z"
    },
    "papermill": {
     "duration": 0.049957,
     "end_time": "2025-06-29T09:11:18.626400",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.576443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_per_model = {}\n",
    "\n",
    "for count, df in grouped_results.items():\n",
    "    best_per_model[count] = {}\n",
    "    for model in df.columns:\n",
    "        try:\n",
    "            best_row = df[model].dropna().apply(lambda x: float(x.split('|')[0])).idxmax()\n",
    "            best_r2_rmse = df[model][best_row]\n",
    "            best_per_model[count][model] = {\n",
    "                \"Feature_Set\": best_row,\n",
    "                \"R2 | RMSE\": best_r2_rmse\n",
    "            }\n",
    "        except Exception as e:\n",
    "            best_per_model[count][model] = {\n",
    "                \"Feature_Set\": None,\n",
    "                \"R2 | RMSE\": None,\n",
    "                \"Error\": str(e)\n",
    "            }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "750f7c36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.697302Z",
     "iopub.status.busy": "2025-06-29T09:11:18.696897Z",
     "iopub.status.idle": "2025-06-29T09:11:18.706439Z",
     "shell.execute_reply": "2025-06-29T09:11:18.705481Z"
    },
    "papermill": {
     "duration": 0.04589,
     "end_time": "2025-06-29T09:11:18.708274",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.662384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "summary_rows = []\n",
    "\n",
    "for count, models in best_per_model.items():\n",
    "    for model_name, info in models.items():\n",
    "        summary_rows.append({\n",
    "            \"Feature_Count\": count,\n",
    "            \"Model\": model_name,\n",
    "            \"Best_Feature_Set\": info[\"Feature_Set\"],\n",
    "            \"R2 | RMSE\": info[\"R2 | RMSE\"]\n",
    "        })\n",
    "\n",
    "summary_df = pd.DataFrame(summary_rows)\n",
    "summary_df = summary_df.sort_values(by=[\"Feature_Count\", \"Model\"]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d42a585a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.772625Z",
     "iopub.status.busy": "2025-06-29T09:11:18.771680Z",
     "iopub.status.idle": "2025-06-29T09:11:18.786654Z",
     "shell.execute_reply": "2025-06-29T09:11:18.785813Z"
    },
    "papermill": {
     "duration": 0.045558,
     "end_time": "2025-06-29T09:11:18.787922",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.742364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature_Count</th>\n",
       "      <th>Model</th>\n",
       "      <th>Best_Feature_Set</th>\n",
       "      <th>R2 | RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Crop_Encoded</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>Crop_Encoded</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Season_Encoded</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Crop_Encoded</td>\n",
       "      <td>0.528 | 2.863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>Crop_Encoded</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Season_Encoded</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.901 | 1.309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.826 | 1.736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Season_Encoded, Crop_Encoded</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Annual_Rainfall, Crop_Encoded</td>\n",
       "      <td>0.747 | 2.097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.902 | 1.307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Season_Encoded, Crop_Encoded</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Season_Encoded, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.926 | 1.135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>Season_Encoded, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.859 | 1.563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>3</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Annual_Rainfall, Season_Encoded, Crop_Encoded</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>3</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Annual_Rainfall, PC2, Crop_Encoded</td>\n",
       "      <td>0.776 | 1.972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>3</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>PC1, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.934 | 1.071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Annual_Rainfall, Season_Encoded, Crop_Encoded</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Crop_Year, Season_Encoded, State_Encoded, Crop...</td>\n",
       "      <td>0.955 | 0.883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>PC1, PC2, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.871 | 1.497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, Season_Encoded, Cr...</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Annual_Rainfall, PC1, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.803 | 1.848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>Crop_Year, Season_Encoded, State_Encoded, Crop...</td>\n",
       "      <td>0.959 | 0.839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, Season_Encoded, Cr...</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>5</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.949 | 0.943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>5</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>PC1, PC2, Season_Encoded, State_Encoded, Crop_...</td>\n",
       "      <td>0.884 | 1.419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>5</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC2, Season_Encode...</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>5</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Annual_Rainfall, PC1, Season_Encoded, State_En...</td>\n",
       "      <td>0.837 | 1.682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>5</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded</td>\n",
       "      <td>0.962 | 0.809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>5</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC2, Season_Encode...</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>6</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Crop_Year, PC1, PC2, Season_Encoded, State_Enc...</td>\n",
       "      <td>0.958 | 0.853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>6</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>Crop_Year, PC1, PC2, Season_Encoded, State_Enc...</td>\n",
       "      <td>0.889 | 1.389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>6</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC2, Season_Encode...</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>6</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Annual_Rainfall, PC1, PC2, Season_Encoded, Sta...</td>\n",
       "      <td>0.835 | 1.695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>6</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>Crop_Year, PC1, PC2, Season_Encoded, State_Enc...</td>\n",
       "      <td>0.965 | 0.779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>6</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC2, Season_Encode...</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>7</td>\n",
       "      <td>DecisionTree</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.923 | 1.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>7</td>\n",
       "      <td>GradientBoosting</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.886 | 1.406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>7</td>\n",
       "      <td>LinearRegression</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>7</td>\n",
       "      <td>MLPRegressor</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.847 | 1.629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>7</td>\n",
       "      <td>RandomForest</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.951 | 0.921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>7</td>\n",
       "      <td>Ridge</td>\n",
       "      <td>Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Feature_Count             Model  \\\n",
       "0               1      DecisionTree   \n",
       "1               1  GradientBoosting   \n",
       "2               1  LinearRegression   \n",
       "3               1      MLPRegressor   \n",
       "4               1      RandomForest   \n",
       "5               1             Ridge   \n",
       "6               2      DecisionTree   \n",
       "7               2  GradientBoosting   \n",
       "8               2  LinearRegression   \n",
       "9               2      MLPRegressor   \n",
       "10              2      RandomForest   \n",
       "11              2             Ridge   \n",
       "12              3      DecisionTree   \n",
       "13              3  GradientBoosting   \n",
       "14              3  LinearRegression   \n",
       "15              3      MLPRegressor   \n",
       "16              3      RandomForest   \n",
       "17              3             Ridge   \n",
       "18              4      DecisionTree   \n",
       "19              4  GradientBoosting   \n",
       "20              4  LinearRegression   \n",
       "21              4      MLPRegressor   \n",
       "22              4      RandomForest   \n",
       "23              4             Ridge   \n",
       "24              5      DecisionTree   \n",
       "25              5  GradientBoosting   \n",
       "26              5  LinearRegression   \n",
       "27              5      MLPRegressor   \n",
       "28              5      RandomForest   \n",
       "29              5             Ridge   \n",
       "30              6      DecisionTree   \n",
       "31              6  GradientBoosting   \n",
       "32              6  LinearRegression   \n",
       "33              6      MLPRegressor   \n",
       "34              6      RandomForest   \n",
       "35              6             Ridge   \n",
       "36              7      DecisionTree   \n",
       "37              7  GradientBoosting   \n",
       "38              7  LinearRegression   \n",
       "39              7      MLPRegressor   \n",
       "40              7      RandomForest   \n",
       "41              7             Ridge   \n",
       "\n",
       "                                     Best_Feature_Set      R2 | RMSE  \n",
       "0                                        Crop_Encoded  0.669 | 2.397  \n",
       "1                                        Crop_Encoded  0.669 | 2.397  \n",
       "2                                      Season_Encoded  0.082 | 3.994  \n",
       "3                                        Crop_Encoded  0.528 | 2.863  \n",
       "4                                        Crop_Encoded  0.669 | 2.397  \n",
       "5                                      Season_Encoded  0.082 | 3.994  \n",
       "6                         State_Encoded, Crop_Encoded  0.901 | 1.309  \n",
       "7                         State_Encoded, Crop_Encoded  0.826 | 1.736  \n",
       "8                        Season_Encoded, Crop_Encoded  0.151 | 3.840  \n",
       "9                       Annual_Rainfall, Crop_Encoded  0.747 | 2.097  \n",
       "10                        State_Encoded, Crop_Encoded  0.902 | 1.307  \n",
       "11                       Season_Encoded, Crop_Encoded  0.151 | 3.840  \n",
       "12        Season_Encoded, State_Encoded, Crop_Encoded  0.926 | 1.135  \n",
       "13        Season_Encoded, State_Encoded, Crop_Encoded  0.859 | 1.563  \n",
       "14      Annual_Rainfall, Season_Encoded, Crop_Encoded  0.166 | 3.807  \n",
       "15                 Annual_Rainfall, PC2, Crop_Encoded  0.776 | 1.972  \n",
       "16                   PC1, State_Encoded, Crop_Encoded  0.934 | 1.071  \n",
       "17      Annual_Rainfall, Season_Encoded, Crop_Encoded  0.166 | 3.807  \n",
       "18  Crop_Year, Season_Encoded, State_Encoded, Crop...  0.955 | 0.883  \n",
       "19              PC1, PC2, State_Encoded, Crop_Encoded  0.871 | 1.497  \n",
       "20  Crop_Year, Annual_Rainfall, Season_Encoded, Cr...  0.175 | 3.786  \n",
       "21  Annual_Rainfall, PC1, State_Encoded, Crop_Encoded  0.803 | 1.848  \n",
       "22  Crop_Year, Season_Encoded, State_Encoded, Crop...  0.959 | 0.839  \n",
       "23  Crop_Year, Annual_Rainfall, Season_Encoded, Cr...  0.175 | 3.786  \n",
       "24   Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded  0.949 | 0.943  \n",
       "25  PC1, PC2, Season_Encoded, State_Encoded, Crop_...  0.884 | 1.419  \n",
       "26  Crop_Year, Annual_Rainfall, PC2, Season_Encode...  0.177 | 3.780  \n",
       "27  Annual_Rainfall, PC1, Season_Encoded, State_En...  0.837 | 1.682  \n",
       "28   Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded  0.962 | 0.809  \n",
       "29  Crop_Year, Annual_Rainfall, PC2, Season_Encode...  0.177 | 3.780  \n",
       "30  Crop_Year, PC1, PC2, Season_Encoded, State_Enc...  0.958 | 0.853  \n",
       "31  Crop_Year, PC1, PC2, Season_Encoded, State_Enc...  0.889 | 1.389  \n",
       "32  Crop_Year, Annual_Rainfall, PC2, Season_Encode...  0.179 | 3.776  \n",
       "33  Annual_Rainfall, PC1, PC2, Season_Encoded, Sta...  0.835 | 1.695  \n",
       "34  Crop_Year, PC1, PC2, Season_Encoded, State_Enc...  0.965 | 0.779  \n",
       "35  Crop_Year, Annual_Rainfall, PC2, Season_Encode...  0.179 | 3.776  \n",
       "36  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.923 | 1.154  \n",
       "37  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.886 | 1.406  \n",
       "38  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.173 | 3.789  \n",
       "39  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.847 | 1.629  \n",
       "40  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.951 | 0.921  \n",
       "41  Crop_Year, Annual_Rainfall, PC1, PC2, Season_E...  0.173 | 3.789  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "457a94ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T09:11:18.846979Z",
     "iopub.status.busy": "2025-06-29T09:11:18.846213Z",
     "iopub.status.idle": "2025-06-29T09:11:24.226124Z",
     "shell.execute_reply": "2025-06-29T09:11:24.225331Z"
    },
    "papermill": {
     "duration": 5.411265,
     "end_time": "2025-06-29T09:11:24.227550",
     "exception": false,
     "start_time": "2025-06-29T09:11:18.816285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Exported: best_models_1_features.png\n",
      "✅ Exported: best_models_2_features.png\n",
      "✅ Exported: best_models_3_features.png\n",
      "✅ Exported: best_models_4_features.png\n",
      "✅ Exported: best_models_5_features.png\n",
      "✅ Exported: best_models_6_features.png\n",
      "✅ Exported: best_models_7_features.png\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import textwrap\n",
    "\n",
    "def wrap_text(text, width=30):\n",
    "    if pd.isnull(text):\n",
    "        return \"\"\n",
    "    return \"\\n\".join(textwrap.wrap(text, width=width))\n",
    "\n",
    "def save_table_as_image(df, filename=\"table.png\", dpi=300):\n",
    "    df = df.copy()\n",
    "    df[\"Best_Feature_Set\"] = df[\"Best_Feature_Set\"].apply(lambda x: wrap_text(x, width=30))\n",
    "    \n",
    "    max_lines = df[\"Best_Feature_Set\"].apply(lambda x: x.count('\\n') + 1).max()\n",
    "    row_height = 1 + 0.2 * max_lines\n",
    "    fig, ax = plt.subplots(figsize=(15, row_height * len(df)))\n",
    "    ax.axis('off')\n",
    "\n",
    "    table = ax.table(\n",
    "        cellText=df.values,\n",
    "        colLabels=df.columns,\n",
    "        loc='center',\n",
    "        cellLoc='center'\n",
    "    )\n",
    "\n",
    "    table.auto_set_font_size(False)\n",
    "    table.set_fontsize(10)\n",
    "    table.scale(1.2, 3.0)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(filename, dpi=dpi)\n",
    "    plt.close()\n",
    "    print(f\"✅ Exported: {filename}\")\n",
    "\n",
    "for feature_count, models in best_per_model.items():\n",
    "    rows = []\n",
    "    for model, info in models.items():\n",
    "        rows.append({\n",
    "            \"Model\": model,\n",
    "            \"Best_Feature_Set\": info[\"Feature_Set\"],\n",
    "            \"R2 | RMSE\": info[\"R2 | RMSE\"]\n",
    "        })\n",
    "    df = pd.DataFrame(rows).sort_values(by=\"Model\").reset_index(drop=True)\n",
    "    filename = f\"best_models_{feature_count}_features.png\"\n",
    "    save_table_as_image(df, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3adc41f",
   "metadata": {
    "papermill": {
     "duration": 0.02765,
     "end_time": "2025-06-29T09:11:24.283517",
     "exception": false,
     "start_time": "2025-06-29T09:11:24.255867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d77ff1ff",
   "metadata": {
    "papermill": {
     "duration": 0.027206,
     "end_time": "2025-06-29T09:11:24.338809",
     "exception": false,
     "start_time": "2025-06-29T09:11:24.311603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3525502,
     "sourceId": 6147658,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 652.96139,
   "end_time": "2025-06-29T09:11:25.086689",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T09:00:32.125299",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
