{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "673e353e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-29T08:42:59.200921Z",
     "iopub.status.busy": "2025-06-29T08:42:59.200553Z",
     "iopub.status.idle": "2025-06-29T08:43:04.334722Z",
     "shell.execute_reply": "2025-06-29T08:43:04.333591Z"
    },
    "papermill": {
     "duration": 5.142158,
     "end_time": "2025-06-29T08:43:04.336599",
     "exception": false,
     "start_time": "2025-06-29T08:42:59.194441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from itertools import combinations\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from scipy.stats import zscore\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "\n",
    "from sklearn.model_selection import train_test_split, learning_curve\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from sklearn.linear_model import LinearRegression, Ridge\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.neural_network import MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba6885d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.347028Z",
     "iopub.status.busy": "2025-06-29T08:43:04.346496Z",
     "iopub.status.idle": "2025-06-29T08:43:04.357000Z",
     "shell.execute_reply": "2025-06-29T08:43:04.356056Z"
    },
    "papermill": {
     "duration": 0.017526,
     "end_time": "2025-06-29T08:43:04.358749",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.341223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "FILENAME = ''\n",
    "\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        FILENAME = os.path.join(dirname, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cbffc85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.368460Z",
     "iopub.status.busy": "2025-06-29T08:43:04.368095Z",
     "iopub.status.idle": "2025-06-29T08:43:04.632225Z",
     "shell.execute_reply": "2025-06-29T08:43:04.630863Z"
    },
    "papermill": {
     "duration": 0.270782,
     "end_time": "2025-06-29T08:43:04.633746",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.362964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rice seasons: ['Autumn' 'Summer' 'Winter' 'Kharif' 'Rabi' 'Whole Year']\n",
      "Maize seasons: ['Kharif' 'Rabi' 'Summer' 'Whole Year' 'Autumn' 'Winter']\n",
      "Potato seasons: ['Whole Year' 'Kharif' 'Rabi' 'Summer' 'Winter' 'Autumn']\n",
      "Urad seasons: ['Kharif' 'Rabi' 'Whole Year' 'Summer' 'Autumn' 'Winter']\n"
     ]
    }
   ],
   "source": [
    "dataset = pd.read_csv(FILENAME)\n",
    "dataset['Crop'] = dataset['Crop'].str.strip()\n",
    "dataset['Season'] = dataset['Season'].str.strip()\n",
    "dataset['State'] = dataset['State'].str.strip()\n",
    "\n",
    "crops_to_analyze = [\"Rice\", \"Maize\", \"Potato\", \"Urad\"]\n",
    "\n",
    "datasets = {}\n",
    "\n",
    "for crop in dataset['Crop'].unique():\n",
    "    datasets[crop] = dataset[dataset['Crop'] == crop]\n",
    "\n",
    "DATASET = {}\n",
    "\n",
    "for crop in crops_to_analyze:\n",
    "    print(f\"{crop} seasons: {datasets[crop]['Season'].unique()}\")\n",
    "    DATASET[crop] = datasets[crop]\n",
    "\n",
    "threshold = 3\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    z_scores = dataset.select_dtypes(include=[float, int]).apply(zscore)\n",
    "    DATASET[crop] = dataset[(z_scores.abs() < threshold).all(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1007dc84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.643082Z",
     "iopub.status.busy": "2025-06-29T08:43:04.642666Z",
     "iopub.status.idle": "2025-06-29T08:43:04.670091Z",
     "shell.execute_reply": "2025-06-29T08:43:04.669046Z"
    },
    "papermill": {
     "duration": 0.034115,
     "end_time": "2025-06-29T08:43:04.671858",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.637743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_scale = [\"Crop_Year\", \"Area\", \"Production\", \"Annual_Rainfall\", \"Fertilizer\", \"Pesticide\"]\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    scaler = StandardScaler()\n",
    "    \n",
    "    scaled_values = scaler.fit_transform(dataset[columns_to_scale])\n",
    "    \n",
    "    dataset_scaled = dataset.copy()\n",
    "    dataset_scaled[columns_to_scale] = scaled_values\n",
    "    \n",
    "    DATASET[crop] = dataset_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "99129cc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.681882Z",
     "iopub.status.busy": "2025-06-29T08:43:04.681509Z",
     "iopub.status.idle": "2025-06-29T08:43:04.697951Z",
     "shell.execute_reply": "2025-06-29T08:43:04.696858Z"
    },
    "papermill": {
     "duration": 0.024049,
     "end_time": "2025-06-29T08:43:04.700108",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.676059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for crop, dataset in DATASET.items():\n",
    "    dataset = dataset.copy()\n",
    "\n",
    "    season_encoder = LabelEncoder()\n",
    "    state_encoder = LabelEncoder()\n",
    "\n",
    "    dataset['Season_Encoded'] = season_encoder.fit_transform(dataset['Season'])\n",
    "    dataset['State_Encoded'] = state_encoder.fit_transform(dataset['State'])\n",
    "\n",
    "    dataset = dataset.drop(labels=['Season', 'State'], axis=1)\n",
    "    \n",
    "    DATASET[crop] = dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7c46da0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.709798Z",
     "iopub.status.busy": "2025-06-29T08:43:04.709478Z",
     "iopub.status.idle": "2025-06-29T08:43:04.770010Z",
     "shell.execute_reply": "2025-06-29T08:43:04.768840Z"
    },
    "papermill": {
     "duration": 0.067088,
     "end_time": "2025-06-29T08:43:04.771626",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.704538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features_to_pca = [\"Area\", \"Production\", \"Fertilizer\", \"Pesticide\"]\n",
    "\n",
    "for crop, dataset in DATASET.items():\n",
    "    dataset = dataset.copy()\n",
    "    \n",
    "    features = dataset[features_to_pca]\n",
    "    \n",
    "    pca = PCA(n_components=2)\n",
    "    pca_features = pca.fit_transform(features)\n",
    "    \n",
    "    dataset = dataset.drop(columns=features_to_pca)\n",
    "    \n",
    "    dataset[\"PC1\"] = pca_features[:, 0]\n",
    "    dataset[\"PC2\"] = pca_features[:, 1]\n",
    "    \n",
    "    DATASET[crop] = dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9df99f60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.781424Z",
     "iopub.status.busy": "2025-06-29T08:43:04.781125Z",
     "iopub.status.idle": "2025-06-29T08:43:04.789105Z",
     "shell.execute_reply": "2025-06-29T08:43:04.788132Z"
    },
    "papermill": {
     "duration": 0.014778,
     "end_time": "2025-06-29T08:43:04.790852",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.776074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "combined_dataset = pd.concat(DATASET.values(), ignore_index=True)\n",
    "\n",
    "crop_encoder = LabelEncoder()\n",
    "combined_dataset[\"Crop_Encoded\"] = crop_encoder.fit_transform(combined_dataset[\"Crop\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "147ce49c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.800322Z",
     "iopub.status.busy": "2025-06-29T08:43:04.799967Z",
     "iopub.status.idle": "2025-06-29T08:43:04.805188Z",
     "shell.execute_reply": "2025-06-29T08:43:04.804264Z"
    },
    "papermill": {
     "duration": 0.011614,
     "end_time": "2025-06-29T08:43:04.806704",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.795090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "models = {\n",
    "    \"LinearRegression\": LinearRegression(),\n",
    "    \"Ridge\": Ridge(),\n",
    "    \"DecisionTree\": DecisionTreeRegressor(),\n",
    "    \"RandomForest\": RandomForestRegressor(),\n",
    "    \"GradientBoosting\": GradientBoostingRegressor(),\n",
    "    \"MLPRegressor\": MLPRegressor(max_iter=500)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "62ef284c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.816222Z",
     "iopub.status.busy": "2025-06-29T08:43:04.815837Z",
     "iopub.status.idle": "2025-06-29T08:43:04.820659Z",
     "shell.execute_reply": "2025-06-29T08:43:04.819755Z"
    },
    "papermill": {
     "duration": 0.011161,
     "end_time": "2025-06-29T08:43:04.822142",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.810981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = ['Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded']\n",
    "target = 'Yield'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7a1f4c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.831395Z",
     "iopub.status.busy": "2025-06-29T08:43:04.831022Z",
     "iopub.status.idle": "2025-06-29T08:43:04.836237Z",
     "shell.execute_reply": "2025-06-29T08:43:04.835173Z"
    },
    "papermill": {
     "duration": 0.011672,
     "end_time": "2025-06-29T08:43:04.837803",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.826131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results = []\n",
    "total_combinations = sum(1 for r in range(1, len(features) + 1) for _ in combinations(features, r))\n",
    "combo_index = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "75a80621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:43:04.847421Z",
     "iopub.status.busy": "2025-06-29T08:43:04.847045Z",
     "iopub.status.idle": "2025-06-29T08:54:50.602958Z",
     "shell.execute_reply": "2025-06-29T08:54:50.601546Z"
    },
    "papermill": {
     "duration": 705.762726,
     "end_time": "2025-06-29T08:54:50.604653",
     "exception": false,
     "start_time": "2025-06-29T08:43:04.841927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[1/127] Testing feature combination: ('Crop_Year',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1622 | R²: 0.0026\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1623 | R²: 0.0026\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5809 | R²: 0.6165\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5799 | R²: 0.6168\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0496 | R²: 0.4646\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1656 | R²: 0.0010\n",
      "\n",
      "[2/127] Testing feature combination: ('Annual_Rainfall',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1498 | R²: 0.0085\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1498 | R²: 0.0085\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.7511 | R²: -0.2996\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.3003 | R²: -0.0647\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 4.1577 | R²: 0.0047\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1469 | R²: 0.0099\n",
      "\n",
      "[3/127] Testing feature combination: ('PC1',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1900 | R²: -0.0108\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1900 | R²: -0.0108\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.2241 | R²: -0.5713\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.4230 | R²: -0.1263\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.8556 | R²: 0.1441\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9702 | R²: 0.0925\n",
      "\n",
      "[4/127] Testing feature combination: ('PC2',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1612 | R²: 0.0031\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1612 | R²: 0.0031\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.8410 | R²: -0.9643\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.8704 | R²: -0.3657\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.9180 | R²: 0.1162\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0173 | R²: 0.0708\n",
      "\n",
      "[5/127] Testing feature combination: ('Season_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9936 | R²: 0.0817\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9936 | R²: 0.0818\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6389 | R²: 0.2376\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6400 | R²: 0.2372\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.6389 | R²: 0.2376\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.8506 | R²: 0.1463\n",
      "\n",
      "[6/127] Testing feature combination: ('State_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1656 | R²: 0.0010\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1656 | R²: 0.0010\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0442 | R²: 0.0583\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 4.0435 | R²: 0.0587\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 4.0387 | R²: 0.0609\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1592 | R²: 0.0040\n",
      "\n",
      "[7/127] Testing feature combination: ('Crop_Encoded',)\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0161 | R²: 0.0714\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0161 | R²: 0.0714\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3973 | R²: 0.6691\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3959 | R²: 0.6695\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3973 | R²: 0.6691\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8681 | R²: 0.5264\n",
      "\n",
      "[8/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1379 | R²: 0.0142\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1379 | R²: 0.0142\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.3885 | R²: -0.1088\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9484 | R²: 0.4995\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3488 | R²: 0.3544\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1499 | R²: 0.0085\n",
      "\n",
      "[9/127] Testing feature combination: ('Crop_Year', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1800 | R²: -0.0059\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1800 | R²: -0.0059\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.5381 | R²: -0.1857\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.7341 | R²: 0.1972\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3681 | R²: 0.3469\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0006 | R²: 0.0785\n",
      "\n",
      "[10/127] Testing feature combination: ('Crop_Year', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1520 | R²: 0.0075\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1521 | R²: 0.0075\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 5.1850 | R²: -0.5478\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9115 | R²: 0.1191\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4025 | R²: 0.3335\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.1351 | R²: 0.0156\n",
      "\n",
      "[11/127] Testing feature combination: ('Crop_Year', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9772 | R²: 0.0893\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9772 | R²: 0.0893\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0572 | R²: 0.4619\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0361 | R²: 0.4693\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0585 | R²: 0.4614\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.8649 | R²: 0.1400\n",
      "\n",
      "[12/127] Testing feature combination: ('Crop_Year', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1533 | R²: 0.0069\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1533 | R²: 0.0069\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.4668 | R²: 0.3081\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0588 | R²: 0.4613\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1465 | R²: 0.4300\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1700 | R²: -0.0011\n",
      "\n",
      "[13/127] Testing feature combination: ('Crop_Year', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0041 | R²: 0.0769\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0041 | R²: 0.0769\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5809 | R²: 0.6165\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5862 | R²: 0.6149\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5276 | R²: 0.6322\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.4663 | R²: 0.6498\n",
      "\n",
      "[14/127] Testing feature combination: ('Annual_Rainfall', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1670 | R²: 0.0003\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1670 | R²: 0.0003\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.8710 | R²: -0.3660\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9765 | R²: 0.0896\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.7667 | R²: 0.1832\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9319 | R²: 0.1099\n",
      "\n",
      "[15/127] Testing feature combination: ('Annual_Rainfall', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1400 | R²: 0.0132\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1400 | R²: 0.0132\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.5095 | R²: -0.1708\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.8250 | R²: 0.1577\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.7380 | R²: 0.1955\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9501 | R²: 0.1016\n",
      "\n",
      "[16/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9541 | R²: 0.0998\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9540 | R²: 0.0999\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.7162 | R²: -0.2806\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.9551 | R²: 0.0994\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3546 | R²: 0.3521\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7876 | R²: 0.1741\n",
      "\n",
      "[17/127] Testing feature combination: ('Annual_Rainfall', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1455 | R²: 0.0106\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1455 | R²: 0.0106\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0503 | R²: 0.0555\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6102 | R²: 0.2496\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.9589 | R²: 0.0977\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1265 | R²: 0.0196\n",
      "\n",
      "[18/127] Testing feature combination: ('Annual_Rainfall', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9986 | R²: 0.0795\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9985 | R²: 0.0795\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0831 | R²: 0.4527\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6095 | R²: 0.6079\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1405 | R²: 0.7362\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1008 | R²: 0.7459\n",
      "\n",
      "[19/127] Testing feature combination: ('PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1793 | R²: -0.0056\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1793 | R²: -0.0056\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0997 | R²: 0.0323\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3736 | R²: 0.3447\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4142 | R²: 0.3289\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.8273 | R²: 0.1566\n",
      "\n",
      "[20/127] Testing feature combination: ('PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0138 | R²: 0.0724\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0138 | R²: 0.0725\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.8324 | R²: 0.1544\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3338 | R²: 0.3601\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0682 | R²: 0.4580\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6427 | R²: 0.2360\n",
      "\n",
      "[21/127] Testing feature combination: ('PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1847 | R²: -0.0082\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1847 | R²: -0.0082\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1796 | R²: 0.4179\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6892 | R²: 0.5836\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1775 | R²: 0.4187\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.8070 | R²: 0.1656\n",
      "\n",
      "[22/127] Testing feature combination: ('PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0282 | R²: 0.0658\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0282 | R²: 0.0658\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0118 | R²: 0.4778\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5933 | R²: 0.6128\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2522 | R²: 0.7080\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.3312 | R²: 0.6871\n",
      "\n",
      "[23/127] Testing feature combination: ('PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9841 | R²: 0.0861\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9840 | R²: 0.0862\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2283 | R²: -0.0293\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.5805 | R²: 0.2619\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2133 | R²: 0.4055\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5954 | R²: 0.2557\n",
      "\n",
      "[24/127] Testing feature combination: ('PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1540 | R²: 0.0065\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1541 | R²: 0.0065\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.9585 | R²: 0.0978\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.2012 | R²: 0.4100\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.5801 | R²: 0.2621\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0898 | R²: 0.0370\n",
      "\n",
      "[25/127] Testing feature combination: ('PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0051 | R²: 0.0765\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0051 | R²: 0.0765\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5075 | R²: 0.6380\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1401 | R²: 0.7363\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8998 | R²: 0.7922\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8536 | R²: 0.5312\n",
      "\n",
      "[26/127] Testing feature combination: ('Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9847 | R²: 0.0858\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9847 | R²: 0.0859\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7263 | R²: 0.5721\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.7198 | R²: 0.5741\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0460 | R²: 0.4658\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5952 | R²: 0.2558\n",
      "\n",
      "[27/127] Testing feature combination: ('Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8404 | R²: 0.1508\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8404 | R²: 0.1509\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3454 | R²: 0.6833\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3494 | R²: 0.6822\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3450 | R²: 0.6834\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3558 | R²: 0.6805\n",
      "\n",
      "[28/127] Testing feature combination: ('State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0120 | R²: 0.0733\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0120 | R²: 0.0733\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3087 | R²: 0.9014\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.3097 | R²: 0.9012\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7361 | R²: 0.8265\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.8448 | R²: 0.5341\n",
      "\n",
      "[29/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1559 | R²: 0.0056\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1559 | R²: 0.0056\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.6776 | R²: -0.2597\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.6398 | R²: 0.2373\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.4325 | R²: 0.3216\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.9362 | R²: 0.1080\n",
      "\n",
      "[30/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1295 | R²: 0.0182\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1295 | R²: 0.0182\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.8116 | R²: -0.3329\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.7357 | R²: 0.1965\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3203 | R²: 0.3653\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 4.0038 | R²: 0.0771\n",
      "\n",
      "[31/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9353 | R²: 0.1084\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9353 | R²: 0.1084\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0798 | R²: 0.0417\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.1392 | R²: 0.4327\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8895 | R²: 0.5193\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7785 | R²: 0.1780\n",
      "\n",
      "[32/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1322 | R²: 0.0169\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1322 | R²: 0.0169\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2051 | R²: -0.0181\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3991 | R²: 0.3348\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3430 | R²: 0.3566\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.1612 | R²: 0.0031\n",
      "\n",
      "[33/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9850 | R²: 0.0857\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9850 | R²: 0.0857\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8292 | R²: 0.5392\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2816 | R²: 0.7003\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1189 | R²: 0.7415\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1158 | R²: 0.7423\n",
      "\n",
      "[34/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1706 | R²: -0.0014\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1706 | R²: -0.0014\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.3421 | R²: -0.0855\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.3157 | R²: 0.3671\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2395 | R²: 0.3958\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.8779 | R²: 0.1342\n",
      "\n",
      "[35/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9981 | R²: 0.0797\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9981 | R²: 0.0797\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.5034 | R²: 0.2934\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9406 | R²: 0.5022\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8240 | R²: 0.5408\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5346 | R²: 0.2807\n",
      "\n",
      "[36/127] Testing feature combination: ('Crop_Year', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1732 | R²: -0.0027\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1732 | R²: -0.0027\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.2288 | R²: 0.3998\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6157 | R²: 0.6061\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0244 | R²: 0.4734\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7884 | R²: 0.1737\n",
      "\n",
      "[37/127] Testing feature combination: ('Crop_Year', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1915 | R²: 0.4136\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3710 | R²: 0.6764\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2986 | R²: 0.6958\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3430 | R²: 0.6839\n",
      "\n",
      "[38/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0248 | R²: 0.0673\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9104 | R²: 0.5123\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7584 | R²: 0.5619\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7294 | R²: 0.1992\n",
      "\n",
      "[39/127] Testing feature combination: ('Crop_Year', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1432 | R²: 0.0117\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1432 | R²: 0.0117\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.8062 | R²: 0.1659\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.9490 | R²: 0.4993\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1895 | R²: 0.4143\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0975 | R²: 0.0334\n",
      "\n",
      "[40/127] Testing feature combination: ('Crop_Year', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9944 | R²: 0.0814\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9944 | R²: 0.0814\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4643 | R²: 0.6504\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8655 | R²: 0.7996\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8461 | R²: 0.8038\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.3282 | R²: 0.6879\n",
      "\n",
      "[41/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9661 | R²: 0.0944\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9661 | R²: 0.0944\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.1645 | R²: 0.0015\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0420 | R²: 0.4672\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7074 | R²: 0.5780\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6019 | R²: 0.2531\n",
      "\n",
      "[42/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8225 | R²: 0.1588\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8225 | R²: 0.1588\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5747 | R²: 0.6183\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5527 | R²: 0.6248\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3633 | R²: 0.6784\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3494 | R²: 0.6822\n",
      "\n",
      "[43/127] Testing feature combination: ('Crop_Year', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9983 | R²: 0.0796\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9983 | R²: 0.0796\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4295 | R²: 0.8824\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2635 | R²: 0.9081\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7368 | R²: 0.8263\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.2905 | R²: 0.6979\n",
      "\n",
      "[44/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1574 | R²: 0.0049\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1574 | R²: 0.0049\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.2954 | R²: -0.0623\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0328 | R²: 0.4704\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.3449 | R²: 0.3559\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7171 | R²: 0.2045\n",
      "\n",
      "[45/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9691 | R²: 0.0930\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.5634 | R²: 0.2689\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6675 | R²: 0.5903\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9202 | R²: 0.5091\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.5628 | R²: 0.2692\n",
      "\n",
      "[46/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1635 | R²: 0.0020\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1635 | R²: 0.0020\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.6359 | R²: 0.6000\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5181 | R²: 0.6349\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2030 | R²: 0.4093\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.8230 | R²: 0.1586\n",
      "\n",
      "[47/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0109 | R²: 0.0738\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0109 | R²: 0.0738\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4600 | R²: 0.6516\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8670 | R²: 0.7993\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9659 | R²: 0.7775\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0123 | R²: 0.7669\n",
      "\n",
      "[48/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9462 | R²: 0.1034\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9462 | R²: 0.1034\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6028 | R²: 0.2527\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.8568 | R²: 0.5301\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9669 | R²: 0.4932\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6102 | R²: 0.2496\n",
      "\n",
      "[49/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1355 | R²: 0.0153\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1356 | R²: 0.0153\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.0880 | R²: 0.0378\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0160 | R²: 0.4763\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.5148 | R²: 0.2888\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0605 | R²: 0.0508\n",
      "\n",
      "[50/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0840\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0840\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3131 | R²: 0.6920\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7846 | R²: 0.8166\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7630 | R²: 0.8211\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9749 | R²: 0.7755\n",
      "\n",
      "[51/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9492 | R²: 0.1021\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9492 | R²: 0.1021\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.6573 | R²: 0.2299\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.8314 | R²: 0.5384\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0807 | R²: 0.4536\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.6455 | R²: 0.2348\n",
      "\n",
      "[52/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8066 | R²: 0.1657\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8065 | R²: 0.1658\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0620 | R²: 0.4602\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5355 | R²: 0.6299\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1342 | R²: 0.7378\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0903 | R²: 0.7484\n",
      "\n",
      "[53/127] Testing feature combination: ('Annual_Rainfall', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9963 | R²: 0.0805\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9963 | R²: 0.0805\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1827 | R²: 0.7257\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7340 | R²: 0.8269\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8510 | R²: 0.8027\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0614 | R²: 0.7553\n",
      "\n",
      "[54/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0050 | R²: 0.0765\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0050 | R²: 0.0765\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1863 | R²: 0.4155\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3526 | R²: 0.6813\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6582 | R²: 0.5932\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4201 | R²: 0.3266\n",
      "\n",
      "[55/127] Testing feature combination: ('PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1741 | R²: -0.0031\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1741 | R²: -0.0031\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4117 | R²: 0.6651\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0736 | R²: 0.7525\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8590 | R²: 0.5294\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6876 | R²: 0.2171\n",
      "\n",
      "[56/127] Testing feature combination: ('PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0183 | R²: 0.0704\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0183 | R²: 0.0704\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4534 | R²: 0.8784\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1186 | R²: 0.9280\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6074 | R²: 0.8512\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.5199 | R²: 0.6344\n",
      "\n",
      "[57/127] Testing feature combination: ('PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0060 | R²: 0.0760\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0060 | R²: 0.0760\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8666 | R²: 0.7994\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5339 | R²: 0.8645\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5967 | R²: 0.6118\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.1314 | R²: 0.4355\n",
      "\n",
      "[58/127] Testing feature combination: ('PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8568 | R²: 0.1436\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8567 | R²: 0.1436\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.4992 | R²: 0.6404\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1353 | R²: 0.7375\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.1924 | R²: 0.7233\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.3094 | R²: 0.6929\n",
      "\n",
      "[59/127] Testing feature combination: ('PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0259 | R²: 0.0669\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0259 | R²: 0.0669\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2057 | R²: 0.9163\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0903 | R²: 0.9316\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7097 | R²: 0.8317\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.4671 | R²: 0.6496\n",
      "\n",
      "[60/127] Testing feature combination: ('PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9752 | R²: 0.0902\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9752 | R²: 0.0902\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8866 | R²: 0.5203\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2539 | R²: 0.7075\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.9663 | R²: 0.4934\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5551 | R²: 0.2723\n",
      "\n",
      "[61/127] Testing feature combination: ('PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8315 | R²: 0.1548\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8314 | R²: 0.1548\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0994 | R²: 0.7462\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8613 | R²: 0.8005\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9393 | R²: 0.7835\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1682 | R²: 0.7293\n",
      "\n",
      "[62/127] Testing feature combination: ('PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0011 | R²: 0.0783\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0011 | R²: 0.0783\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5293 | R²: 0.8653\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1716 | R²: 0.9210\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6459 | R²: 0.8440\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.2446 | R²: 0.7099\n",
      "\n",
      "[63/127] Testing feature combination: ('Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8347 | R²: 0.1534\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8346 | R²: 0.1534\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1351 | R²: 0.9258\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1472 | R²: 0.9242\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5630 | R²: 0.8593\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0788 | R²: 0.7512\n",
      "\n",
      "[64/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1478 | R²: 0.0095\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1478 | R²: 0.0095\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.7110 | R²: 0.2071\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0017 | R²: 0.4813\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2455 | R²: 0.3936\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.7491 | R²: 0.1907\n",
      "\n",
      "[65/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9515 | R²: 0.1010\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9515 | R²: 0.1010\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1886 | R²: 0.4146\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5211 | R²: 0.6341\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6994 | R²: 0.5805\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4532 | R²: 0.3134\n",
      "\n",
      "[66/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1512 | R²: 0.0079\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1512 | R²: 0.0079\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.0449 | R²: 0.4662\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.5383 | R²: 0.6291\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.1653 | R²: 0.4231\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.7830 | R²: 0.1760\n",
      "\n",
      "[67/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9979 | R²: 0.0798\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9978 | R²: 0.0798\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1466 | R²: 0.7347\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.6777 | R²: 0.8380\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9564 | R²: 0.7796\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9491 | R²: 0.7813\n",
      "\n",
      "[68/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9290 | R²: 0.1113\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9289 | R²: 0.1113\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.7542 | R²: 0.1885\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6316 | R²: 0.6013\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7074 | R²: 0.5780\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5968 | R²: 0.2552\n",
      "\n",
      "[69/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1237 | R²: 0.0210\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1237 | R²: 0.0209\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 4.3500 | R²: -0.0895\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 3.0786 | R²: 0.4543\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.2737 | R²: 0.3830\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 4.0468 | R²: 0.0571\n",
      "\n",
      "[70/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9766 | R²: 0.0895\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9766 | R²: 0.0895\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.1315 | R²: 0.7384\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5749 | R²: 0.8572\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7139 | R²: 0.8309\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9712 | R²: 0.7763\n",
      "\n",
      "[71/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9288 | R²: 0.1113\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9288 | R²: 0.1113\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.5940 | R²: 0.2563\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.6068 | R²: 0.6088\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7472 | R²: 0.5655\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.5561 | R²: 0.2719\n",
      "\n",
      "[72/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7861 | R²: 0.1747\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7860 | R²: 0.1747\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7721 | R²: 0.5576\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1656 | R²: 0.7300\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.0689 | R²: 0.7536\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.0521 | R²: 0.7576\n",
      "\n",
      "[73/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9815 | R²: 0.0873\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9815 | R²: 0.0873\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8788 | R²: 0.7968\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5604 | R²: 0.8598\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8440 | R²: 0.8042\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9880 | R²: 0.7725\n",
      "\n",
      "[74/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9907 | R²: 0.0831\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9907 | R²: 0.0831\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.9340 | R²: 0.5044\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0556 | R²: 0.7567\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5372 | R²: 0.6294\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.3234 | R²: 0.3641\n",
      "\n",
      "[75/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1640 | R²: 0.0017\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1640 | R²: 0.0017\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8005 | R²: 0.5485\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0090 | R²: 0.7676\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.8190 | R²: 0.5425\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6277 | R²: 0.2423\n",
      "\n",
      "[76/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0077 | R²: 0.0753\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0077 | R²: 0.0753\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2584 | R²: 0.9088\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9980 | R²: 0.9427\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6049 | R²: 0.8517\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1637 | R²: 0.7305\n",
      "\n",
      "[77/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9884 | R²: 0.0842\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9884 | R²: 0.0842\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0307 | R²: 0.7626\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5932 | R²: 0.8539\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4091 | R²: 0.6658\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.0649 | R²: 0.4592\n",
      "\n",
      "[78/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8391 | R²: 0.1514\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8391 | R²: 0.1515\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.5595 | R²: 0.6228\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0713 | R²: 0.7530\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.2125 | R²: 0.7182\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.2710 | R²: 0.7031\n",
      "\n",
      "[79/127] Testing feature combination: ('Crop_Year', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0125 | R²: 0.0730\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0125 | R²: 0.0731\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1952 | R²: 0.9178\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9361 | R²: 0.9495\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7095 | R²: 0.8318\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.2337 | R²: 0.7127\n",
      "\n",
      "[80/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9581 | R²: 0.0980\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9581 | R²: 0.0980\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 3.1523 | R²: 0.4279\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0851 | R²: 0.7497\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6094 | R²: 0.6080\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.4293 | R²: 0.3229\n",
      "\n",
      "[81/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8150 | R²: 0.1621\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8149 | R²: 0.1621\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2403 | R²: 0.7110\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.6074 | R²: 0.8512\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8065 | R²: 0.8121\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1675 | R²: 0.7295\n",
      "\n",
      "[82/127] Testing feature combination: ('Crop_Year', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9888 | R²: 0.0839\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9889 | R²: 0.0839\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4547 | R²: 0.8782\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8705 | R²: 0.9564\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5167 | R²: 0.8676\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.2670 | R²: 0.7041\n",
      "\n",
      "[83/127] Testing feature combination: ('Crop_Year', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8146 | R²: 0.1622\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8146 | R²: 0.1622\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9009 | R²: 0.9533\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8135 | R²: 0.9619\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6051 | R²: 0.8517\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 2.1159 | R²: 0.7423\n",
      "\n",
      "[84/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9616 | R²: 0.0964\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9616 | R²: 0.0964\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8447 | R²: 0.5341\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.2548 | R²: 0.7073\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6050 | R²: 0.6093\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.3440 | R²: 0.3562\n",
      "\n",
      "[85/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1539 | R²: 0.0066\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1539 | R²: 0.0066\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7065 | R²: 0.5783\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0367 | R²: 0.7612\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0697 | R²: 0.4575\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.6068 | R²: 0.2510\n",
      "\n",
      "[86/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0017 | R²: 0.0780\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0017 | R²: 0.0780\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2613 | R²: 0.9084\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0886 | R²: 0.9318\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5918 | R²: 0.8541\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8519 | R²: 0.8025\n",
      "\n",
      "[87/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9645 | R²: 0.0951\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9644 | R²: 0.0951\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2653 | R²: 0.7046\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8916 | R²: 0.7940\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.6217 | R²: 0.6043\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.0968 | R²: 0.4479\n",
      "\n",
      "[88/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8187 | R²: 0.1604\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8187 | R²: 0.1604\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3379 | R²: 0.6853\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7013 | R²: 0.8333\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9501 | R²: 0.7810\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9842 | R²: 0.7733\n",
      "\n",
      "[89/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0095 | R²: 0.0745\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0094 | R²: 0.0745\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.6708 | R²: 0.8393\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.3173 | R²: 0.9001\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7175 | R²: 0.8302\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.8819 | R²: 0.7961\n",
      "\n",
      "[90/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9413 | R²: 0.1057\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9413 | R²: 0.1057\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.7644 | R²: 0.5600\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.3149 | R²: 0.6915\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.7990 | R²: 0.5489\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.5737 | R²: 0.2647\n",
      "\n",
      "[91/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7989 | R²: 0.1691\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7989 | R²: 0.1691\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2556 | R²: 0.7071\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.6803 | R²: 0.8374\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7665 | R²: 0.8203\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9247 | R²: 0.7867\n",
      "\n",
      "[92/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9866 | R²: 0.0850\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9866 | R²: 0.0850\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5867 | R²: 0.8551\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2414 | R²: 0.9113\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6089 | R²: 0.8510\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9460 | R²: 0.7820\n",
      "\n",
      "[93/127] Testing feature combination: ('Annual_Rainfall', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8038 | R²: 0.1670\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8037 | R²: 0.1670\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9758 | R²: 0.7752\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5789 | R²: 0.8565\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.8018 | R²: 0.8131\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9215 | R²: 0.7874\n",
      "\n",
      "[94/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9973 | R²: 0.0801\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9973 | R²: 0.0801\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.8387 | R²: 0.8053\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.4190 | R²: 0.8841\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3936 | R²: 0.6702\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.0568 | R²: 0.4620\n",
      "\n",
      "[95/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8488 | R²: 0.1471\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8488 | R²: 0.1471\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.3009 | R²: 0.9026\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9954 | R²: 0.9430\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6113 | R²: 0.8505\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.0035 | R²: 0.7689\n",
      "\n",
      "[96/127] Testing feature combination: ('PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0714\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0162 | R²: 0.0713\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.0221 | R²: 0.9399\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9076 | R²: 0.9526\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4966 | R²: 0.8710\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1986 | R²: 0.7217\n",
      "\n",
      "[97/127] Testing feature combination: ('PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8521 | R²: 0.1457\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8520 | R²: 0.1457\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1672 | R²: 0.9216\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9671 | R²: 0.9462\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5132 | R²: 0.8682\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9088 | R²: 0.7902\n",
      "\n",
      "[98/127] Testing feature combination: ('PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8258 | R²: 0.1573\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8258 | R²: 0.1573\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2817 | R²: 0.9054\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1137 | R²: 0.9286\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5882 | R²: 0.8548\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.0022 | R²: 0.7692\n",
      "\n",
      "[99/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9455 | R²: 0.1038\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9455 | R²: 0.1038\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.8264 | R²: 0.5401\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.0770 | R²: 0.7516\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4974 | R²: 0.6409\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.2456 | R²: 0.3935\n",
      "\n",
      "[100/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.1430 | R²: 0.0118\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.1431 | R²: 0.0117\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.6404 | R²: 0.5986\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1560 | R²: 0.7324\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 3.0576 | R²: 0.4617\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.5451 | R²: 0.2764\n",
      "\n",
      "[101/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9900 | R²: 0.0834\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9900 | R²: 0.0834\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2849 | R²: 0.9050\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9614 | R²: 0.9468\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5642 | R²: 0.8591\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8503 | R²: 0.8029\n",
      "\n",
      "[102/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9454 | R²: 0.1038\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9453 | R²: 0.1038\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3916 | R²: 0.6707\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.8824 | R²: 0.7960\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5929 | R²: 0.6129\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 3.0513 | R²: 0.4640\n",
      "\n",
      "[103/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7991 | R²: 0.1690\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7990 | R²: 0.1691\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2531 | R²: 0.7077\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.5954 | R²: 0.8535\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.9137 | R²: 0.7892\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9385 | R²: 0.7837\n",
      "\n",
      "[104/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9953 | R²: 0.0810\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9953 | R²: 0.0810\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5325 | R²: 0.8648\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1719 | R²: 0.9209\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7027 | R²: 0.8331\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8886 | R²: 0.7946\n",
      "\n",
      "[105/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9224 | R²: 0.1142\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9224 | R²: 0.1142\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.9407 | R²: 0.5021\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 2.1574 | R²: 0.7320\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.5719 | R²: 0.6192\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 3.5731 | R²: 0.2650\n",
      "\n",
      "[106/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7798 | R²: 0.1774\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7798 | R²: 0.1774\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.2406 | R²: 0.7110\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.4285 | R²: 0.8825\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6794 | R²: 0.8376\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8521 | R²: 0.8025\n",
      "\n",
      "[107/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9732 | R²: 0.0911\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9732 | R²: 0.0911\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5746 | R²: 0.8573\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0623 | R²: 0.9350\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5748 | R²: 0.8572\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.8632 | R²: 0.8001\n",
      "\n",
      "[108/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7818 | R²: 0.1766\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7817 | R²: 0.1766\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5866 | R²: 0.8551\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2646 | R²: 0.9079\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.7469 | R²: 0.8243\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.8257 | R²: 0.8081\n",
      "\n",
      "[109/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9812 | R²: 0.0875\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9812 | R²: 0.0875\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9530 | R²: 0.7804\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.4566 | R²: 0.8778\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3243 | R²: 0.6890\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.8548 | R²: 0.5308\n",
      "\n",
      "[110/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1472 | R²: 0.9242\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9190 | R²: 0.9514\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5667 | R²: 0.8587\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.9197 | R²: 0.7878\n",
      "\n",
      "[111/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0042 | R²: 0.0769\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0043 | R²: 0.0769\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9356 | R²: 0.9496\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8404 | R²: 0.9593\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4287 | R²: 0.8825\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.1159 | R²: 0.7422\n",
      "\n",
      "[112/127] Testing feature combination: ('Crop_Year', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8326 | R²: 0.1543\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.8937 | R²: 0.9540\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8608 | R²: 0.9573\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4910 | R²: 0.8720\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8908 | R²: 0.7942\n",
      "\n",
      "[113/127] Testing feature combination: ('Crop_Year', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8073 | R²: 0.1654\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8073 | R²: 0.1654\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4020 | R²: 0.8868\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8499 | R²: 0.9584\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5363 | R²: 0.8641\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.9747 | R²: 0.7755\n",
      "\n",
      "[114/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9569 | R²: 0.0986\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9569 | R²: 0.0986\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.0809 | R²: 0.7507\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.7353 | R²: 0.8266\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.4672 | R²: 0.6495\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.9441 | R²: 0.5010\n",
      "\n",
      "[115/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8115 | R²: 0.1636\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8115 | R²: 0.1636\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2685 | R²: 0.9074\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0257 | R²: 0.9394\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5487 | R²: 0.8619\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8169 | R²: 0.8099\n",
      "\n",
      "[116/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 4.0003 | R²: 0.0787\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 4.0003 | R²: 0.0787\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1727 | R²: 0.9208\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0226 | R²: 0.9398\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4695 | R²: 0.8757\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.7156 | R²: 0.8305\n",
      "\n",
      "[117/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8161 | R²: 0.1616\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8160 | R²: 0.1616\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5406 | R²: 0.8634\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2332 | R²: 0.9124\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6307 | R²: 0.8469\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.6971 | R²: 0.8342\n",
      "\n",
      "[118/127] Testing feature combination: ('Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7961 | R²: 0.1703\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7961 | R²: 0.1704\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.9513 | R²: 0.7808\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.2019 | R²: 0.9168\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6115 | R²: 0.8505\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7904 | R²: 0.8154\n",
      "\n",
      "[119/127] Testing feature combination: ('PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8443 | R²: 0.1491\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8443 | R²: 0.1491\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9809 | R²: 0.9446\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.8521 | R²: 0.9582\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4182 | R²: 0.8842\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8700 | R²: 0.7987\n",
      "\n",
      "[120/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9393 | R²: 0.1066\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9393 | R²: 0.1066\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 2.3334 | R²: 0.6865\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.6364 | R²: 0.8458\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 2.3134 | R²: 0.6919\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 2.9101 | R²: 0.5124\n",
      "\n",
      "[121/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7933 | R²: 0.1716\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7933 | R²: 0.1716\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2924 | R²: 0.9038\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9499 | R²: 0.9480\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4771 | R²: 0.8744\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8094 | R²: 0.8115\n",
      "\n",
      "[122/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.9876 | R²: 0.0845\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.9876 | R²: 0.0845\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.2205 | R²: 0.9142\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9378 | R²: 0.9494\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4833 | R²: 0.8733\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.7595 | R²: 0.8218\n",
      "\n",
      "[123/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7951 | R²: 0.1708\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7950 | R²: 0.1708\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.4653 | R²: 0.8764\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.1109 | R²: 0.9289\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.6180 | R²: 0.8493\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.7003 | R²: 0.8336\n",
      "\n",
      "[124/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7756 | R²: 0.1793\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7756 | R²: 0.1793\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.5956 | R²: 0.8534\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0500 | R²: 0.9365\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.5689 | R²: 0.8583\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.7071 | R²: 0.8322\n",
      "\n",
      "[125/127] Testing feature combination: ('Crop_Year', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8264 | R²: 0.1571\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8263 | R²: 0.1571\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 0.9167 | R²: 0.9516\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.7713 | R²: 0.9658\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.3873 | R²: 0.8892\n",
      "  → Training model: MLPRegressor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ✔ Done | RMSE: 1.8768 | R²: 0.7972\n",
      "\n",
      "[126/127] Testing feature combination: ('Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.8089 | R²: 0.1647\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.8089 | R²: 0.1647\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.1827 | R²: 0.9195\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 1.0032 | R²: 0.9421\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4536 | R²: 0.8783\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.5997 | R²: 0.8527\n",
      "\n",
      "[127/127] Testing feature combination: ('Crop_Year', 'Annual_Rainfall', 'PC1', 'PC2', 'Season_Encoded', 'State_Encoded', 'Crop_Encoded')\n",
      "  → Training model: LinearRegression\n",
      "    ✔ Done | RMSE: 3.7894 | R²: 0.1733\n",
      "  → Training model: Ridge\n",
      "    ✔ Done | RMSE: 3.7894 | R²: 0.1733\n",
      "  → Training model: DecisionTree\n",
      "    ✔ Done | RMSE: 1.0734 | R²: 0.9337\n",
      "  → Training model: RandomForest\n",
      "    ✔ Done | RMSE: 0.9420 | R²: 0.9489\n",
      "  → Training model: GradientBoosting\n",
      "    ✔ Done | RMSE: 1.4065 | R²: 0.8861\n",
      "  → Training model: MLPRegressor\n",
      "    ✔ Done | RMSE: 1.6391 | R²: 0.8453\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "for r in range(1, len(features) + 1):\n",
    "    for combo in combinations(features, r):\n",
    "        print(f\"\\n[{combo_index}/{total_combinations}] Testing feature combination: {combo}\")\n",
    "        combo_index += 1\n",
    "\n",
    "        X_subset = combined_dataset[list(combo)]\n",
    "        y = combined_dataset[target]\n",
    "\n",
    "        # Split\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X_subset, y, test_size=0.2, random_state=42)\n",
    "\n",
    "        for name, model in models.items():\n",
    "            print(f\"  → Training model: {name}\")\n",
    "            try:\n",
    "                model.fit(X_train, y_train)\n",
    "                y_pred = model.predict(X_test)\n",
    "\n",
    "                rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "                r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "                print(f\"    ✔ Done | RMSE: {rmse:.4f} | R²: {r2:.4f}\")\n",
    "\n",
    "                results.append({\n",
    "                    \"Model\": name,\n",
    "                    \"Features\": combo,\n",
    "                    \"RMSE\": rmse,\n",
    "                    \"R2\": r2\n",
    "                })\n",
    "            except Exception as e:\n",
    "                print(f\"    ✘ Failed: {e}\")\n",
    "                results.append({\n",
    "                    \"Model\": name,\n",
    "                    \"Features\": combo,\n",
    "                    \"Error\": str(e)\n",
    "                })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "48fce814",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:50.660034Z",
     "iopub.status.busy": "2025-06-29T08:54:50.659697Z",
     "iopub.status.idle": "2025-06-29T08:54:50.665827Z",
     "shell.execute_reply": "2025-06-29T08:54:50.664943Z"
    },
    "papermill": {
     "duration": 0.033967,
     "end_time": "2025-06-29T08:54:50.667228",
     "exception": false,
     "start_time": "2025-06-29T08:54:50.633261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "results_df = pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "aae8edb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:50.721066Z",
     "iopub.status.busy": "2025-06-29T08:54:50.720698Z",
     "iopub.status.idle": "2025-06-29T08:54:50.769868Z",
     "shell.execute_reply": "2025-06-29T08:54:50.768765Z"
    },
    "papermill": {
     "duration": 0.077808,
     "end_time": "2025-06-29T08:54:50.771684",
     "exception": false,
     "start_time": "2025-06-29T08:54:50.693876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "\n",
    "grouped_results = defaultdict(pd.DataFrame)\n",
    "\n",
    "valid_results = results_df[~results_df[\"R2\"].isnull()]\n",
    "\n",
    "valid_results[\"Feature_Count\"] = valid_results[\"Features\"].apply(len)\n",
    "\n",
    "valid_results[\"R2_RMSE\"] = valid_results.apply(\n",
    "    lambda row: f\"{row['R2']:.3f} | {row['RMSE']:.3f}\", axis=1\n",
    ")\n",
    "\n",
    "valid_results[\"Feature_Set\"] = valid_results[\"Features\"].apply(lambda x: \", \".join(x))\n",
    "\n",
    "for feature_count in sorted(valid_results[\"Feature_Count\"].unique()):\n",
    "    subset = valid_results[valid_results[\"Feature_Count\"] == feature_count]\n",
    "\n",
    "    pivot_df = subset.pivot(index=\"Feature_Set\", columns=\"Model\", values=\"R2_RMSE\")\n",
    "\n",
    "    grouped_results[feature_count] = pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1818472d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:50.825427Z",
     "iopub.status.busy": "2025-06-29T08:54:50.825094Z",
     "iopub.status.idle": "2025-06-29T08:54:50.897532Z",
     "shell.execute_reply": "2025-06-29T08:54:50.896617Z"
    },
    "papermill": {
     "duration": 0.101391,
     "end_time": "2025-06-29T08:54:50.899088",
     "exception": false,
     "start_time": "2025-06-29T08:54:50.797697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 1 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall</th>\n",
       "      <td>-0.300 | 4.751</td>\n",
       "      <td>0.005 | 4.158</td>\n",
       "      <td>0.009 | 4.150</td>\n",
       "      <td>0.010 | 4.147</td>\n",
       "      <td>-0.065 | 4.300</td>\n",
       "      <td>0.009 | 4.150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Encoded</th>\n",
       "      <td>0.669 | 2.397</td>\n",
       "      <td>0.669 | 2.397</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.526 | 2.868</td>\n",
       "      <td>0.670 | 2.396</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year</th>\n",
       "      <td>0.617 | 2.581</td>\n",
       "      <td>0.465 | 3.050</td>\n",
       "      <td>0.003 | 4.162</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "      <td>0.617 | 2.580</td>\n",
       "      <td>0.003 | 4.162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1</th>\n",
       "      <td>-0.571 | 5.224</td>\n",
       "      <td>0.144 | 3.856</td>\n",
       "      <td>-0.011 | 4.190</td>\n",
       "      <td>0.092 | 3.970</td>\n",
       "      <td>-0.126 | 4.423</td>\n",
       "      <td>-0.011 | 4.190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2</th>\n",
       "      <td>-0.964 | 5.841</td>\n",
       "      <td>0.116 | 3.918</td>\n",
       "      <td>0.003 | 4.161</td>\n",
       "      <td>0.071 | 4.017</td>\n",
       "      <td>-0.366 | 4.870</td>\n",
       "      <td>0.003 | 4.161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded</th>\n",
       "      <td>0.238 | 3.639</td>\n",
       "      <td>0.238 | 3.639</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "      <td>0.146 | 3.851</td>\n",
       "      <td>0.237 | 3.640</td>\n",
       "      <td>0.082 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State_Encoded</th>\n",
       "      <td>0.058 | 4.044</td>\n",
       "      <td>0.061 | 4.039</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "      <td>0.004 | 4.159</td>\n",
       "      <td>0.059 | 4.043</td>\n",
       "      <td>0.001 | 4.166</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model              DecisionTree GradientBoosting LinearRegression  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall  -0.300 | 4.751    0.005 | 4.158    0.009 | 4.150   \n",
       "Crop_Encoded      0.669 | 2.397    0.669 | 2.397    0.071 | 4.016   \n",
       "Crop_Year         0.617 | 2.581    0.465 | 3.050    0.003 | 4.162   \n",
       "PC1              -0.571 | 5.224    0.144 | 3.856   -0.011 | 4.190   \n",
       "PC2              -0.964 | 5.841    0.116 | 3.918    0.003 | 4.161   \n",
       "Season_Encoded    0.238 | 3.639    0.238 | 3.639    0.082 | 3.994   \n",
       "State_Encoded     0.058 | 4.044    0.061 | 4.039    0.001 | 4.166   \n",
       "\n",
       "Model             MLPRegressor    RandomForest           Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall  0.010 | 4.147  -0.065 | 4.300   0.009 | 4.150  \n",
       "Crop_Encoded     0.526 | 2.868   0.670 | 2.396   0.071 | 4.016  \n",
       "Crop_Year        0.001 | 4.166   0.617 | 2.580   0.003 | 4.162  \n",
       "PC1              0.092 | 3.970  -0.126 | 4.423  -0.011 | 4.190  \n",
       "PC2              0.071 | 4.017  -0.366 | 4.870   0.003 | 4.161  \n",
       "Season_Encoded   0.146 | 3.851   0.237 | 3.640   0.082 | 3.994  \n",
       "State_Encoded    0.004 | 4.159   0.059 | 4.043   0.001 | 4.166  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 2 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Crop_Encoded</th>\n",
       "      <td>0.453 | 3.083</td>\n",
       "      <td>0.736 | 2.140</td>\n",
       "      <td>0.079 | 3.999</td>\n",
       "      <td>0.746 | 2.101</td>\n",
       "      <td>0.608 | 2.610</td>\n",
       "      <td>0.079 | 3.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1</th>\n",
       "      <td>-0.366 | 4.871</td>\n",
       "      <td>0.183 | 3.767</td>\n",
       "      <td>0.000 | 4.167</td>\n",
       "      <td>0.110 | 3.932</td>\n",
       "      <td>0.090 | 3.977</td>\n",
       "      <td>0.000 | 4.167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2</th>\n",
       "      <td>-0.171 | 4.510</td>\n",
       "      <td>0.196 | 3.738</td>\n",
       "      <td>0.013 | 4.140</td>\n",
       "      <td>0.102 | 3.950</td>\n",
       "      <td>0.158 | 3.825</td>\n",
       "      <td>0.013 | 4.140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded</th>\n",
       "      <td>-0.281 | 4.716</td>\n",
       "      <td>0.352 | 3.355</td>\n",
       "      <td>0.100 | 3.954</td>\n",
       "      <td>0.174 | 3.788</td>\n",
       "      <td>0.099 | 3.955</td>\n",
       "      <td>0.100 | 3.954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, State_Encoded</th>\n",
       "      <td>0.056 | 4.050</td>\n",
       "      <td>0.098 | 3.959</td>\n",
       "      <td>0.011 | 4.145</td>\n",
       "      <td>0.020 | 4.127</td>\n",
       "      <td>0.250 | 3.610</td>\n",
       "      <td>0.011 | 4.145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall</th>\n",
       "      <td>-0.109 | 4.388</td>\n",
       "      <td>0.354 | 3.349</td>\n",
       "      <td>0.014 | 4.138</td>\n",
       "      <td>0.008 | 4.150</td>\n",
       "      <td>0.500 | 2.948</td>\n",
       "      <td>0.014 | 4.138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Crop_Encoded</th>\n",
       "      <td>0.617 | 2.581</td>\n",
       "      <td>0.632 | 2.528</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "      <td>0.650 | 2.466</td>\n",
       "      <td>0.615 | 2.586</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1</th>\n",
       "      <td>-0.186 | 4.538</td>\n",
       "      <td>0.347 | 3.368</td>\n",
       "      <td>-0.006 | 4.180</td>\n",
       "      <td>0.079 | 4.001</td>\n",
       "      <td>0.197 | 3.734</td>\n",
       "      <td>-0.006 | 4.180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2</th>\n",
       "      <td>-0.548 | 5.185</td>\n",
       "      <td>0.333 | 3.402</td>\n",
       "      <td>0.007 | 4.152</td>\n",
       "      <td>0.016 | 4.135</td>\n",
       "      <td>0.119 | 3.912</td>\n",
       "      <td>0.007 | 4.152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded</th>\n",
       "      <td>0.462 | 3.057</td>\n",
       "      <td>0.461 | 3.058</td>\n",
       "      <td>0.089 | 3.977</td>\n",
       "      <td>0.140 | 3.865</td>\n",
       "      <td>0.469 | 3.036</td>\n",
       "      <td>0.089 | 3.977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, State_Encoded</th>\n",
       "      <td>0.308 | 3.467</td>\n",
       "      <td>0.430 | 3.146</td>\n",
       "      <td>0.007 | 4.153</td>\n",
       "      <td>-0.001 | 4.170</td>\n",
       "      <td>0.461 | 3.059</td>\n",
       "      <td>0.007 | 4.153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Crop_Encoded</th>\n",
       "      <td>0.478 | 3.012</td>\n",
       "      <td>0.708 | 2.252</td>\n",
       "      <td>0.066 | 4.028</td>\n",
       "      <td>0.687 | 2.331</td>\n",
       "      <td>0.613 | 2.593</td>\n",
       "      <td>0.066 | 4.028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2</th>\n",
       "      <td>0.032 | 4.100</td>\n",
       "      <td>0.329 | 3.414</td>\n",
       "      <td>-0.006 | 4.179</td>\n",
       "      <td>0.157 | 3.827</td>\n",
       "      <td>0.345 | 3.374</td>\n",
       "      <td>-0.006 | 4.179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded</th>\n",
       "      <td>0.154 | 3.832</td>\n",
       "      <td>0.458 | 3.068</td>\n",
       "      <td>0.072 | 4.014</td>\n",
       "      <td>0.236 | 3.643</td>\n",
       "      <td>0.360 | 3.334</td>\n",
       "      <td>0.072 | 4.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, State_Encoded</th>\n",
       "      <td>0.418 | 3.180</td>\n",
       "      <td>0.419 | 3.177</td>\n",
       "      <td>-0.008 | 4.185</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "      <td>0.584 | 2.689</td>\n",
       "      <td>-0.008 | 4.185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Crop_Encoded</th>\n",
       "      <td>0.638 | 2.507</td>\n",
       "      <td>0.792 | 1.900</td>\n",
       "      <td>0.076 | 4.005</td>\n",
       "      <td>0.531 | 2.854</td>\n",
       "      <td>0.736 | 2.140</td>\n",
       "      <td>0.076 | 4.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded</th>\n",
       "      <td>-0.029 | 4.228</td>\n",
       "      <td>0.406 | 3.213</td>\n",
       "      <td>0.086 | 3.984</td>\n",
       "      <td>0.256 | 3.595</td>\n",
       "      <td>0.262 | 3.581</td>\n",
       "      <td>0.086 | 3.984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, State_Encoded</th>\n",
       "      <td>0.098 | 3.959</td>\n",
       "      <td>0.262 | 3.580</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "      <td>0.037 | 4.090</td>\n",
       "      <td>0.410 | 3.201</td>\n",
       "      <td>0.006 | 4.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.683 | 2.345</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "      <td>0.680 | 2.356</td>\n",
       "      <td>0.682 | 2.349</td>\n",
       "      <td>0.151 | 3.840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, State_Encoded</th>\n",
       "      <td>0.572 | 2.726</td>\n",
       "      <td>0.466 | 3.046</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "      <td>0.256 | 3.595</td>\n",
       "      <td>0.574 | 2.720</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.901 | 1.309</td>\n",
       "      <td>0.826 | 1.736</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "      <td>0.534 | 2.845</td>\n",
       "      <td>0.901 | 1.310</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                              DecisionTree GradientBoosting  \\\n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, Crop_Encoded     0.453 | 3.083    0.736 | 2.140   \n",
       "Annual_Rainfall, PC1             -0.366 | 4.871    0.183 | 3.767   \n",
       "Annual_Rainfall, PC2             -0.171 | 4.510    0.196 | 3.738   \n",
       "Annual_Rainfall, Season_Encoded  -0.281 | 4.716    0.352 | 3.355   \n",
       "Annual_Rainfall, State_Encoded    0.056 | 4.050    0.098 | 3.959   \n",
       "Crop_Year, Annual_Rainfall       -0.109 | 4.388    0.354 | 3.349   \n",
       "Crop_Year, Crop_Encoded           0.617 | 2.581    0.632 | 2.528   \n",
       "Crop_Year, PC1                   -0.186 | 4.538    0.347 | 3.368   \n",
       "Crop_Year, PC2                   -0.548 | 5.185    0.333 | 3.402   \n",
       "Crop_Year, Season_Encoded         0.462 | 3.057    0.461 | 3.058   \n",
       "Crop_Year, State_Encoded          0.308 | 3.467    0.430 | 3.146   \n",
       "PC1, Crop_Encoded                 0.478 | 3.012    0.708 | 2.252   \n",
       "PC1, PC2                          0.032 | 4.100    0.329 | 3.414   \n",
       "PC1, Season_Encoded               0.154 | 3.832    0.458 | 3.068   \n",
       "PC1, State_Encoded                0.418 | 3.180    0.419 | 3.177   \n",
       "PC2, Crop_Encoded                 0.638 | 2.507    0.792 | 1.900   \n",
       "PC2, Season_Encoded              -0.029 | 4.228    0.406 | 3.213   \n",
       "PC2, State_Encoded                0.098 | 3.959    0.262 | 3.580   \n",
       "Season_Encoded, Crop_Encoded      0.683 | 2.345    0.683 | 2.345   \n",
       "Season_Encoded, State_Encoded     0.572 | 2.726    0.466 | 3.046   \n",
       "State_Encoded, Crop_Encoded       0.901 | 1.309    0.826 | 1.736   \n",
       "\n",
       "Model                           LinearRegression    MLPRegressor  \\\n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, Crop_Encoded      0.079 | 3.999   0.746 | 2.101   \n",
       "Annual_Rainfall, PC1               0.000 | 4.167   0.110 | 3.932   \n",
       "Annual_Rainfall, PC2               0.013 | 4.140   0.102 | 3.950   \n",
       "Annual_Rainfall, Season_Encoded    0.100 | 3.954   0.174 | 3.788   \n",
       "Annual_Rainfall, State_Encoded     0.011 | 4.145   0.020 | 4.127   \n",
       "Crop_Year, Annual_Rainfall         0.014 | 4.138   0.008 | 4.150   \n",
       "Crop_Year, Crop_Encoded            0.077 | 4.004   0.650 | 2.466   \n",
       "Crop_Year, PC1                    -0.006 | 4.180   0.079 | 4.001   \n",
       "Crop_Year, PC2                     0.007 | 4.152   0.016 | 4.135   \n",
       "Crop_Year, Season_Encoded          0.089 | 3.977   0.140 | 3.865   \n",
       "Crop_Year, State_Encoded           0.007 | 4.153  -0.001 | 4.170   \n",
       "PC1, Crop_Encoded                  0.066 | 4.028   0.687 | 2.331   \n",
       "PC1, PC2                          -0.006 | 4.179   0.157 | 3.827   \n",
       "PC1, Season_Encoded                0.072 | 4.014   0.236 | 3.643   \n",
       "PC1, State_Encoded                -0.008 | 4.185   0.166 | 3.807   \n",
       "PC2, Crop_Encoded                  0.076 | 4.005   0.531 | 2.854   \n",
       "PC2, Season_Encoded                0.086 | 3.984   0.256 | 3.595   \n",
       "PC2, State_Encoded                 0.007 | 4.154   0.037 | 4.090   \n",
       "Season_Encoded, Crop_Encoded       0.151 | 3.840   0.680 | 2.356   \n",
       "Season_Encoded, State_Encoded      0.086 | 3.985   0.256 | 3.595   \n",
       "State_Encoded, Crop_Encoded        0.073 | 4.012   0.534 | 2.845   \n",
       "\n",
       "Model                             RandomForest           Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall, Crop_Encoded    0.608 | 2.610   0.079 | 3.999  \n",
       "Annual_Rainfall, PC1             0.090 | 3.977   0.000 | 4.167  \n",
       "Annual_Rainfall, PC2             0.158 | 3.825   0.013 | 4.140  \n",
       "Annual_Rainfall, Season_Encoded  0.099 | 3.955   0.100 | 3.954  \n",
       "Annual_Rainfall, State_Encoded   0.250 | 3.610   0.011 | 4.145  \n",
       "Crop_Year, Annual_Rainfall       0.500 | 2.948   0.014 | 4.138  \n",
       "Crop_Year, Crop_Encoded          0.615 | 2.586   0.077 | 4.004  \n",
       "Crop_Year, PC1                   0.197 | 3.734  -0.006 | 4.180  \n",
       "Crop_Year, PC2                   0.119 | 3.912   0.007 | 4.152  \n",
       "Crop_Year, Season_Encoded        0.469 | 3.036   0.089 | 3.977  \n",
       "Crop_Year, State_Encoded         0.461 | 3.059   0.007 | 4.153  \n",
       "PC1, Crop_Encoded                0.613 | 2.593   0.066 | 4.028  \n",
       "PC1, PC2                         0.345 | 3.374  -0.006 | 4.179  \n",
       "PC1, Season_Encoded              0.360 | 3.334   0.072 | 4.014  \n",
       "PC1, State_Encoded               0.584 | 2.689  -0.008 | 4.185  \n",
       "PC2, Crop_Encoded                0.736 | 2.140   0.076 | 4.005  \n",
       "PC2, Season_Encoded              0.262 | 3.581   0.086 | 3.984  \n",
       "PC2, State_Encoded               0.410 | 3.201   0.006 | 4.154  \n",
       "Season_Encoded, Crop_Encoded     0.682 | 2.349   0.151 | 3.840  \n",
       "Season_Encoded, State_Encoded    0.574 | 2.720   0.086 | 3.985  \n",
       "State_Encoded, Crop_Encoded      0.901 | 1.310   0.073 | 4.012  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 3 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Crop_Encoded</th>\n",
       "      <td>0.652 | 2.460</td>\n",
       "      <td>0.777 | 1.966</td>\n",
       "      <td>0.074 | 4.011</td>\n",
       "      <td>0.767 | 2.012</td>\n",
       "      <td>0.799 | 1.867</td>\n",
       "      <td>0.074 | 4.011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2</th>\n",
       "      <td>-0.062 | 4.295</td>\n",
       "      <td>0.356 | 3.345</td>\n",
       "      <td>0.005 | 4.157</td>\n",
       "      <td>0.204 | 3.717</td>\n",
       "      <td>0.470 | 3.033</td>\n",
       "      <td>0.005 | 4.157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded</th>\n",
       "      <td>0.269 | 3.563</td>\n",
       "      <td>0.509 | 2.920</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "      <td>0.269 | 3.563</td>\n",
       "      <td>0.590 | 2.668</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, State_Encoded</th>\n",
       "      <td>0.600 | 2.636</td>\n",
       "      <td>0.409 | 3.203</td>\n",
       "      <td>0.002 | 4.163</td>\n",
       "      <td>0.159 | 3.823</td>\n",
       "      <td>0.635 | 2.518</td>\n",
       "      <td>0.002 | 4.163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Crop_Encoded</th>\n",
       "      <td>0.692 | 2.313</td>\n",
       "      <td>0.821 | 1.763</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "      <td>0.775 | 1.975</td>\n",
       "      <td>0.817 | 1.785</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded</th>\n",
       "      <td>0.253 | 3.603</td>\n",
       "      <td>0.493 | 2.967</td>\n",
       "      <td>0.103 | 3.946</td>\n",
       "      <td>0.250 | 3.610</td>\n",
       "      <td>0.530 | 2.857</td>\n",
       "      <td>0.103 | 3.946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, State_Encoded</th>\n",
       "      <td>0.038 | 4.088</td>\n",
       "      <td>0.289 | 3.515</td>\n",
       "      <td>0.015 | 4.136</td>\n",
       "      <td>0.051 | 4.060</td>\n",
       "      <td>0.476 | 3.016</td>\n",
       "      <td>0.015 | 4.136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.460 | 3.062</td>\n",
       "      <td>0.738 | 2.134</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "      <td>0.748 | 2.090</td>\n",
       "      <td>0.630 | 2.535</td>\n",
       "      <td>0.166 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.230 | 3.657</td>\n",
       "      <td>0.454 | 3.081</td>\n",
       "      <td>0.102 | 3.949</td>\n",
       "      <td>0.235 | 3.646</td>\n",
       "      <td>0.538 | 2.831</td>\n",
       "      <td>0.102 | 3.949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.726 | 2.183</td>\n",
       "      <td>0.803 | 1.851</td>\n",
       "      <td>0.081 | 3.996</td>\n",
       "      <td>0.755 | 2.061</td>\n",
       "      <td>0.827 | 1.734</td>\n",
       "      <td>0.081 | 3.996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Crop_Encoded</th>\n",
       "      <td>0.539 | 2.829</td>\n",
       "      <td>0.742 | 2.119</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "      <td>0.742 | 2.116</td>\n",
       "      <td>0.700 | 2.282</td>\n",
       "      <td>0.086 | 3.985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1</th>\n",
       "      <td>-0.260 | 4.678</td>\n",
       "      <td>0.322 | 3.433</td>\n",
       "      <td>0.006 | 4.156</td>\n",
       "      <td>0.108 | 3.936</td>\n",
       "      <td>0.237 | 3.640</td>\n",
       "      <td>0.006 | 4.156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2</th>\n",
       "      <td>-0.333 | 4.812</td>\n",
       "      <td>0.365 | 3.320</td>\n",
       "      <td>0.018 | 4.130</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "      <td>0.197 | 3.736</td>\n",
       "      <td>0.018 | 4.130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded</th>\n",
       "      <td>0.042 | 4.080</td>\n",
       "      <td>0.519 | 2.889</td>\n",
       "      <td>0.108 | 3.935</td>\n",
       "      <td>0.178 | 3.778</td>\n",
       "      <td>0.433 | 3.139</td>\n",
       "      <td>0.108 | 3.935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, State_Encoded</th>\n",
       "      <td>-0.018 | 4.205</td>\n",
       "      <td>0.357 | 3.343</td>\n",
       "      <td>0.017 | 4.132</td>\n",
       "      <td>0.003 | 4.161</td>\n",
       "      <td>0.335 | 3.399</td>\n",
       "      <td>0.017 | 4.132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Crop_Encoded</th>\n",
       "      <td>0.414 | 3.191</td>\n",
       "      <td>0.696 | 2.299</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.684 | 2.343</td>\n",
       "      <td>0.676 | 2.371</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2</th>\n",
       "      <td>-0.085 | 4.342</td>\n",
       "      <td>0.396 | 3.240</td>\n",
       "      <td>-0.001 | 4.171</td>\n",
       "      <td>0.134 | 3.878</td>\n",
       "      <td>0.367 | 3.316</td>\n",
       "      <td>-0.001 | 4.171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded</th>\n",
       "      <td>0.293 | 3.503</td>\n",
       "      <td>0.541 | 2.824</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.281 | 3.535</td>\n",
       "      <td>0.502 | 2.941</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, State_Encoded</th>\n",
       "      <td>0.400 | 3.229</td>\n",
       "      <td>0.473 | 3.024</td>\n",
       "      <td>-0.003 | 4.173</td>\n",
       "      <td>0.174 | 3.788</td>\n",
       "      <td>0.606 | 2.616</td>\n",
       "      <td>-0.003 | 4.173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Crop_Encoded</th>\n",
       "      <td>0.650 | 2.464</td>\n",
       "      <td>0.804 | 1.846</td>\n",
       "      <td>0.081 | 3.994</td>\n",
       "      <td>0.688 | 2.328</td>\n",
       "      <td>0.800 | 1.866</td>\n",
       "      <td>0.081 | 3.994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded</th>\n",
       "      <td>0.067 | 4.025</td>\n",
       "      <td>0.562 | 2.758</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "      <td>0.199 | 3.729</td>\n",
       "      <td>0.512 | 2.910</td>\n",
       "      <td>0.093 | 3.969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, State_Encoded</th>\n",
       "      <td>0.166 | 3.806</td>\n",
       "      <td>0.414 | 3.190</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "      <td>0.033 | 4.097</td>\n",
       "      <td>0.499 | 2.949</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.618 | 2.575</td>\n",
       "      <td>0.678 | 2.363</td>\n",
       "      <td>0.159 | 3.822</td>\n",
       "      <td>0.682 | 2.349</td>\n",
       "      <td>0.625 | 2.553</td>\n",
       "      <td>0.159 | 3.822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.002 | 4.164</td>\n",
       "      <td>0.578 | 2.707</td>\n",
       "      <td>0.094 | 3.966</td>\n",
       "      <td>0.253 | 3.602</td>\n",
       "      <td>0.467 | 3.042</td>\n",
       "      <td>0.094 | 3.966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.882 | 1.429</td>\n",
       "      <td>0.826 | 1.737</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.698 | 2.291</td>\n",
       "      <td>0.908 | 1.264</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.878 | 1.453</td>\n",
       "      <td>0.851 | 1.607</td>\n",
       "      <td>0.070 | 4.018</td>\n",
       "      <td>0.634 | 2.520</td>\n",
       "      <td>0.928 | 1.119</td>\n",
       "      <td>0.070 | 4.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.415 | 3.186</td>\n",
       "      <td>0.593 | 2.658</td>\n",
       "      <td>0.077 | 4.005</td>\n",
       "      <td>0.327 | 3.420</td>\n",
       "      <td>0.681 | 2.353</td>\n",
       "      <td>0.077 | 4.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, State_Encoded</th>\n",
       "      <td>0.665 | 2.412</td>\n",
       "      <td>0.529 | 2.859</td>\n",
       "      <td>-0.003 | 4.174</td>\n",
       "      <td>0.217 | 3.688</td>\n",
       "      <td>0.752 | 2.074</td>\n",
       "      <td>-0.003 | 4.174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.640 | 2.499</td>\n",
       "      <td>0.723 | 2.192</td>\n",
       "      <td>0.144 | 3.857</td>\n",
       "      <td>0.693 | 2.309</td>\n",
       "      <td>0.737 | 2.135</td>\n",
       "      <td>0.144 | 3.857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.799 | 1.867</td>\n",
       "      <td>0.612 | 2.597</td>\n",
       "      <td>0.076 | 4.006</td>\n",
       "      <td>0.435 | 3.131</td>\n",
       "      <td>0.865 | 1.534</td>\n",
       "      <td>0.076 | 4.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.916 | 1.206</td>\n",
       "      <td>0.832 | 1.710</td>\n",
       "      <td>0.067 | 4.026</td>\n",
       "      <td>0.650 | 2.467</td>\n",
       "      <td>0.932 | 1.090</td>\n",
       "      <td>0.067 | 4.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.746 | 2.099</td>\n",
       "      <td>0.783 | 1.939</td>\n",
       "      <td>0.155 | 3.831</td>\n",
       "      <td>0.729 | 2.168</td>\n",
       "      <td>0.801 | 1.861</td>\n",
       "      <td>0.155 | 3.831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.520 | 2.887</td>\n",
       "      <td>0.493 | 2.966</td>\n",
       "      <td>0.090 | 3.975</td>\n",
       "      <td>0.272 | 3.555</td>\n",
       "      <td>0.708 | 2.254</td>\n",
       "      <td>0.090 | 3.975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.865 | 1.529</td>\n",
       "      <td>0.844 | 1.646</td>\n",
       "      <td>0.078 | 4.001</td>\n",
       "      <td>0.710 | 2.245</td>\n",
       "      <td>0.921 | 1.172</td>\n",
       "      <td>0.078 | 4.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.926 | 1.135</td>\n",
       "      <td>0.859 | 1.563</td>\n",
       "      <td>0.153 | 3.835</td>\n",
       "      <td>0.751 | 2.079</td>\n",
       "      <td>0.924 | 1.147</td>\n",
       "      <td>0.153 | 3.835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                             DecisionTree  \\\n",
       "Feature_Set                                                      \n",
       "Annual_Rainfall, PC1, Crop_Encoded               0.652 | 2.460   \n",
       "Annual_Rainfall, PC1, PC2                       -0.062 | 4.295   \n",
       "Annual_Rainfall, PC1, Season_Encoded             0.269 | 3.563   \n",
       "Annual_Rainfall, PC1, State_Encoded              0.600 | 2.636   \n",
       "Annual_Rainfall, PC2, Crop_Encoded               0.692 | 2.313   \n",
       "Annual_Rainfall, PC2, Season_Encoded             0.253 | 3.603   \n",
       "Annual_Rainfall, PC2, State_Encoded              0.038 | 4.088   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded    0.460 | 3.062   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded   0.230 | 3.657   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded     0.726 | 2.183   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded         0.539 | 2.829   \n",
       "Crop_Year, Annual_Rainfall, PC1                 -0.260 | 4.678   \n",
       "Crop_Year, Annual_Rainfall, PC2                 -0.333 | 4.812   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded       0.042 | 4.080   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded       -0.018 | 4.205   \n",
       "Crop_Year, PC1, Crop_Encoded                     0.414 | 3.191   \n",
       "Crop_Year, PC1, PC2                             -0.085 | 4.342   \n",
       "Crop_Year, PC1, Season_Encoded                   0.293 | 3.503   \n",
       "Crop_Year, PC1, State_Encoded                    0.400 | 3.229   \n",
       "Crop_Year, PC2, Crop_Encoded                     0.650 | 2.464   \n",
       "Crop_Year, PC2, Season_Encoded                   0.067 | 4.025   \n",
       "Crop_Year, PC2, State_Encoded                    0.166 | 3.806   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded          0.618 | 2.575   \n",
       "Crop_Year, Season_Encoded, State_Encoded         0.002 | 4.164   \n",
       "Crop_Year, State_Encoded, Crop_Encoded           0.882 | 1.429   \n",
       "PC1, PC2, Crop_Encoded                           0.878 | 1.453   \n",
       "PC1, PC2, Season_Encoded                         0.415 | 3.186   \n",
       "PC1, PC2, State_Encoded                          0.665 | 2.412   \n",
       "PC1, Season_Encoded, Crop_Encoded                0.640 | 2.499   \n",
       "PC1, Season_Encoded, State_Encoded               0.799 | 1.867   \n",
       "PC1, State_Encoded, Crop_Encoded                 0.916 | 1.206   \n",
       "PC2, Season_Encoded, Crop_Encoded                0.746 | 2.099   \n",
       "PC2, Season_Encoded, State_Encoded               0.520 | 2.887   \n",
       "PC2, State_Encoded, Crop_Encoded                 0.865 | 1.529   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded      0.926 | 1.135   \n",
       "\n",
       "Model                                          GradientBoosting  \\\n",
       "Feature_Set                                                       \n",
       "Annual_Rainfall, PC1, Crop_Encoded                0.777 | 1.966   \n",
       "Annual_Rainfall, PC1, PC2                         0.356 | 3.345   \n",
       "Annual_Rainfall, PC1, Season_Encoded              0.509 | 2.920   \n",
       "Annual_Rainfall, PC1, State_Encoded               0.409 | 3.203   \n",
       "Annual_Rainfall, PC2, Crop_Encoded                0.821 | 1.763   \n",
       "Annual_Rainfall, PC2, Season_Encoded              0.493 | 2.967   \n",
       "Annual_Rainfall, PC2, State_Encoded               0.289 | 3.515   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded     0.738 | 2.134   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded    0.454 | 3.081   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded      0.803 | 1.851   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded          0.742 | 2.119   \n",
       "Crop_Year, Annual_Rainfall, PC1                   0.322 | 3.433   \n",
       "Crop_Year, Annual_Rainfall, PC2                   0.365 | 3.320   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded        0.519 | 2.889   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded         0.357 | 3.343   \n",
       "Crop_Year, PC1, Crop_Encoded                      0.696 | 2.299   \n",
       "Crop_Year, PC1, PC2                               0.396 | 3.240   \n",
       "Crop_Year, PC1, Season_Encoded                    0.541 | 2.824   \n",
       "Crop_Year, PC1, State_Encoded                     0.473 | 3.024   \n",
       "Crop_Year, PC2, Crop_Encoded                      0.804 | 1.846   \n",
       "Crop_Year, PC2, Season_Encoded                    0.562 | 2.758   \n",
       "Crop_Year, PC2, State_Encoded                     0.414 | 3.190   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded           0.678 | 2.363   \n",
       "Crop_Year, Season_Encoded, State_Encoded          0.578 | 2.707   \n",
       "Crop_Year, State_Encoded, Crop_Encoded            0.826 | 1.737   \n",
       "PC1, PC2, Crop_Encoded                            0.851 | 1.607   \n",
       "PC1, PC2, Season_Encoded                          0.593 | 2.658   \n",
       "PC1, PC2, State_Encoded                           0.529 | 2.859   \n",
       "PC1, Season_Encoded, Crop_Encoded                 0.723 | 2.192   \n",
       "PC1, Season_Encoded, State_Encoded                0.612 | 2.597   \n",
       "PC1, State_Encoded, Crop_Encoded                  0.832 | 1.710   \n",
       "PC2, Season_Encoded, Crop_Encoded                 0.783 | 1.939   \n",
       "PC2, Season_Encoded, State_Encoded                0.493 | 2.966   \n",
       "PC2, State_Encoded, Crop_Encoded                  0.844 | 1.646   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded       0.859 | 1.563   \n",
       "\n",
       "Model                                          LinearRegression  \\\n",
       "Feature_Set                                                       \n",
       "Annual_Rainfall, PC1, Crop_Encoded                0.074 | 4.011   \n",
       "Annual_Rainfall, PC1, PC2                         0.005 | 4.157   \n",
       "Annual_Rainfall, PC1, Season_Encoded              0.093 | 3.969   \n",
       "Annual_Rainfall, PC1, State_Encoded               0.002 | 4.163   \n",
       "Annual_Rainfall, PC2, Crop_Encoded                0.084 | 3.989   \n",
       "Annual_Rainfall, PC2, Season_Encoded              0.103 | 3.946   \n",
       "Annual_Rainfall, PC2, State_Encoded               0.015 | 4.136   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded     0.166 | 3.807   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded    0.102 | 3.949   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded      0.081 | 3.996   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded          0.086 | 3.985   \n",
       "Crop_Year, Annual_Rainfall, PC1                   0.006 | 4.156   \n",
       "Crop_Year, Annual_Rainfall, PC2                   0.018 | 4.130   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded        0.108 | 3.935   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded         0.017 | 4.132   \n",
       "Crop_Year, PC1, Crop_Encoded                      0.071 | 4.016   \n",
       "Crop_Year, PC1, PC2                              -0.001 | 4.171   \n",
       "Crop_Year, PC1, Season_Encoded                    0.080 | 3.998   \n",
       "Crop_Year, PC1, State_Encoded                    -0.003 | 4.173   \n",
       "Crop_Year, PC2, Crop_Encoded                      0.081 | 3.994   \n",
       "Crop_Year, PC2, Season_Encoded                    0.093 | 3.969   \n",
       "Crop_Year, PC2, State_Encoded                     0.012 | 4.143   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded           0.159 | 3.822   \n",
       "Crop_Year, Season_Encoded, State_Encoded          0.094 | 3.966   \n",
       "Crop_Year, State_Encoded, Crop_Encoded            0.080 | 3.998   \n",
       "PC1, PC2, Crop_Encoded                            0.070 | 4.018   \n",
       "PC1, PC2, Season_Encoded                          0.077 | 4.005   \n",
       "PC1, PC2, State_Encoded                          -0.003 | 4.174   \n",
       "PC1, Season_Encoded, Crop_Encoded                 0.144 | 3.857   \n",
       "PC1, Season_Encoded, State_Encoded                0.076 | 4.006   \n",
       "PC1, State_Encoded, Crop_Encoded                  0.067 | 4.026   \n",
       "PC2, Season_Encoded, Crop_Encoded                 0.155 | 3.831   \n",
       "PC2, Season_Encoded, State_Encoded                0.090 | 3.975   \n",
       "PC2, State_Encoded, Crop_Encoded                  0.078 | 4.001   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded       0.153 | 3.835   \n",
       "\n",
       "Model                                            MLPRegressor   RandomForest  \\\n",
       "Feature_Set                                                                    \n",
       "Annual_Rainfall, PC1, Crop_Encoded              0.767 | 2.012  0.799 | 1.867   \n",
       "Annual_Rainfall, PC1, PC2                       0.204 | 3.717  0.470 | 3.033   \n",
       "Annual_Rainfall, PC1, Season_Encoded            0.269 | 3.563  0.590 | 2.668   \n",
       "Annual_Rainfall, PC1, State_Encoded             0.159 | 3.823  0.635 | 2.518   \n",
       "Annual_Rainfall, PC2, Crop_Encoded              0.775 | 1.975  0.817 | 1.785   \n",
       "Annual_Rainfall, PC2, Season_Encoded            0.250 | 3.610  0.530 | 2.857   \n",
       "Annual_Rainfall, PC2, State_Encoded             0.051 | 4.060  0.476 | 3.016   \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded   0.748 | 2.090  0.630 | 2.535   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded  0.235 | 3.646  0.538 | 2.831   \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded    0.755 | 2.061  0.827 | 1.734   \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded        0.742 | 2.116  0.700 | 2.282   \n",
       "Crop_Year, Annual_Rainfall, PC1                 0.108 | 3.936  0.237 | 3.640   \n",
       "Crop_Year, Annual_Rainfall, PC2                 0.077 | 4.004  0.197 | 3.736   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded      0.178 | 3.778  0.433 | 3.139   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded       0.003 | 4.161  0.335 | 3.399   \n",
       "Crop_Year, PC1, Crop_Encoded                    0.684 | 2.343  0.676 | 2.371   \n",
       "Crop_Year, PC1, PC2                             0.134 | 3.878  0.367 | 3.316   \n",
       "Crop_Year, PC1, Season_Encoded                  0.281 | 3.535  0.502 | 2.941   \n",
       "Crop_Year, PC1, State_Encoded                   0.174 | 3.788  0.606 | 2.616   \n",
       "Crop_Year, PC2, Crop_Encoded                    0.688 | 2.328  0.800 | 1.866   \n",
       "Crop_Year, PC2, Season_Encoded                  0.199 | 3.729  0.512 | 2.910   \n",
       "Crop_Year, PC2, State_Encoded                   0.033 | 4.097  0.499 | 2.949   \n",
       "Crop_Year, Season_Encoded, Crop_Encoded         0.682 | 2.349  0.625 | 2.553   \n",
       "Crop_Year, Season_Encoded, State_Encoded        0.253 | 3.602  0.467 | 3.042   \n",
       "Crop_Year, State_Encoded, Crop_Encoded          0.698 | 2.291  0.908 | 1.264   \n",
       "PC1, PC2, Crop_Encoded                          0.634 | 2.520  0.928 | 1.119   \n",
       "PC1, PC2, Season_Encoded                        0.327 | 3.420  0.681 | 2.353   \n",
       "PC1, PC2, State_Encoded                         0.217 | 3.688  0.752 | 2.074   \n",
       "PC1, Season_Encoded, Crop_Encoded               0.693 | 2.309  0.737 | 2.135   \n",
       "PC1, Season_Encoded, State_Encoded              0.435 | 3.131  0.865 | 1.534   \n",
       "PC1, State_Encoded, Crop_Encoded                0.650 | 2.467  0.932 | 1.090   \n",
       "PC2, Season_Encoded, Crop_Encoded               0.729 | 2.168  0.801 | 1.861   \n",
       "PC2, Season_Encoded, State_Encoded              0.272 | 3.555  0.708 | 2.254   \n",
       "PC2, State_Encoded, Crop_Encoded                0.710 | 2.245  0.921 | 1.172   \n",
       "Season_Encoded, State_Encoded, Crop_Encoded     0.751 | 2.079  0.924 | 1.147   \n",
       "\n",
       "Model                                                    Ridge  \n",
       "Feature_Set                                                     \n",
       "Annual_Rainfall, PC1, Crop_Encoded               0.074 | 4.011  \n",
       "Annual_Rainfall, PC1, PC2                        0.005 | 4.157  \n",
       "Annual_Rainfall, PC1, Season_Encoded             0.093 | 3.969  \n",
       "Annual_Rainfall, PC1, State_Encoded              0.002 | 4.163  \n",
       "Annual_Rainfall, PC2, Crop_Encoded               0.084 | 3.989  \n",
       "Annual_Rainfall, PC2, Season_Encoded             0.103 | 3.946  \n",
       "Annual_Rainfall, PC2, State_Encoded              0.015 | 4.136  \n",
       "Annual_Rainfall, Season_Encoded, Crop_Encoded    0.166 | 3.807  \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded   0.102 | 3.949  \n",
       "Annual_Rainfall, State_Encoded, Crop_Encoded     0.081 | 3.996  \n",
       "Crop_Year, Annual_Rainfall, Crop_Encoded         0.086 | 3.985  \n",
       "Crop_Year, Annual_Rainfall, PC1                  0.006 | 4.156  \n",
       "Crop_Year, Annual_Rainfall, PC2                  0.018 | 4.130  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded       0.108 | 3.935  \n",
       "Crop_Year, Annual_Rainfall, State_Encoded        0.017 | 4.132  \n",
       "Crop_Year, PC1, Crop_Encoded                     0.071 | 4.016  \n",
       "Crop_Year, PC1, PC2                             -0.001 | 4.171  \n",
       "Crop_Year, PC1, Season_Encoded                   0.080 | 3.998  \n",
       "Crop_Year, PC1, State_Encoded                   -0.003 | 4.173  \n",
       "Crop_Year, PC2, Crop_Encoded                     0.081 | 3.994  \n",
       "Crop_Year, PC2, Season_Encoded                   0.093 | 3.969  \n",
       "Crop_Year, PC2, State_Encoded                    0.012 | 4.143  \n",
       "Crop_Year, Season_Encoded, Crop_Encoded          0.159 | 3.822  \n",
       "Crop_Year, Season_Encoded, State_Encoded         0.094 | 3.966  \n",
       "Crop_Year, State_Encoded, Crop_Encoded           0.080 | 3.998  \n",
       "PC1, PC2, Crop_Encoded                           0.070 | 4.018  \n",
       "PC1, PC2, Season_Encoded                         0.077 | 4.005  \n",
       "PC1, PC2, State_Encoded                         -0.003 | 4.174  \n",
       "PC1, Season_Encoded, Crop_Encoded                0.144 | 3.857  \n",
       "PC1, Season_Encoded, State_Encoded               0.076 | 4.006  \n",
       "PC1, State_Encoded, Crop_Encoded                 0.067 | 4.026  \n",
       "PC2, Season_Encoded, Crop_Encoded                0.155 | 3.831  \n",
       "PC2, Season_Encoded, State_Encoded               0.090 | 3.975  \n",
       "PC2, State_Encoded, Crop_Encoded                 0.078 | 4.001  \n",
       "Season_Encoded, State_Encoded, Crop_Encoded      0.153 | 3.835  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 4 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.908 | 1.261</td>\n",
       "      <td>0.854 | 1.592</td>\n",
       "      <td>0.078 | 4.002</td>\n",
       "      <td>0.803 | 1.852</td>\n",
       "      <td>0.932 | 1.089</td>\n",
       "      <td>0.078 | 4.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.534 | 2.845</td>\n",
       "      <td>0.609 | 2.605</td>\n",
       "      <td>0.096 | 3.962</td>\n",
       "      <td>0.356 | 3.344</td>\n",
       "      <td>0.707 | 2.255</td>\n",
       "      <td>0.096 | 3.962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.578 | 2.706</td>\n",
       "      <td>0.457 | 3.070</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "      <td>0.251 | 3.607</td>\n",
       "      <td>0.761 | 2.037</td>\n",
       "      <td>0.007 | 4.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.685 | 2.338</td>\n",
       "      <td>0.781 | 1.950</td>\n",
       "      <td>0.160 | 3.819</td>\n",
       "      <td>0.773 | 1.984</td>\n",
       "      <td>0.833 | 1.701</td>\n",
       "      <td>0.160 | 3.819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.705 | 2.265</td>\n",
       "      <td>0.604 | 2.622</td>\n",
       "      <td>0.095 | 3.964</td>\n",
       "      <td>0.448 | 3.097</td>\n",
       "      <td>0.794 | 1.892</td>\n",
       "      <td>0.095 | 3.964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.839 | 1.671</td>\n",
       "      <td>0.830 | 1.718</td>\n",
       "      <td>0.074 | 4.009</td>\n",
       "      <td>0.796 | 1.882</td>\n",
       "      <td>0.900 | 1.317</td>\n",
       "      <td>0.074 | 4.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.707 | 2.256</td>\n",
       "      <td>0.820 | 1.766</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "      <td>0.787 | 1.925</td>\n",
       "      <td>0.837 | 1.680</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.560 | 2.764</td>\n",
       "      <td>0.549 | 2.799</td>\n",
       "      <td>0.106 | 3.941</td>\n",
       "      <td>0.265 | 3.574</td>\n",
       "      <td>0.691 | 2.315</td>\n",
       "      <td>0.106 | 3.941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.855 | 1.587</td>\n",
       "      <td>0.851 | 1.609</td>\n",
       "      <td>0.085 | 3.987</td>\n",
       "      <td>0.782 | 1.946</td>\n",
       "      <td>0.911 | 1.241</td>\n",
       "      <td>0.085 | 3.987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.775 | 1.976</td>\n",
       "      <td>0.813 | 1.802</td>\n",
       "      <td>0.167 | 3.804</td>\n",
       "      <td>0.787 | 1.922</td>\n",
       "      <td>0.856 | 1.579</td>\n",
       "      <td>0.167 | 3.804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Crop_Encoded</th>\n",
       "      <td>0.735 | 2.147</td>\n",
       "      <td>0.780 | 1.956</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "      <td>0.781 | 1.949</td>\n",
       "      <td>0.838 | 1.678</td>\n",
       "      <td>0.080 | 3.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2</th>\n",
       "      <td>0.207 | 3.711</td>\n",
       "      <td>0.394 | 3.245</td>\n",
       "      <td>0.010 | 4.148</td>\n",
       "      <td>0.191 | 3.749</td>\n",
       "      <td>0.481 | 3.002</td>\n",
       "      <td>0.009 | 4.148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded</th>\n",
       "      <td>0.415 | 3.189</td>\n",
       "      <td>0.580 | 2.699</td>\n",
       "      <td>0.101 | 3.952</td>\n",
       "      <td>0.313 | 3.453</td>\n",
       "      <td>0.634 | 2.521</td>\n",
       "      <td>0.101 | 3.952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, State_Encoded</th>\n",
       "      <td>0.466 | 3.045</td>\n",
       "      <td>0.423 | 3.165</td>\n",
       "      <td>0.008 | 4.151</td>\n",
       "      <td>0.176 | 3.783</td>\n",
       "      <td>0.629 | 2.538</td>\n",
       "      <td>0.008 | 4.151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Crop_Encoded</th>\n",
       "      <td>0.738 | 2.132</td>\n",
       "      <td>0.831 | 1.714</td>\n",
       "      <td>0.090 | 3.977</td>\n",
       "      <td>0.776 | 1.971</td>\n",
       "      <td>0.857 | 1.575</td>\n",
       "      <td>0.090 | 3.977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded</th>\n",
       "      <td>0.189 | 3.754</td>\n",
       "      <td>0.578 | 2.707</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "      <td>0.255 | 3.597</td>\n",
       "      <td>0.601 | 2.632</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, State_Encoded</th>\n",
       "      <td>-0.089 | 4.350</td>\n",
       "      <td>0.383 | 3.274</td>\n",
       "      <td>0.021 | 4.124</td>\n",
       "      <td>0.057 | 4.047</td>\n",
       "      <td>0.454 | 3.079</td>\n",
       "      <td>0.021 | 4.124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.558 | 2.772</td>\n",
       "      <td>0.754 | 2.069</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "      <td>0.758 | 2.052</td>\n",
       "      <td>0.730 | 2.166</td>\n",
       "      <td>0.175 | 3.786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.256 | 3.594</td>\n",
       "      <td>0.565 | 2.747</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "      <td>0.272 | 3.556</td>\n",
       "      <td>0.609 | 2.607</td>\n",
       "      <td>0.111 | 3.929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.797 | 1.879</td>\n",
       "      <td>0.804 | 1.844</td>\n",
       "      <td>0.087 | 3.982</td>\n",
       "      <td>0.772 | 1.988</td>\n",
       "      <td>0.860 | 1.560</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.909 | 1.258</td>\n",
       "      <td>0.852 | 1.605</td>\n",
       "      <td>0.075 | 4.008</td>\n",
       "      <td>0.730 | 2.164</td>\n",
       "      <td>0.943 | 0.998</td>\n",
       "      <td>0.075 | 4.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.504 | 2.934</td>\n",
       "      <td>0.629 | 2.537</td>\n",
       "      <td>0.083 | 3.991</td>\n",
       "      <td>0.364 | 3.323</td>\n",
       "      <td>0.757 | 2.056</td>\n",
       "      <td>0.083 | 3.991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.548 | 2.800</td>\n",
       "      <td>0.542 | 2.819</td>\n",
       "      <td>0.002 | 4.164</td>\n",
       "      <td>0.242 | 3.628</td>\n",
       "      <td>0.768 | 2.009</td>\n",
       "      <td>0.002 | 4.164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.623 | 2.560</td>\n",
       "      <td>0.718 | 2.212</td>\n",
       "      <td>0.151 | 3.839</td>\n",
       "      <td>0.703 | 2.271</td>\n",
       "      <td>0.753 | 2.071</td>\n",
       "      <td>0.151 | 3.839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.763 | 2.031</td>\n",
       "      <td>0.666 | 2.409</td>\n",
       "      <td>0.084 | 3.988</td>\n",
       "      <td>0.459 | 3.065</td>\n",
       "      <td>0.854 | 1.593</td>\n",
       "      <td>0.084 | 3.988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.918 | 1.195</td>\n",
       "      <td>0.832 | 1.709</td>\n",
       "      <td>0.073 | 4.013</td>\n",
       "      <td>0.713 | 2.234</td>\n",
       "      <td>0.950 | 0.936</td>\n",
       "      <td>0.073 | 4.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.711 | 2.240</td>\n",
       "      <td>0.812 | 1.807</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "      <td>0.730 | 2.167</td>\n",
       "      <td>0.851 | 1.607</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.428 | 3.152</td>\n",
       "      <td>0.608 | 2.609</td>\n",
       "      <td>0.098 | 3.958</td>\n",
       "      <td>0.323 | 3.429</td>\n",
       "      <td>0.750 | 2.085</td>\n",
       "      <td>0.098 | 3.958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.878 | 1.455</td>\n",
       "      <td>0.868 | 1.517</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "      <td>0.704 | 2.267</td>\n",
       "      <td>0.956 | 0.871</td>\n",
       "      <td>0.084 | 3.989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.953 | 0.901</td>\n",
       "      <td>0.852 | 1.605</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "      <td>0.742 | 2.116</td>\n",
       "      <td>0.962 | 0.813</td>\n",
       "      <td>0.162 | 3.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.903 | 1.301</td>\n",
       "      <td>0.851 | 1.611</td>\n",
       "      <td>0.147 | 3.849</td>\n",
       "      <td>0.769 | 2.004</td>\n",
       "      <td>0.943 | 0.995</td>\n",
       "      <td>0.147 | 3.849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.805 | 1.839</td>\n",
       "      <td>0.670 | 2.394</td>\n",
       "      <td>0.080 | 3.997</td>\n",
       "      <td>0.462 | 3.057</td>\n",
       "      <td>0.884 | 1.419</td>\n",
       "      <td>0.080 | 3.997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.940 | 1.022</td>\n",
       "      <td>0.871 | 1.497</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "      <td>0.722 | 2.199</td>\n",
       "      <td>0.953 | 0.908</td>\n",
       "      <td>0.071 | 4.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.922 | 1.167</td>\n",
       "      <td>0.868 | 1.513</td>\n",
       "      <td>0.146 | 3.852</td>\n",
       "      <td>0.790 | 1.909</td>\n",
       "      <td>0.946 | 0.967</td>\n",
       "      <td>0.146 | 3.852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.905 | 1.282</td>\n",
       "      <td>0.855 | 1.588</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "      <td>0.769 | 2.002</td>\n",
       "      <td>0.929 | 1.114</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                 DecisionTree  \\\n",
       "Feature_Set                                                          \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded              0.908 | 1.261   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded            0.534 | 2.845   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded             0.578 | 2.706   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded   0.685 | 2.338   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...   0.705 | 2.265   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded    0.839 | 1.671   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded   0.707 | 2.256   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...   0.560 | 2.764   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded    0.855 | 1.587   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...   0.775 | 1.976   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded        0.735 | 2.147   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                 0.207 | 3.711   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded      0.415 | 3.189   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded       0.466 | 3.045   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded        0.738 | 2.132   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded      0.189 | 3.754   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      -0.089 | 4.350   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...   0.558 | 2.772   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...   0.256 | 3.594   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...   0.797 | 1.879   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                    0.909 | 1.258   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                  0.504 | 2.934   \n",
       "Crop_Year, PC1, PC2, State_Encoded                   0.548 | 2.800   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded         0.623 | 2.560   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded        0.763 | 2.031   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded          0.918 | 1.195   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded         0.711 | 2.240   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded        0.428 | 3.152   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded          0.878 | 1.455   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...   0.953 | 0.901   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded               0.903 | 1.301   \n",
       "PC1, PC2, Season_Encoded, State_Encoded              0.805 | 1.839   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                0.940 | 1.022   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded     0.922 | 1.167   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded     0.905 | 1.282   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded               0.854 | 1.592   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded             0.609 | 2.605   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded              0.457 | 3.070   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded    0.781 | 1.950   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.604 | 2.622   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded     0.830 | 1.718   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded    0.820 | 1.766   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.549 | 2.799   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded     0.851 | 1.609   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...    0.813 | 1.802   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded         0.780 | 1.956   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                  0.394 | 3.245   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded       0.580 | 2.699   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded        0.423 | 3.165   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded         0.831 | 1.714   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded       0.578 | 2.707   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded        0.383 | 3.274   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...    0.754 | 2.069   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.565 | 2.747   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...    0.804 | 1.844   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                     0.852 | 1.605   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                   0.629 | 2.537   \n",
       "Crop_Year, PC1, PC2, State_Encoded                    0.542 | 2.819   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded          0.718 | 2.212   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded         0.666 | 2.409   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded           0.832 | 1.709   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded          0.812 | 1.807   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded         0.608 | 2.609   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded           0.868 | 1.517   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...    0.852 | 1.605   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded                0.851 | 1.611   \n",
       "PC1, PC2, Season_Encoded, State_Encoded               0.670 | 2.394   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                 0.871 | 1.497   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded      0.868 | 1.513   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded      0.855 | 1.588   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded               0.078 | 4.002   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded             0.096 | 3.962   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded              0.007 | 4.154   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded    0.160 | 3.819   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.095 | 3.964   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded     0.074 | 4.009   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded    0.169 | 3.799   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.106 | 3.941   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded     0.085 | 3.987   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...    0.167 | 3.804   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded         0.080 | 3.998   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                  0.010 | 4.148   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded       0.101 | 3.952   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded        0.008 | 4.151   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded         0.090 | 3.977   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded       0.111 | 3.929   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded        0.021 | 4.124   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...    0.175 | 3.786   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.111 | 3.929   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...    0.087 | 3.982   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                     0.075 | 4.008   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                   0.083 | 3.991   \n",
       "Crop_Year, PC1, PC2, State_Encoded                    0.002 | 4.164   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded          0.151 | 3.839   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded         0.084 | 3.988   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded           0.073 | 4.013   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded          0.162 | 3.815   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded         0.098 | 3.958   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded           0.084 | 3.989   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...    0.162 | 3.815   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded                0.147 | 3.849   \n",
       "PC1, PC2, Season_Encoded, State_Encoded               0.080 | 3.997   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded                 0.071 | 4.016   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded      0.146 | 3.852   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded      0.157 | 3.826   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.803 | 1.852   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.356 | 3.344   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.251 | 3.607   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.773 | 1.984   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.448 | 3.097   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.796 | 1.882   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.787 | 1.925   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.265 | 3.574   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.782 | 1.946   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.787 | 1.922   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.781 | 1.949   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.191 | 3.749   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.313 | 3.453   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.176 | 3.783   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.776 | 1.971   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.255 | 3.597   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.057 | 4.047   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.758 | 2.052   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.272 | 3.556   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.772 | 1.988   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.730 | 2.164   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.364 | 3.323   \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.242 | 3.628   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.703 | 2.271   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.459 | 3.065   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.713 | 2.234   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.730 | 2.167   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.323 | 3.429   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.704 | 2.267   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.742 | 2.116   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.769 | 2.004   \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.462 | 3.057   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.722 | 2.199   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.790 | 1.909   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.769 | 2.002   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.932 | 1.089   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.707 | 2.255   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.761 | 2.037   \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.833 | 1.701   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.794 | 1.892   \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.900 | 1.317   \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.837 | 1.680   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.691 | 2.315   \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.911 | 1.241   \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.856 | 1.579   \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.838 | 1.678   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.481 | 3.002   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.634 | 2.521   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.629 | 2.538   \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.857 | 1.575   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.601 | 2.632   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.454 | 3.079   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.730 | 2.166   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.609 | 2.607   \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.860 | 1.560   \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.943 | 0.998   \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.757 | 2.056   \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.768 | 2.009   \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.753 | 2.071   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.854 | 1.593   \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.950 | 0.936   \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.851 | 1.607   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.750 | 2.085   \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.956 | 0.871   \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.962 | 0.813   \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.943 | 0.995   \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.884 | 1.419   \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.953 | 0.908   \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.946 | 0.967   \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.929 | 1.114   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Crop_Encoded             0.078 | 4.002  \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded           0.096 | 3.962  \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded            0.007 | 4.154  \n",
       "Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded  0.160 | 3.819  \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.095 | 3.964  \n",
       "Annual_Rainfall, PC1, State_Encoded, Crop_Encoded   0.074 | 4.009  \n",
       "Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded  0.169 | 3.799  \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.106 | 3.941  \n",
       "Annual_Rainfall, PC2, State_Encoded, Crop_Encoded   0.085 | 3.987  \n",
       "Annual_Rainfall, Season_Encoded, State_Encoded,...  0.167 | 3.804  \n",
       "Crop_Year, Annual_Rainfall, PC1, Crop_Encoded       0.080 | 3.998  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2                0.009 | 4.148  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded     0.101 | 3.952  \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded      0.008 | 4.151  \n",
       "Crop_Year, Annual_Rainfall, PC2, Crop_Encoded       0.090 | 3.977  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded     0.111 | 3.929  \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded      0.021 | 4.124  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Cro...  0.175 | 3.786  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.111 | 3.929  \n",
       "Crop_Year, Annual_Rainfall, State_Encoded, Crop...  0.087 | 3.981  \n",
       "Crop_Year, PC1, PC2, Crop_Encoded                   0.075 | 4.008  \n",
       "Crop_Year, PC1, PC2, Season_Encoded                 0.083 | 3.991  \n",
       "Crop_Year, PC1, PC2, State_Encoded                  0.002 | 4.164  \n",
       "Crop_Year, PC1, Season_Encoded, Crop_Encoded        0.151 | 3.839  \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded       0.084 | 3.988  \n",
       "Crop_Year, PC1, State_Encoded, Crop_Encoded         0.073 | 4.012  \n",
       "Crop_Year, PC2, Season_Encoded, Crop_Encoded        0.162 | 3.815  \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded       0.098 | 3.958  \n",
       "Crop_Year, PC2, State_Encoded, Crop_Encoded         0.084 | 3.989  \n",
       "Crop_Year, Season_Encoded, State_Encoded, Crop_...  0.162 | 3.815  \n",
       "PC1, PC2, Season_Encoded, Crop_Encoded              0.147 | 3.849  \n",
       "PC1, PC2, Season_Encoded, State_Encoded             0.080 | 3.997  \n",
       "PC1, PC2, State_Encoded, Crop_Encoded               0.071 | 4.016  \n",
       "PC1, Season_Encoded, State_Encoded, Crop_Encoded    0.146 | 3.852  \n",
       "PC2, Season_Encoded, State_Encoded, Crop_Encoded    0.157 | 3.826  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 5 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.907 | 1.269</td>\n",
       "      <td>0.862 | 1.549</td>\n",
       "      <td>0.164 | 3.812</td>\n",
       "      <td>0.810 | 1.817</td>\n",
       "      <td>0.939 | 1.026</td>\n",
       "      <td>0.164 | 3.811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.751 | 2.081</td>\n",
       "      <td>0.650 | 2.467</td>\n",
       "      <td>0.099 | 3.957</td>\n",
       "      <td>0.501 | 2.944</td>\n",
       "      <td>0.827 | 1.735</td>\n",
       "      <td>0.099 | 3.957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.921 | 1.173</td>\n",
       "      <td>0.876 | 1.469</td>\n",
       "      <td>0.079 | 4.000</td>\n",
       "      <td>0.831 | 1.716</td>\n",
       "      <td>0.940 | 1.023</td>\n",
       "      <td>0.079 | 4.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.863 | 1.541</td>\n",
       "      <td>0.847 | 1.631</td>\n",
       "      <td>0.162 | 3.816</td>\n",
       "      <td>0.834 | 1.697</td>\n",
       "      <td>0.912 | 1.233</td>\n",
       "      <td>0.162 | 3.816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.781 | 1.951</td>\n",
       "      <td>0.850 | 1.611</td>\n",
       "      <td>0.170 | 3.796</td>\n",
       "      <td>0.815 | 1.790</td>\n",
       "      <td>0.917 | 1.202</td>\n",
       "      <td>0.170 | 3.796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded</th>\n",
       "      <td>0.905 | 1.285</td>\n",
       "      <td>0.859 | 1.564</td>\n",
       "      <td>0.083 | 3.990</td>\n",
       "      <td>0.803 | 1.850</td>\n",
       "      <td>0.947 | 0.961</td>\n",
       "      <td>0.083 | 3.990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded</th>\n",
       "      <td>0.540 | 2.826</td>\n",
       "      <td>0.641 | 2.497</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "      <td>0.394 | 3.246</td>\n",
       "      <td>0.752 | 2.077</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, State_Encoded</th>\n",
       "      <td>0.599 | 2.640</td>\n",
       "      <td>0.462 | 3.058</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "      <td>0.276 | 3.545</td>\n",
       "      <td>0.732 | 2.156</td>\n",
       "      <td>0.012 | 4.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.708 | 2.253</td>\n",
       "      <td>0.789 | 1.914</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "      <td>0.784 | 1.938</td>\n",
       "      <td>0.853 | 1.595</td>\n",
       "      <td>0.169 | 3.799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.671 | 2.392</td>\n",
       "      <td>0.613 | 2.593</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "      <td>0.464 | 3.051</td>\n",
       "      <td>0.796 | 1.882</td>\n",
       "      <td>0.104 | 3.945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.865 | 1.532</td>\n",
       "      <td>0.833 | 1.703</td>\n",
       "      <td>0.081 | 3.995</td>\n",
       "      <td>0.795 | 1.889</td>\n",
       "      <td>0.921 | 1.172</td>\n",
       "      <td>0.081 | 3.995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.711 | 2.241</td>\n",
       "      <td>0.838 | 1.679</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "      <td>0.803 | 1.852</td>\n",
       "      <td>0.883 | 1.428</td>\n",
       "      <td>0.177 | 3.780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.502 | 2.941</td>\n",
       "      <td>0.619 | 2.572</td>\n",
       "      <td>0.114 | 3.922</td>\n",
       "      <td>0.265 | 3.573</td>\n",
       "      <td>0.732 | 2.157</td>\n",
       "      <td>0.114 | 3.922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.857 | 1.575</td>\n",
       "      <td>0.857 | 1.575</td>\n",
       "      <td>0.091 | 3.973</td>\n",
       "      <td>0.800 | 1.863</td>\n",
       "      <td>0.935 | 1.062</td>\n",
       "      <td>0.091 | 3.973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.855 | 1.587</td>\n",
       "      <td>0.824 | 1.747</td>\n",
       "      <td>0.177 | 3.782</td>\n",
       "      <td>0.808 | 1.826</td>\n",
       "      <td>0.908 | 1.265</td>\n",
       "      <td>0.177 | 3.782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.924 | 1.147</td>\n",
       "      <td>0.859 | 1.567</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "      <td>0.788 | 1.920</td>\n",
       "      <td>0.951 | 0.919</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.780 | 1.953</td>\n",
       "      <td>0.689 | 2.324</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "      <td>0.531 | 2.855</td>\n",
       "      <td>0.878 | 1.457</td>\n",
       "      <td>0.087 | 3.981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.950 | 0.936</td>\n",
       "      <td>0.882 | 1.429</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "      <td>0.742 | 2.116</td>\n",
       "      <td>0.959 | 0.840</td>\n",
       "      <td>0.077 | 4.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.954 | 0.894</td>\n",
       "      <td>0.872 | 1.491</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "      <td>0.794 | 1.891</td>\n",
       "      <td>0.957 | 0.861</td>\n",
       "      <td>0.154 | 3.833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.887 | 1.402</td>\n",
       "      <td>0.864 | 1.536</td>\n",
       "      <td>0.165 | 3.807</td>\n",
       "      <td>0.775 | 1.975</td>\n",
       "      <td>0.958 | 0.850</td>\n",
       "      <td>0.165 | 3.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.945 | 0.981</td>\n",
       "      <td>0.884 | 1.418</td>\n",
       "      <td>0.149 | 3.844</td>\n",
       "      <td>0.799 | 1.870</td>\n",
       "      <td>0.958 | 0.852</td>\n",
       "      <td>0.149 | 3.844</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.907 | 1.269   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.751 | 2.081   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.921 | 1.173   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.863 | 1.541   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.781 | 1.951   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.905 | 1.285   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.540 | 2.826   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.599 | 2.640   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.708 | 2.253   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.671 | 2.392   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.865 | 1.532   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.711 | 2.241   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.502 | 2.941   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.857 | 1.575   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.855 | 1.587   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.924 | 1.147   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.780 | 1.953   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.950 | 0.936   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.954 | 0.894   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.887 | 1.402   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.945 | 0.981   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...    0.862 | 1.549   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.650 | 2.467   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...    0.876 | 1.469   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.847 | 1.631   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.850 | 1.611   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded    0.859 | 1.564   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.641 | 2.497   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.462 | 3.058   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.789 | 1.914   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.613 | 2.593   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...    0.833 | 1.703   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.838 | 1.679   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.619 | 2.572   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...    0.857 | 1.575   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.824 | 1.747   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded     0.859 | 1.567   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded    0.689 | 2.324   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded      0.882 | 1.429   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...    0.872 | 1.491   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...    0.864 | 1.536   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...    0.884 | 1.418   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...    0.164 | 3.812   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.099 | 3.957   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...    0.079 | 4.000   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...    0.162 | 3.816   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...    0.170 | 3.796   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded    0.083 | 3.990   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.104 | 3.945   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.012 | 4.143   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.169 | 3.799   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.104 | 3.945   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...    0.081 | 3.995   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.177 | 3.780   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.114 | 3.922   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...    0.091 | 3.973   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...    0.177 | 3.782   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded     0.154 | 3.833   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded    0.087 | 3.981   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded      0.077 | 4.004   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...    0.154 | 3.833   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...    0.165 | 3.807   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...    0.149 | 3.844   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.810 | 1.817   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.501 | 2.944   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.831 | 1.716   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.834 | 1.697   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.815 | 1.790   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.803 | 1.850   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.394 | 3.246   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.276 | 3.545   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.784 | 1.938   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.464 | 3.051   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.795 | 1.889   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.803 | 1.852   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.265 | 3.573   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.800 | 1.863   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.808 | 1.826   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.788 | 1.920   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.531 | 2.855   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.742 | 2.116   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.794 | 1.891   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.775 | 1.975   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.799 | 1.870   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.939 | 1.026   \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.827 | 1.735   \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.940 | 1.023   \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.912 | 1.233   \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.917 | 1.202   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.947 | 0.961   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.752 | 2.077   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.732 | 2.156   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.853 | 1.595   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.796 | 1.882   \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.921 | 1.172   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.883 | 1.428   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.732 | 2.157   \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.935 | 1.062   \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.908 | 1.265   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.951 | 0.919   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.878 | 1.457   \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.959 | 0.840   \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.957 | 0.861   \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.958 | 0.850   \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.958 | 0.852   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Crop...  0.164 | 3.811  \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.099 | 3.957  \n",
       "Annual_Rainfall, PC1, PC2, State_Encoded, Crop_...  0.079 | 4.000  \n",
       "Annual_Rainfall, PC1, Season_Encoded, State_Enc...  0.162 | 3.816  \n",
       "Annual_Rainfall, PC2, Season_Encoded, State_Enc...  0.170 | 3.796  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Crop_Encoded  0.083 | 3.990  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.104 | 3.945  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.012 | 4.143  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.169 | 3.799  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.104 | 3.945  \n",
       "Crop_Year, Annual_Rainfall, PC1, State_Encoded,...  0.081 | 3.995  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.177 | 3.780  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.114 | 3.922  \n",
       "Crop_Year, Annual_Rainfall, PC2, State_Encoded,...  0.091 | 3.973  \n",
       "Crop_Year, Annual_Rainfall, Season_Encoded, Sta...  0.177 | 3.782  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, Crop_Encoded   0.154 | 3.833  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Encoded  0.087 | 3.981  \n",
       "Crop_Year, PC1, PC2, State_Encoded, Crop_Encoded    0.077 | 4.004  \n",
       "Crop_Year, PC1, Season_Encoded, State_Encoded, ...  0.154 | 3.833  \n",
       "Crop_Year, PC2, Season_Encoded, State_Encoded, ...  0.165 | 3.807  \n",
       "PC1, PC2, Season_Encoded, State_Encoded, Crop_E...  0.149 | 3.844  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 6 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.919 | 1.183</td>\n",
       "      <td>0.878 | 1.454</td>\n",
       "      <td>0.165 | 3.809</td>\n",
       "      <td>0.853 | 1.600</td>\n",
       "      <td>0.942 | 1.003</td>\n",
       "      <td>0.165 | 3.809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, Crop_Encoded</th>\n",
       "      <td>0.904 | 1.292</td>\n",
       "      <td>0.874 | 1.477</td>\n",
       "      <td>0.172 | 3.793</td>\n",
       "      <td>0.812 | 1.809</td>\n",
       "      <td>0.948 | 0.950</td>\n",
       "      <td>0.172 | 3.793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded</th>\n",
       "      <td>0.687 | 2.333</td>\n",
       "      <td>0.692 | 2.313</td>\n",
       "      <td>0.107 | 3.939</td>\n",
       "      <td>0.512 | 2.910</td>\n",
       "      <td>0.846 | 1.636</td>\n",
       "      <td>0.107 | 3.939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.914 | 1.220</td>\n",
       "      <td>0.873 | 1.483</td>\n",
       "      <td>0.085 | 3.988</td>\n",
       "      <td>0.822 | 1.760</td>\n",
       "      <td>0.949 | 0.938</td>\n",
       "      <td>0.085 | 3.988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.876 | 1.465</td>\n",
       "      <td>0.849 | 1.618</td>\n",
       "      <td>0.171 | 3.795</td>\n",
       "      <td>0.834 | 1.700</td>\n",
       "      <td>0.929 | 1.111</td>\n",
       "      <td>0.171 | 3.795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.853 | 1.596</td>\n",
       "      <td>0.858 | 1.569</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "      <td>0.832 | 1.707</td>\n",
       "      <td>0.937 | 1.050</td>\n",
       "      <td>0.179 | 3.776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crop_Year, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.952 | 0.917</td>\n",
       "      <td>0.889 | 1.387</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "      <td>0.797 | 1.877</td>\n",
       "      <td>0.966 | 0.771</td>\n",
       "      <td>0.157 | 3.826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.919 | 1.183   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.904 | 1.292   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.687 | 2.333   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.914 | 1.220   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.876 | 1.465   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.853 | 1.596   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.952 | 0.917   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.878 | 1.454   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.874 | 1.477   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.692 | 2.313   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.873 | 1.483   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.849 | 1.618   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.858 | 1.569   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...    0.889 | 1.387   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...    0.165 | 3.809   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.172 | 3.793   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.107 | 3.939   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...    0.085 | 3.988   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...    0.171 | 3.795   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...    0.179 | 3.776   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...    0.157 | 3.826   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.853 | 1.600   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.812 | 1.809   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.512 | 2.910   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.822 | 1.760   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.834 | 1.700   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.832 | 1.707   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.797 | 1.877   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.942 | 1.003   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.948 | 0.950   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.846 | 1.636   \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.949 | 0.938   \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.929 | 1.111   \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.937 | 1.050   \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.966 | 0.771   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Annual_Rainfall, PC1, PC2, Season_Encoded, Stat...  0.165 | 3.809  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.172 | 3.793  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.107 | 3.939  \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, State_Enc...  0.085 | 3.988  \n",
       "Crop_Year, Annual_Rainfall, PC1, Season_Encoded...  0.171 | 3.795  \n",
       "Crop_Year, Annual_Rainfall, PC2, Season_Encoded...  0.179 | 3.776  \n",
       "Crop_Year, PC1, PC2, Season_Encoded, State_Enco...  0.157 | 3.826  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================================================================\n",
      "🧮 Feature Count: 7 Output format: (R2 | RMSE)\n",
      "====================================================================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Model</th>\n",
       "      <th>DecisionTree</th>\n",
       "      <th>GradientBoosting</th>\n",
       "      <th>LinearRegression</th>\n",
       "      <th>MLPRegressor</th>\n",
       "      <th>RandomForest</th>\n",
       "      <th>Ridge</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature_Set</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Crop_Year, Annual_Rainfall, PC1, PC2, Season_Encoded, State_Encoded, Crop_Encoded</th>\n",
       "      <td>0.934 | 1.073</td>\n",
       "      <td>0.886 | 1.406</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "      <td>0.845 | 1.639</td>\n",
       "      <td>0.949 | 0.942</td>\n",
       "      <td>0.173 | 3.789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Model                                                DecisionTree  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.934 | 1.073   \n",
       "\n",
       "Model                                              GradientBoosting  \\\n",
       "Feature_Set                                                           \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.886 | 1.406   \n",
       "\n",
       "Model                                              LinearRegression  \\\n",
       "Feature_Set                                                           \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...    0.173 | 3.789   \n",
       "\n",
       "Model                                                MLPRegressor  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.845 | 1.639   \n",
       "\n",
       "Model                                                RandomForest  \\\n",
       "Feature_Set                                                         \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.949 | 0.942   \n",
       "\n",
       "Model                                                       Ridge  \n",
       "Feature_Set                                                        \n",
       "Crop_Year, Annual_Rainfall, PC1, PC2, Season_En...  0.173 | 3.789  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for count, df in grouped_results.items():\n",
    "    print(f\"\\n{'='*100}\")\n",
    "    print(f\"🧮 Feature Count: {count} Output format: (R2 | RMSE)\")\n",
    "    print(f\"{'='*100}\")\n",
    "    display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "42615f26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:50.964415Z",
     "iopub.status.busy": "2025-06-29T08:54:50.963989Z",
     "iopub.status.idle": "2025-06-29T08:54:50.986383Z",
     "shell.execute_reply": "2025-06-29T08:54:50.985238Z"
    },
    "papermill": {
     "duration": 0.056884,
     "end_time": "2025-06-29T08:54:50.988013",
     "exception": false,
     "start_time": "2025-06-29T08:54:50.931129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_per_model = {}\n",
    "\n",
    "for count, df in grouped_results.items():\n",
    "    best_per_model[count] = {}\n",
    "    for model in df.columns:\n",
    "        try:\n",
    "            best_row = df[model].dropna().apply(lambda x: float(x.split('|')[0])).idxmax()\n",
    "            best_r2_rmse = df[model][best_row]\n",
    "            best_per_model[count][model] = {\n",
    "                \"Feature_Set\": best_row,\n",
    "                \"R2 | RMSE\": best_r2_rmse\n",
    "            }\n",
    "        except Exception as e:\n",
    "            best_per_model[count][model] = {\n",
    "                \"Feature_Set\": None,\n",
    "                \"R2 | RMSE\": None,\n",
    "                \"Error\": str(e)\n",
    "            }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a74cb647",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:51.054751Z",
     "iopub.status.busy": "2025-06-29T08:54:51.054449Z",
     "iopub.status.idle": "2025-06-29T08:54:51.063469Z",
     "shell.execute_reply": "2025-06-29T08:54:51.062452Z"
    },
    "papermill": {
     "duration": 0.046493,
     "end_time": "2025-06-29T08:54:51.065012",
     "exception": false,
     "start_time": "2025-06-29T08:54:51.018519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "summary_rows = []\n",
    "\n",
    "for count, models in best_per_model.items():\n",
    "    for model_name, info in models.items():\n",
    "        summary_rows.append({\n",
    "            \"Feature_Count\": count,\n",
    "            \"Model\": model_name,\n",
    "            \"Best_Feature_Set\": info[\"Feature_Set\"],\n",
    "            \"R2 | RMSE\": info[\"R2 | RMSE\"]\n",
    "        })\n",
    "\n",
    "summary_df = pd.DataFrame(summary_rows)\n",
    "summary_df = summary_df.sort_values(by=[\"Feature_Count\", \"Model\"]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e42d4ab2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-29T08:54:51.127024Z",
     "iopub.status.busy": "2025-06-29T08:54:51.126692Z",
     "iopub.status.idle": "2025-06-29T08:54:56.898327Z",
     "shell.execute_reply": "2025-06-29T08:54:56.897160Z"
    },
    "papermill": {
     "duration": 5.805057,
     "end_time": "2025-06-29T08:54:56.900179",
     "exception": false,
     "start_time": "2025-06-29T08:54:51.095122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Exported: best_models_1_features.png\n",
      "✅ Exported: best_models_2_features.png\n",
      "✅ Exported: best_models_3_features.png\n",
      "✅ Exported: best_models_4_features.png\n",
      "✅ Exported: best_models_5_features.png\n",
      "✅ Exported: best_models_6_features.png\n",
      "✅ Exported: best_models_7_features.png\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import textwrap\n",
    "\n",
    "def wrap_text(text, width=30):\n",
    "    if pd.isnull(text):\n",
    "        return \"\"\n",
    "    return \"\\n\".join(textwrap.wrap(text, width=width))\n",
    "\n",
    "def save_table_as_image(df, filename=\"table.png\", dpi=300):\n",
    "    df = df.copy()\n",
    "    df[\"Best_Feature_Set\"] = df[\"Best_Feature_Set\"].apply(lambda x: wrap_text(x, width=30))\n",
    "    \n",
    "    max_lines = df[\"Best_Feature_Set\"].apply(lambda x: x.count('\\n') + 1).max()\n",
    "    row_height = 1 + 0.2 * max_lines\n",
    "    fig, ax = plt.subplots(figsize=(15, row_height * len(df)))\n",
    "    ax.axis('off')\n",
    "\n",
    "    table = ax.table(\n",
    "        cellText=df.values,\n",
    "        colLabels=df.columns,\n",
    "        loc='center',\n",
    "        cellLoc='center'\n",
    "    )\n",
    "\n",
    "    table.auto_set_font_size(False)\n",
    "    table.set_fontsize(10)\n",
    "    table.scale(1.2, 3.0)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig(filename, dpi=dpi)\n",
    "    plt.close()\n",
    "    print(f\"✅ Exported: {filename}\")\n",
    "\n",
    "for feature_count, models in best_per_model.items():\n",
    "    rows = []\n",
    "    for model, info in models.items():\n",
    "        rows.append({\n",
    "            \"Model\": model,\n",
    "            \"Best_Feature_Set\": info[\"Feature_Set\"],\n",
    "            \"R2 | RMSE\": info[\"R2 | RMSE\"]\n",
    "        })\n",
    "    df = pd.DataFrame(rows).sort_values(by=\"Model\").reset_index(drop=True)\n",
    "    filename = f\"best_models_{feature_count}_features.png\"\n",
    "    save_table_as_image(df, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d4c8e48",
   "metadata": {
    "papermill": {
     "duration": 0.031798,
     "end_time": "2025-06-29T08:54:56.963436",
     "exception": false,
     "start_time": "2025-06-29T08:54:56.931638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3b41fcc",
   "metadata": {
    "papermill": {
     "duration": 0.029991,
     "end_time": "2025-06-29T08:54:57.023598",
     "exception": false,
     "start_time": "2025-06-29T08:54:56.993607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3525502,
     "sourceId": 6147658,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 723.977767,
   "end_time": "2025-06-29T08:54:57.878516",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-29T08:42:53.900749",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
